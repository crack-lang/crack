// Copyright 2010-2011 Google Inc.
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

import crack.lang die;
import crack.io cout, Writer;
import crack.regex escape, Regex, Match;
import crack.functor Functor2;
@import crack.ann impl;

rx := Regex('simple');
m := rx.search('not simple');
if (m.begin() != 4) die('begin failed');
if (m.end() != 10) die('end failed');
if (m.group() != 'simple') die('group failed');

rx = Regex('blah{(.*)}');
m = rx.search('this is blah{foo}');
if (!m || m.group(1) != 'foo') die('group(1) failed');
if (m.begin(1) != 13) die('begin(1) failed');
if (m.end(1) != 16) die('end(1) failed');

rx = Regex('^blah{(?P<stuff>.*)}');
m = rx.search('blah{foo}');
if (!m || m.group('stuff') != 'foo')
    die('named groups failed');
if (m.begin('stuff') != 5) die('begin(stuff) failed');
if (m.end('stuff') != 8) die('end(stuff) failed');

if (1) {
    expected := '\\.\\?\\+\\*\\[\\\\\\{\\^\\$\\(';
    actual := escape('.?+*[\\{^$(');
    if (actual != expected)
        cout `FAILED regex escaping: got $actual, expected $expected\n`;
}

if (1) {

    void replacer(Match match, Writer out) {
        if (match.group() != 'pat')
            cout `FAILED match value during replacement.\n`;
        out.write('foo');
    }

    rx = Regex('pat');
    if (rx.subst('some pat for patbar', 'foo') != 'some foo for foobar')
        cout `FAILED basic string replacement\n`;

    if (rx.subst('some pat for patbar', 'foo', 1) != 'some foo for patbar')
        cout `FAILED counted string replacement\n`;

    if (rx.subst('patpat', 'foo') != 'foofoo')
        cout `FAILED replacement at beginning or end or abuttal\n`;

    if (rx.subst('some pat for patbar', replacer) != 'some foo for foobar')
        cout `FAILED function replacement\n`;
}

if (1) {
    rx = Regex(r'foo');
    if (!rx.match('foobar'))
        cout `FAILED match() on matching string\n`;

    if (rx.match('babafoo'))
        cout `FAILED !match() not starting with matching string\n`;
}

# regex null termination problem
if (1) {
    s := 'xxabc';
    rx := Regex(s.slice(0, 2));
    if (!rx.match('xxfoo'))
        cout `FAILED regex constructed from substring\n`;
}

# simple test of functors
if (1) {
    class F @impl Functor2[void, Match, Writer] {
        void oper call(Match mx, Writer out) {
            if (mx.group() != 'pat')
                cout `FAILED match during value replacement.\n`;
            out.write('test');
        }
    }

    rx = Regex('pat');
    if (rx.subst('exchange pat for pat', F(), -1) != 'exchange test for test')
        cout `FAILED substitution of a functor.\n`;
}

cout `ok\n`;
