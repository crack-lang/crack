# Copyright 2010-2011 Google Inc.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import crack.io cout, Reader, StringWriter, StringReader;
import crack.lang Buffer, WriteBuffer;
import crack.serial BufferDeserializer, SerialWriter, SerialReader, BUFSIZE,
    END;
import crack.strutil StringArray;

@import crack.ann assert, impl;

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write(1000);
    w.write('test');
    SerialReader r = {StringReader(sw.string())};
    if (r.readUInt() != 1000)
        cout `Failed to write and read uint32\n`;

    if (r.readString() != 'test')
        cout `Failed to write and read string\n`;
}

if (true) {
    # test reading from an empty buffer
    BufferDeserializer deser = {Buffer(null, 0)};
    if (deser.readUInt().success)
        cout `FAILED, got success on empty buffer read\n`;
    if (deser.pos != 0)
        cout I`FAILED, got pos update on empty buffer read: pos =
               $(deser.pos)\n`;
}

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write(1000);
    BufferDeserializer deser = {sw.string()};
    if (!deser.readUInt().success)
        cout `FAILED getting success from successful readUInt()\n`;
    if (deser.lastUInt != 1000)
        cout I`FAILED getting uint from BufferDeserializer, got \
               $(deser.lastUInt)\n`;
    if (deser.pos != 2)
        cout I`FAILED BufferDeserializer.readUInt() buffer pos update, got
               $(deser.pos)\n`;
}

# string read underflow.
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write('ab');
    BufferDeserializer deser = {sw.string()};
    deser.size = 2;
    if (deser.readString().success)
        cout `FAILED got success on empty buffer readString()\n`;
    if (deser.pos)
        cout `FAILED incremented pos on underflowed readString()\n`;
}

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};
    w.write('test string');
    BufferDeserializer deser = {sw.string()};
    if (!deser.readString().success)
        cout `FAILED readString()\n`;
    if (deser.lastString != 'test string')
        cout `FAILED readString() value, got $(deser.lastString)\n`;
    if (deser.pos != 12)
        cout `FAILED readString() pos, got $(deser.pos)\n`;
}

if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};

    # do a one byte offset just so we can test float reads
    w.write(0);
    w.write(float32(1.23));
    w.write(float64(4.56));

    BufferDeserializer deser = {sw.string()};
    if (!deser.readUInt().success || deser.lastUInt != 0)
        cout I`FAILED reading a zero uint, success = $(deser.success) \
               lastUInt = $(deser.lastUInt)\n`;
    if (!deser.readFloat32().success)
        cout `FAILED reading a float32\n`;
    if (deser.lastFloat32 != 1.23)
        cout I`FAILED reading float32, expected 1.23 got \
               $(deser.lastFloat32)\n`;
    if (!deser.readFloat64().success)
        cout `FAILED reading a float64\n`;
    if (deser.lastFloat64 != 4.56)
        cout I`FAILED reading float64, expected 4.56 got \
               $(deser.lastFloat64)\n`;

}

# test for two bugs: terminating single byte uint and float being read from
# the existing buffer.
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};

    w.write(1);
    w.write(float32(2));
    w.write(float64(3));
    w.write(0);

    SerialReader deser = {StringReader(sw.string())};
    if (deser.readUInt() != 1)
        cout `FAILED reading first byte\n`;
    if (deser.readFloat32() != 2)
        cout `FAILED reading float32\n`;
    if (deser.readFloat64() != 3)
        cout `FAILED reading float64\n`;
    if (deser.readUInt() != 0)
        cout `FAILED reading terminating uint\n`;
}

# read an array of floats large enough to trigger a buffer reload
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};

    w.write(1);
    for (int i = 0; i < BUFSIZE; ++i)
        w.write(float32(i));

    SerialReader deser = {StringReader(sw.string())};
    if (deser.readUInt() != 1)
        cout `FAILED (big array of floats) reading first byte\n`;
    for (int i = 0; i < BUFSIZE; ++i)
        if (int(deser.readFloat32()) != i)
            cout `FAILED (big array of floats) reading value $i\n`;
}

# try an array of float64s
if (true) {
    StringWriter sw = {};
    SerialWriter w = {sw};

    w.write(1);
    for (int i = 0; i < BUFSIZE; ++i)
        w.write(float64(i));

    SerialReader deser = {StringReader(sw.string())};
    if (deser.readUInt() != 1)
        cout `FAILED (big array of float64s) reading first byte\n`;
    for (int i = 0; i < BUFSIZE; ++i)
        if (int(deser.readFloat64()) != i)
            cout `FAILED (big array of float64s) reading value $i\n`;
}

# Mkae sure "no error on underflow" works for the leading varint in a string.
if (true) {
    class TestReader @impl Reader {
        StringArray data;
        oper init(StringArray data) : data = data {}
        uint read(WriteBuffer buf) {
            if (!data) {
                buf.size = 0;
                return 0;
            }
            elem := data[0];
            data.delete(0);
            @assert(buf.cap >= elem.size);
            buf.move(0, elem.buffer, elem.size);
            return elem.size;
        }

        @final void add(String elem) {
            data.append(elem);
        }
    }
    TestReader tr = {StringArray!['\x81']};
    SerialReader r = {tr};
    if (r.readUInt(false) != END)
        cout I`FAILED no error on underflow for incomplete integer.\n`;

    tr.add('\x01');
    if (r.readUInt(false) != 129)
        cout I`FAILED resuming a varint read\n`;

    tr.add('\x80');
    if (r.readString(false))
        cout I`FAILED no error on underflow for incomplete string length \
               varint\n`;

    tr.add('\x01' + 'abcd' * 16);
    if (res := r.readString(false)) {
        cout I`FAILED no error on underflow for incomplete string body\n`;
        cout `  got $(res.getRepr())\n`;
    }

    tr.add('abcd' * 16);
    if (r.readString(false) != 'abcd' * 32)
        cout I`FAILED string chunking\n`;

    # Verify that compacting works.  Start with a fresh buffer.
    tr = TestReader(StringArray!['\x0a1234567890' '\x0a123456']);
    r = SerialReader(tr);
    if (r.readString(false) != '1234567890')
        cout `FAILED initial read in compacting test.\n`;
    if (r.readString(false))
        cout `FAILED partial read in compacting test\n`;
    tr.add('7890');
    if (r.readString(false) != '1234567890')
        cout `FAILED post-compaction read\n`;

    # Verify that we can read a partial integer from after startPos.
    tr = TestReader(StringArray!['\x04abcd' '\x80']);
    r = SerialReader(tr);
    if (r.readString(false) != 'abcd')
        cout `FAILED initial read in offset partial int test.\n`;
    if (r.readUInt(false) != END)
        cout `FAILED to return end after offset partial int read\n`;
    tr.add('\x01');
    if (r.readUInt(false) != 0x80)
        cout `FAILED to read int after offset partial read\n`;
}

cout `ok\n`;
