# Copyright 2011-2012 Google Inc.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import test.testmod_generic G;

void someFunc() {}

class FakeFormatter {
    int result;
    void format(byteptr val) {
        result |= val[0];
    }
    void format(int val) {
        result |= val;
    }
    void format(float val) { }

    int leave() { return result; }

    oper to bool() { return 1; }
}

# Make sure forward declared functions and classes don't cause an error if
# undefined at the end of the generic module.
void forwardFunc();
class ForwardClass;

bool gotStaticCalled;
class A[T] {
    T val;

    oper init(T val) : val = val {}
    @static void gotStatic() { gotStaticCalled = 1; }

    int format() { return FakeFormatter() `\001$val\002`; }

}

if (A[int](100).val != 100) puts('FAILED generic based on int');
if (A[float](1.0).val != 1.0) puts('FAILED generic based on float');
if (G[int]().getVal() != 100) puts('FAILED imported generics');

A[int].gotStatic();
if (!gotStaticCalled) puts('FAILED static function call');

if (A[int](4).format() != 7) puts('FAILED generic with i-string');


class B[T1, T2] { T1 f(T1 a) { return a; } T2 f(T2 a) { return a; } }
B[int, float] b = {};
if (b.f(100) != 100 || b.f(1.5) != 1.5)
    puts('FAILED two argument generic');

class C {
    oper to int() { return 1; } // so we can match a formtter

    A[C] wrap;
    oper init() : wrap(this) {}
}
C c = {};
if (!(c.wrap.val is c))
    puts('FAILED nested generic parameterized by outer class');

# test parsing a generic derived from another generic parameterized by a
# generic parameter
class D[T] : A[T] { oper init(int val) : A[T](val) {} }

if (D[int](100).val != 100)
    puts('FAILED generics inhereting from other generics');

# verify that symbols from enclosing contexts are available to a generic
if (1) {
    gotStaticCalled = 0;
    void e() {}

    void outer() {
        void f() {}
        int i;
        class B[X] {
            @static void g() { f(); e(); gotStaticCalled = 1; }
        }

        void h() {
            B[int].g();
        }

        h();
    }

    outer();
    if (!gotStaticCalled)
        puts('FAILED generics accessing symbols from enclosing contexts');
}

if (1) {
    class B[C] : C {}
    class Foo : VTableBase {}
    bool streq(byteptr a, byteptr b) {
        while (a[0]) {
            if (a[0] != b[0]) return 0;
            a += 1;
            b += 1;
        }
        return (!b[0]);
    }
    if (!streq(B[Foo]().class.name, "B"))
        puts('FAILED inheriting from a generic parameter');
}

# test instantiating an external generic with private types.
if (1) {
    class _N {}
    G[_N] vals;

    class N {
        class __M {}
        G[__M] __carr;
    }
}

# Define these now that we're done.
void forwardFunc() {}
class ForwardClass {}

puts('ok');
