
import crack.cont.array Array;
import crack.io cerr, StringReader;
import crack.lang AppendBuffer, Box;
import crack.math abs;
import crack.enc.json2 parse, JSONObjectMap;

@import crack.ann assert;

@assert(parse('"test string"') == 'test string');
@assert(parse('  "test string"') == 'test string');
@assert(parse('["first", "second"]') == Array[Object]!['first', 'second']);
@assert(parse('  [  "first"  ,   "second" ] ') ==
        Array[Object]!['first', 'second']);
@assert(parse('[]') == Array[Object]());

obj := JSONObjectMap.cast(parse('{"foo":"bar","baz":"bot"}'));
@assert(obj['foo'] == 'bar');
@assert(obj['baz'] == 'bot');
@assert(obj.count() == 2);

obj = JSONObjectMap.cast(parse(' { "foo" : "bar" , "baz" : "bot" } '));
@assert(obj['foo'] == 'bar');
@assert(obj['baz'] == 'bot');
@assert(obj.count() == 2);

obj = JSONObjectMap.cast(parse('{"foo": "bar"}'));
@assert(obj['foo'] == 'bar');
@assert(obj.count() == 1);

obj = JSONObjectMap.cast(parse('{}'));
@assert(obj.count() == 0);

@assert(Box[bool].cast(parse('true')).val);
@assert(!Box[bool].cast(parse('false')).val);
@assert(parse('null') is null);
@assert(Box[bool].cast(parse(' true ')).val);
@assert(!Box[bool].cast(parse(' false ')).val);
@assert(parse(' null ') is null);

@assert(parse(r'"\\\"\b\f\n\r\t\u07fFblech"') == '\\\"\b\f\n\r\t\xdf\xbfblech');

bool feq(float64 a, float64 b) {
    return abs(a - b) < abs(a) / 100000.0;
}

@assert(feq(Box[float64].cast(parse('1.25e+06')).val, 1.25e+06));
@assert(feq(Box[float64].cast(parse('1E+06')).val, 1e+06));
@assert(feq(Box[float64].cast(parse('1.23')).val, 1.23));
@assert(feq(Box[float64].cast(parse('123')).val, 123));
arr := Array[Object].cast(parse('[1.23e+06]'));
@assert(feq(Box[float64].cast(arr[0]).val, 1.23e+06));
arr = Array[Object].cast(parse('[ 1.23e+06 ]'));
@assert(feq(Box[float64].cast(arr[0]).val, 1.23e+06));
arr = Array[Object].cast(parse('[1.23]'));
@assert(feq(Box[float64].cast(arr[0]).val, 1.23));
arr = Array[Object].cast(parse('[1E-5]'));
@assert(feq(Box[float64].cast(arr[0]).val, 1e-5));
arr = Array[Object].cast(parse('[100]'));
@assert(feq(Box[float64].cast(arr[0]).val, 100));

cerr `ok\n`;
