
# Requirements for @protobuf:
#
# import crack.cont.array Array;
# import crack.lang cmp;
# import crack.protobuf Field, Message, ProtoWriter;
# @import crack.ann impl;

import crack.cont.array Array;
import crack.io cerr, Formatter, StringFormatter, StringReader, StringWriter;
import crack.lang cmp, makeHashVal;
import crack.protobuf Field, Message, ProtoReader, ProtoWriter;
import crack.strutil StringArray;

@import crack.ann assert, impl;
@import crack.protobuf.ann protobuf;

@protobuf {
    # Uncomment "debug" to emit the generated code to standard output with
    # line numbers.
    #debug

    # Generate formatting methods.
    version = 1

    ## The Bar message.
    message Bar {
        repeated string name = 1;
    }

    ## The Foo message.
    message Foo {
        optional Bar bar = 1;
        required int32 field = 100;

        optional uint32 uint32Field = 2;
        optional uint64 uint64Field = 3;
        optional int64 int64Field = 4;
        optional bool boolField = 5;

        optional string strField = 6;
        optional bytes bytesField = 7;
    }

    message BarList {
        repeated Bar bars = 1;
    }
}

class RoundTripTest[T] {
    T old = {}, new = {};

    void test() {
        StringWriter out = {};
        pw := ProtoWriter(out);

        old.serialize(pw);
        new.deserialize(ProtoReader(StringReader(out.string())));
        if (old != new) {
            cerr I`FAILED round trip for $(T.name)
                     old: $old
                     new: $new\n`;
        }
    }
}

# test comparisons
if (true) {
    bar1 := Bar();
    bar2 := Bar();
    bar1.name = StringArray!['first'];
    @assert(bar1 != bar2);
    @assert(bar1.makeHashVal() != bar2.makeHashVal());

    bar2.name_append('first');
    @assert(bar1 == bar2);
    @assert(bar1.makeHashVal() == bar2.makeHashVal());

    foo1 := Foo();
    foo2 := Foo();
    foo1.field = 123;
    @assert(foo1 != foo2);
    @assert(foo1.makeHashVal() != foo2.makeHashVal());
    foo2.field = 123;
    @assert(foo1 == foo2);
    @assert(foo1.makeHashVal() == foo2.makeHashVal());
    foo2.bar = Bar();
    @assert(foo1 != foo2);
    @assert(foo1.makeHashVal() != foo2.makeHashVal());
    foo1.bar = Bar();
    @assert(foo1 == foo2);
    @assert(foo1.makeHashVal() == foo2.makeHashVal());
}

if (true) {
    barTest := RoundTripTest[Bar]();
    barTest.old.name = StringArray!['bar name'];
    barTest.test();

    fooTest := RoundTripTest[Foo]();
    fooTest.old.bar = barTest.new;
    fooTest.old.field = 123;
    fooTest.test();

    fooTest = RoundTripTest[Foo]();
    fooTest.old.field = 456;
    fooTest.test();
}

# other int type tests.
if (true) {
    fooTest := RoundTripTest[Foo]();

    # We intentionally don't test large values because they don't work at this
    # time.
    fooTest.old.uint32Field = 100;
    fooTest.old.uint64Field = 200;
    fooTest.old.int64Field = 300;
    fooTest.old.boolField = true;
    fooTest.test();
}

# Null versus empty field tests.
if (true) {
    fooTest := RoundTripTest[Foo]();

    fooTest.old.strField = '';
    fooTest.old.bytesField = '';
    fooTest.old.bar = Bar();
    fooTest.test();

    @assert(fooTest.new.strField !is null);
    @assert(fooTest.new.bytesField !is null);
    @assert(fooTest.new.bar !is null);
}

# Test formatting.
if (true) {
    foo := Foo();
    foo.bar = Bar();
    foo.bar.name = StringArray!['name1', 'name2'];
    foo.strField = 'string field';
    # leave bytesField null.
    foo.field = 100;
    foo.boolField = true;

    StringFormatter out = {};
    out `$foo`;
    @assert(out.string() ==
            I"{
                  bar: {
                      name: [
                          'name1',
                          'name2',
                      ]
                  }
                  field: 100
                  uint32Field: 0
                  uint64Field: 0
                  int64Field: 0
                  boolField: true
                  strField: 'string field'
                  bytesField: null
              }"
            );

    # Verify an empty list.
    foo = Foo();
    foo.bar = Bar();
    out = StringFormatter();
    out `$foo`;
    @assert(out.string() ==
            I'{
                  bar: {
                      name: []
                  }
                  field: 0
                  uint32Field: 0
                  uint64Field: 0
                  int64Field: 0
                  boolField: false
                  strField: null
                  bytesField: null
              }'
            );

    # Verify a null nested message.
    foo = Foo();
    out = StringFormatter();
    out `$foo`;
    @assert(out.string() ==
            I'{
                  bar: null
                  field: 0
                  uint32Field: 0
                  uint64Field: 0
                  int64Field: 0
                  boolField: false
                  strField: null
                  bytesField: null
              }'
            );
}

# Test cloning.
if (true) {
    foo := Foo();
    foo.bar = Bar();
    foo.bar.name = StringArray!['name1', 'name2'];
    foo.strField = 'string field';
    foo.field = 100;
    foo.boolField = true;

    foo2 := foo.clone();
    @assert(foo == foo2);

    # Make sure that arrays get deep-copied.
    @assert(foo.bar.name !is foo2.bar.name);

    # Test that it works with null messages.
    foo = Foo();
    @assert(foo == foo.clone());

    # Test deep cloning.
    bl := BarList();
    @assert(bl.clone().bars is null);
    bl.bars = Array[Bar]![Bar()];
    bl.bars[0].name = StringArray!['a', 'b'];
    bl2 := bl.clone();
    @assert(bl == bl2);
    @assert(bl.bars !is bl2.bars);
    @assert(bl.bars == bl2.bars);
    @assert(bl.bars[0] !is bl2.bars[0]);
    @assert(bl.bars[0] == bl2.bars[0]);
    @assert(bl.bars[0].name !is bl2.bars[0].name);
    @assert(bl.bars[0].name == bl2.bars[0].name);
}

cerr `ok\n`;
