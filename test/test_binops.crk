# Copyright 2010-2011 Google Inc.
# Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# tests of bitwise operations.

import crack.io cout;
@import crack.ann define;

void expect(int16 actual, String code, int16 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(uint16 actual, String code, uint16 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(int32 actual, String code, int32 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(uint32 actual, String code, uint32 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}


void expect(byte actual, String code, byte expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(uint64 actual, String code, uint64 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

void expect(int64 actual, String code, int64 expected) {
    if (actual != expected)
        cout `For operation: $code Expected: $expected, got $actual\n`;
}

expect(byte(1 | 2), "byte: 1 | 2", byte(3));
expect(int16(1) | int16(2), "int16: 1 | 2", int16(3));
expect(uint32(1) | uint16(2), "uint16: 1 | 2", 3);
expect(int32(1) | int32(2), "int32: 1 | 2", int32(3));
expect(uint32(1) | uint32(2), "uint32: 1 | 2", 3);
expect(int64(1) | int64(2), "int64: 1 | 2", int64(3));
expect(uint64(1) | uint64(2), "uint64: 1 | 2", 3);

expect(byte(7) & byte(1), "byte: 7 & 1", 1);
expect(int16(7) & int16(1), "int16: 7 & 1", 1);
expect(uint16(7) & uint16(1), "uint32: 7 & 1", 1);
expect(int32(7) & int32(1), "int32: 7 & 1", 1);
expect(uint32(7) & uint32(1), "uint32: 7 & 1", 1);
expect(int64(7) & int64(1), "int64: 7 & 1", 1);
expect(uint64(7) & uint64(1), "uint64: 7 & 1", 1);

expect(byte(1) << byte(4), "byte: 1 << 4", 16);
expect(int16(1) << int16(4), "int16: 1 << 4", 16);
expect(uint16(1) << uint16(4), "uint16: 1 << 4", 16);
expect(int32(1) << int32(4), "int32: 1 << 4", 16);
expect(uint32(1) << uint32(4), "uint32: 1 << 4", 16);
expect(int64(1) << int64(4), "int64: 1 << 4", 16);
expect(uint64(1) << uint64(4), "uint64: 1 << 4", 16);

expect(int16(-4) >> int16(1), "int16: -4 >> 1", -2);
expect(uint16(-4) >> uint16(1), "uint16: -4 >> 1", 32766);


expect(int32(-4) >> int32(1), "int32: -4 >> 1", -2);
expect(uint32(-4) >> uint32(1), "uint32: -4 >> 1", 2147483646);

expect(int64(-4) >> 1, "int64: -4 >> 1", -2);
expect(uint64(-4) >> 1, "uint64: -4 >> 1", 9223372036854775806);

expect(1 | 1 << 1, "1 | 1 << 1", 3);
expect(1 & 1 << 1, "1 & 1 << 1", 0);
expect(2 | 3 & 1, "2 | 3 & 1", 3);
expect(2 | 3 ^ 6, "2 | 3 ^ 6", 7);
expect(2 ^ 3 & 1, "2 ^ 3 & 1", 3);

if (1) {
    class A {}
    a := A();
    b := a;
    A c;
    if (a is b) 1; else cout `FAILED a is b\n`;
    if (b is a) 1; else cout `FAILED b is a\n`;
    if (a !is c) 1; else cout `FAILED a !is c\n`;
    if (b !is c) 1; else cout `FAILED b !is c\n`;
}

# verify that the result types of binary operators are what we expect them to
# be

@define ct(l, op, r, t, v) {
    if (1) {
        l lv = 1;
        r rv = 2;
        ln := $l;
        rn := $r;
        opn := $op;

        if (!(typeof(lv op rv) is t)) {
            tn := $t;
            cout `typeof($ln $opn $rn) != $tn\n`;
        }

        if ((lv op rv) != t(v)) {
            vn := $v;
            cout `$ln $opn $rn != $vn\n`;
        }
    }
}

@define cct(l, r, t) {
    if (!(typeof(l + r) is t)) {
        ln := $l;
        rn := $r;
        tn := $t;
        cout `typeof($ln + $rn) is not $tn\n`;
    }
}

@define cit(l, r, t) {
    @ct(l, +, r, t, 3);
    @ct(l, -, r, t, -1);
    @ct(l, *, r, t, 2);
    @ct(l, /, r, t, 0);
    @ct(l, %, r, t, 1);
    @ct(l, |, r, t, 3);
    @ct(l, &, r, t, 0);
    @ct(l, ^, r, t, 3);
    @ct(l, <<, r, t, 4);
    @ct(l, >>, r, t, 0);
}

@define cft(l, r, t) {
    @ct(l, +, r, t, 3.0);
    @ct(l, -, r, t, -1.0);
    @ct(l, *, r, t, 2.0);
    @ct(l, /, r, t, 0.5);
    @ct(l, %, r, t, 1.0);
}

void main() {
    @cit(byte, byte, byte)

    @cit(byte, int16, int16)
    @cit(int16, byte, int16)

    @cit(byte, uint16, uint16)
    @cit(uint16, byte, uint16)

    @cit(int16, int32, int32)
    @cit(int32, int16, int32)
    @cit(int16, uint32, int64)
    @cit(uint32, int16, int64)

    @cit(uint16, int32, int32)
    @cit(int32, uint16, int32)
    @cit(uint16, uint32, uint32)
    @cit(uint32, uint16, uint32)

    @cit(byte, int32, int32)
    @cit(int32, byte, int32)
    @cit(byte, uint32, uint32)
    @cit(uint32, byte, uint32)

    @cit(byte, int64, int64)
    @cit(int64, byte, int64)
    @cit(byte, uint64, uint64)
    @cit(uint64, byte, uint64)

    @cit(int16, int16, int16)
    @cit(int16, int64, int64)
    @cit(int64, int16, int64)

    @cit(uint16, uint16, uint16)
    @cit(uint16, int64, int64)
    @cit(int64, uint16, int64)
    @cit(uint16, uint64, uint64)
    @cit(uint64, uint16, uint64)

    @cit(int32, int32, int32)
    @cit(int32, uint32, int64)
    @cit(uint32, int32, int64)
    @cit(int32, int64, int64)
    @cit(int64, int32, int64)

    @cit(uint32, uint32, uint32)
    @cit(uint32, int64, int64)
    @cit(int64, uint32, int64)
    @cit(uint32, uint64, uint64)
    @cit(uint64, uint32, uint64)

    @cit(int64, int64, int64)
    @cit(uint64, uint64, uint64)

    @cft(float32, float32, float32)
    @cft(byte, float32, float32)
    @cft(float32, byte, float32)
    @cft(float32, int32, float64)
    @cft(int32, float32, float64)
    @cft(float32, uint32, float64)
    @cft(uint32, float32, float64)
    @cft(float32, float64, float64)
    @cft(float64, float32, float64)

    @cft(float64, float64, float64)

    @cit(int, int, int)
    @cit(int, byte, int)
    @cit(byte, int, int)
    @cit(int, int32, int)
    @cit(int32, int, int)
    @cit(int, uint32, int)
    @cit(uint32, int, int)
    @cit(int, int64, int)
    @cit(int64, int, int)
    @cit(int, uint64, int)
    @cit(uint64, int, int)

    @cft(float, float, float)
    @cft(float, byte, float)
    @cft(byte, float, float)
    @cft(float, int32, float)
    @cft(int32, float, float)
    @cft(float, int64, float)
    @cft(int64, float, float)

    # verify the weightedness of constants
    @cct(1, 2, int)
    @cct(1, 2.0, float)
    @cct(1.0, 2, float)
    @cct(int32(1), 2.0, float64)  # should be int32, since these floats are
                                  # int compatible
    @cct(1.0, int32(2), float64)

    cout `ok\n`;
}

main();


