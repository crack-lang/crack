# Copyright 2010-2011 Google Inc.
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# tests that order of construction and destruction of instance variables is
# correct in all modes.

import crack.io StringFormatter, cout;

out := StringFormatter();

class A {
    String val;

    oper init(String val) : val(val) {
        out `init $val;`;
    }

    oper init() : val('default') {
        out `init $val;`;
    }

    oper del() {
        out `delete $val;`;
    }
}

class B {
    # since these are stored in a map ordered by the name, we order instance
    # vars in these tests reverse-alpabetically to rule out the possibility
    # that initializer/destructor generation could still be generated from
    # the order of the map.
    A y = A('y');
    A x = A('x');
}

(B());
if (out.string().cmp('init y;init x;delete x;delete y;'))
    cout `FAILED default init/del\n`;

class C {
    A y = A('y');
    A x = A('x');
    oper del() {}
}
out = StringFormatter();
(C());
if (out.string().cmp('init y;init x;delete x;delete y;'))
    cout `FAILED default init specified del\n`;

class D {
    A z = A('z');
    A y = A('WRONG');
    A x = A('WRONG');

    oper init() : x('x'), y = A('y') {}
}
out = StringFormatter();
(D());
if (out.string().cmp('init z;init y;init x;delete x;delete y;delete z;'))
    cout `FAILED explicit initializers\n`;

class E {
    A x = {};
    oper init() {}
}
out = StringFormatter();
E();
if (out.string().cmp('init default;delete default;'))
    cout `FAILED init with no initializers\n`;

cout `ok\n`;
