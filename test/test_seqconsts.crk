// Copyright 2011 Google Inc.
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

import crack.lang die, free;
import crack.io cout, StringFormatter;
import crack.cont.array Array;
import crack.strutil StringArray;

array[int] intVals = [1, 2, 3];
for (int i = 0; i < 3; ++i)
     if (i != intVals[i] - 1)
          cout `FAILED index $i of test array not $(i - 1), but \
$(intVals[i])\n`;

String strcat(StringArray elems) {
    StringFormatter f = {};
    for (elem :in elems)
         f `$elem`;
    return f.string();
}


if (1) {
     Array[int] arr = [1, 2, 3];
     if (arr.count() != 3)
          cout `FAILED high-level object init: count != 3\n`;
     int i;
     for (elem :in arr)
          if (intVals[i] != arr[i])
               cout `FAILED high-level object init: index $i: \
$(arr[i]) != $(intVals[i])\n`;
}

if (1) {
    StringArray arr = ['first', 'second', 'third',];
    result := strcat(arr);
    if (result != 'firstsecondthird')
         cout `FAILED string array: concatenated = $result\n`;
}

if (1) {
     StringArray arr = [];
     if (arr.count() != 0)
          cout `FAILED empty sequence\n`;
}

# tests garbage collection
if (1) {
     int deleted;
     class GCTester {
          oper del() { ++deleted; }
          void append(Object any) {}
     }

     int gcObjDeleted;
     class GCObj { oper del() { ++gcObjDeleted; } }

     GCTester tester = ['first', 'second', GCObj()];
     if (gcObjDeleted != 1)
          cout `FAILED cleanup: element leaked\n`;

     if (deleted)
          cout `FAILED cleanup: collection deleted prematurely\n`;

     tester = null;
     if (deleted != 1)
          cout `FAILED cleanup: collection leaked\n`;
}

# check expression syntax
if (1) {
    a := array[int]![1, 2, 3];
    for (int i = 0; i < 3; ++i)
        if (a[i] != i + 1)
            cout `FAILED expression array syntax: a[$i] != $(i + 1) (got \
$(a[i])\n`;
}

if (1) {
    a := StringArray!['first', 'second', 'third'];
    result := strcat(a);
    if (result != 'firstsecondthird')
        cout `FAILED expression container syntax: got $result\n`;
}

cout `ok\n`;
