// Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.

// Test mongo db methods

import crack.ascii hex, bin;
import crack.cont.array Array;
import crack.db.mongo MongoSync, BSON, MONGO_CONN_LOCAL,
    BSON_BINARY_SUBTYPE_GENERIC;
import crack.db.mongo_support OID;
import crack.io cout, cerr, FStr;
import crack.random uuid;
import crack.runtime errno, exit;
import crack.sys strerror;

sfmt := FStr();
b := BSON.fromJSON('{"A": 10, "B": "S"}');
bs := sfmt `$b`;
if (bs != '{"A": 10, "B": "S"}') {
    cout `Could not convert JSON to BSON!\n$bs\n`;
    // exit(1);
}

// Test OID
oid := OID.new();
hx := hex(oid);
newoid := OID(bin(hx));
hx2 := hex(newoid);

if (hx != hx2) {
    cout `$hx != $hx2 creating new OID\n`;
    exit(1);
}

// Test an array
b = BSON.fromJSON('{"A": 10, "B": "S", "C": [1, 2, 3, 4]}');
bs = sfmt `$b`;
if (bs != '{"A": 10, "B": "S", "C": [1, 2, 3, 4]}') {
    cout `Could not convert JSON to BSON!\n$bs\n`;
    //exit(1);
}

// Test a nested JSON document
b = BSON.fromJSON('{"A": 10, "B": "S", "C": [1, 2, 3, 4], "D": {"a": 1, "b": 10.5}}');
bs = sfmt `$b`;
if (bs != '{"A": 10, "B": "S", "C": [1, 2, 3, 4], "D": {"a": 1, "b": 10.500000}}') {
    cout `Could not convert JSON to BSON!\n$bs\n`;
    //exit(1);
}

// Connect to localhost over TCP/IP
C := MongoSync("localhost", 27017, true);
C.setAutoReconnect(true);

if (!C.ping()) {
    cerr `Failed to ping database, $(strerror()) ($(errno()))\n`;
    exit (1);
}

db := "tutorial";
coll := "docs";
ns := "tutorial.docs";

doc := BSON();
doc.appendString("hello", "world");
doc.appendInt32("the_first_answer", 42);
doc.appendBool("yes?", false);
doc.appendBinary("bin", BSON_BINARY_SUBTYPE_GENERIC, "binary data", );
doc.appendInt32("n", 1);
docid := uuid(12);
doc.appendOID("_id", docid);
doc.finish();

selector := BSON();
selector.appendOID("_id", docid);
selector.finish();

doc2 := BSON();
doc2.appendString("hello", "world 2");
doc2.appendInt32("the_final_answer", 42);
doc2.appendBool("yes?", false);
doc2.appendBinary("bin", BSON_BINARY_SUBTYPE_GENERIC, "binary data 2", );
doc2.appendInt32("n", 2);
doc2.finish();

if (!C.insert(ns, doc)) {
    cerr `Failed to insert document, $(strerror()) ($(errno()))\n`;
    exit (1);
}

if (!C.update(ns, 0, selector, doc2)) {
    cerr `Failed to update document, $(strerror()) ($(errno()))\n`;
    exit (1);
}

query := BSON();
query.appendOID("_id", docid);
query.finish();

cursor := C.query(ns, 0, 0, 10, query, null);
if (cursor is null)  {
    cerr `Failed to query document, $(strerror()) ($(errno()))\n`;
    exit (1);
}

uint j = 0;
while (cursor.next()) j++;

if (j != 1)
    cout `found $j results instead of 1, might mean uuid was not unique\n`;
cursor = C.query(ns, 0, 0, 10, '{"the_final_answer": 42}', null);
j = 0;

for (r :in cursor) j++;
if (j == 0) {
    cout `Could not find document just inserted!\n`;
    exit(1);
}

cnt := C.count(db, coll, '{"the_final_answer": 42}');

if (!C.delete(ns, 0, query))
    cout `could not delete document with id $(hex(docid))\n`;

if (!C.delete(ns, 0, '{"the_final_answer": 42}'))
    cout `could not delete document with test documents\n`;
else
    cout `ok\n`;


