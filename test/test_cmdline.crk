// Copyright 2011 Google Inc.
// Copyright 2011 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Test CmdOptions

import crack.ascii wsplit;
import crack.io cout, FStr;
import crack.cmdline CmdOptions, Option, CMD_STR, CMD_INT, CMD_FLOAT,
   CMD_BOOL;
import crack.lang Exception;
import crack.sys argv;
import crack.cont.array Array;

String S = null;

// Test full constructor
Option help = {"help", "h", "Show help message", "f", CMD_BOOL};

// Test constructor with default empty value
Option example = {"help", "h"};

Array[Option] optArray = [ help, example ];
CmdOptions testOptions = CmdOptions();
for (uint i = 0; i < 2; i++)
   testOptions.add(optArray[i]);

CmdOptions options = [Option("help",   "h", "Show help message", "f", CMD_BOOL),
                      Option("string", "s", "An example string", "astring", CMD_STR),
                      Option("float",  "f", "A floating point number", "100.0", CMD_FLOAT),
                      Option("int",    "i", "Integer example", "10", CMD_INT),
                      Option("bool",   "b", "Boolean example", "f", CMD_BOOL)];

// Test the values of the options
if (options.getInt("int") != 10 || options.getInt("i") != 10)
   cout `Integer retrieve failed\n`;

if (options.getFloat("float") != 100.0 || options.getFloat("f") != 100.0)
   cout `Float retrieve failed\n`;

if (options.getString("string") != "astring" || options.getString("s") != "astring")
   cout `String retrieve failed\n`;

if (options.getBool("bool") || options.getBool("b"))
   cout `Bool retrieve failed\n`;


// Dogfood it: create an Options object for the test script itself
sys_options :=  CmdOptions("--dump=b/false --usage=b/false --sort=b/true");

// Parse options passed by the system
sys_options.parse(argv, false);

if  (sys_options.getBool("dump")) {
   cout `First option set:\n`;
   options.dump();
   cout `$options\n`;
}

if  (sys_options.getBool("usage")){
   if (sys_options.getBool("sort")) {
      cout `Sorting options disabled for now\n`;
#~       options.sort();
   }
   options.printUsage(FStr() `Usage: $(argv[0]) [OPT1] [OPT2] file\n`);
}


// this causes a segfault in AOT compiled code
try{
   int o = options.getInt("o");
   cout `Fetching non-existent key did not throw exception\n`;
}
catch (Exception ex){}

options = CmdOptions();
test_argv := wsplit("--help=b/false --bool --int=i/1 --j=i/2 --s2=str2 -f "
                    "f/1.0 --gloat2=f/2.0");
test_argv2 := wsplit("-k i/20 -bk 1 -o f/1.0 -o20.0 -t hello -thello "
                     "--enable-selection --disable-makefalse -- "
                     "something");

// Parse command line array
options.parse(test_argv, true);

if  (sys_options.getBool("dump")) {
   cout `\nSecond option set:\n`;
   options.dump();
   cout `$options\n`;
}

unparsed := options.parse(test_argv2, true);

if  (sys_options.getBool("dump")) {
   cout `\nSecond option set:\n`;
   options.dump();
   cout `$options\n`;
}

if  (sys_options.getBool("usage"))
   options.printUsage(FStr() `Usage: $(argv[0]) [OPT1] [OPT2] file\n`);


if (options.getInt("int") != 1 || options.getInt("i") != 1)
   cout `Integer retrieve failed\n`;

if (options.getInt("j") != 2)
   cout `Integer retrieve 2 failed\n`;

if (options.getFloat("f") != 1.0)
   cout `Float retrieve failed\n`;

if (options.getFloat("gloat2") != 2.0 || options.getFloat("g") != 2.0)
   cout `Float retrieve failed\n`;

if (options.getString("s2") != "str2" || options.getString("s") != "str2")
   cout `String retrieve failed\n`;

if (!options.getBool("bool") || !options.getBool("b"))
   cout `Bool retrieve 2 failed\n`;

if (options.getBool("help") || options.getBool("h"))
   cout `Bool retrieve 3 failed\n`;

// Short options
if (options.getFloat("o") != 20.0)
   cout `Float retrieve of option 'o' failed\n`;

cout `ok\n`;
