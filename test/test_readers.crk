# Copyright 2011 Google Inc.
# Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
# 
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
# 
# test of readers

import crack.runtime random;
import crack.lang AppendBuffer, Buffer;
import crack.io cout, StringReader, StringWriter;
import crack.io.readers FullReader, LineReader, PageBufferReader, 
    PageBufferString;

@import crack.ann assert;

# Construct a string writer full of random data
arr := array[int32](10000);
for (int i = 0; i < 10000; ++i)
    arr[i] = int32(random());
String data = {byteptr(arr), 40000, true};


if (1) {
    StringReader low = {data};
    result := FullReader(low).readAll();
    if (result != data)
        cout `FAILED FullReader simple readAll()\n`;
}

if (1) {
    StringReader low = {data};
    full := FullReader(low);
    if (full.readLine() + full.readAll() != data)
        cout `FAILED FullReader line read + reaAll()\n`;
}

# iterate over a bunch of lines.
if (1) {
    # length of this line is prime, it should at least be odd (and thus 
    # relatively prime to 1024)
    sampleLine := 'all work and no play makes jack a dull boy\n';
    StringWriter temp = {};
    for (int i = 0; i < 10000; ++i)
        temp.write(sampleLine);
    
    StringReader low = {temp.string()};
    full := FullReader(StringReader(temp.string()));
    count := 0;
    for (line :in full) {
        if (line != sampleLine)
            cout `FAILED line iteration, bad line $count: $line\n`;
        ++count;
    }
    if (count != 10000)
        cout `FAILED line iteration: bad line count $count != 10000\n`;
}

if (1) {
    xmlString:='
<?xml version="1.0" encoding="UTF-8"?>
<CodeLite Revision="3833" Version="2.0.2">
  <!-- This is a comment -->
  <ArchiveObject Name="highlight_word">
    <long Value="1" Name="m_value">
      09384032023
    </long>
    <bool Value="True" Name="b_value"/>
    <float Value="45.67892" Name="f_value"/>
  </ArchiveObject>
</CodeLite>';

    uint ps = 20; // page size
    StringReader temp = { xmlString };
    PageBufferReader p = {temp, ps};
    AppendBuffer result = { xmlString.size };

    for (uint i=0; i<p.size || !p.eof; i++)
        result.append(p[i]);
    s1 := p.substr(0, ps);
    s2 := p.substr(ps/2, ps);
    s3 := p.substr(ps/2, 3*ps);

    p.vacuum(p.size);
    if (result != Buffer.cast(xmlString))
        cout `PageBufferReader returned invalid result\n`;

    PageBufferString s = {xmlString};
    result.size = 0; // reset the result buffer

    for (uint i=0; i<s.size || !s.eof; i++)
        result.append(s[i]);
    if (result != Buffer.cast(xmlString))
        cout `PageBufferString returned invalid result\n`;

}

if (true) {
    # Construct some long lines that won't fall on buffer boundaries.  We 
    # choose data such that a single line read will result in two buffer 
    # fetches and the remaining normal reads will include at least one partial 
    # fetch from LineReader's internal buffer and also a couple of pass 
    # through reads.
    longLine := String(1574, b'x') + '\n';
    data := StringReader(longLine * 3);
    
    src := LineReader(data);
    
    # This test assumes a buffer capacity of 1024.
    @assert(src.buffer.cap == 1024);
    
    # Read the first line.
    @assert(src.readLine() == longLine);
    
    # Make sure that a normal read of the remaining contents yields what we 
    # expect.
    result := AppendBuffer(1575 * 2);
    while (buf := src.read(1575))
        result.extend(buf);
    @assert(result == longLine * 2);
}

cout `ok\n`;
