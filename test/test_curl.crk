// Test libCURL binding
// Copyright 2012 Google Inc.
// Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// 11/12/2012

import crack.runtime exit,strlen;
import crack.lang CString;
import crack.io cout, cerr, FStr;
import crack.lang Buffer;
import crack.cont.array Array;

import crack.ext._curl
HTTPPOST_FILENAME, HTTPPOST_READFILE, HTTPPOST_PTRNAME, HTTPPOST_PTRCONTENTS,
HTTPPOST_BUFFER, HTTPPOST_PTRBUFFER, HTTPPOST_CALLBACK, CURLAUTH_NONE,
CURLAUTH_BASIC, CURLAUTH_DIGEST, CURLAUTH_GSSNEGOTIATE, CURLAUTH_NTLM,
CURLAUTH_DIGEST_IE, CURLAUTH_NTLM_WB, CURLAUTH_ONLY, CURLAUTH_ANY,
CURLAUTH_ANYSAFE, CURLSSH_AUTH_ANY, CURLSSH_AUTH_NONE, CURLSSH_AUTH_PUBLICKEY,
CURLSSH_AUTH_PASSWORD, CURLSSH_AUTH_HOST, CURLSSH_AUTH_KEYBOARD,
CURLSSH_AUTH_DEFAULT, CURLFILETYPE_FILE, CURLFILETYPE_DIRECTORY,
CURLFILETYPE_SYMLINK, CURLFILETYPE_DEVICE_BLOCK, CURLFILETYPE_DEVICE_CHAR,
CURLFILETYPE_NAMEDPIPE, CURLFILETYPE_SOCKET, CURLFILETYPE_DOOR,
CURLFILETYPE_UNKNOWN, CURLSOCKTYPE_IPCXN, CURL_MAX_WRITE_SIZE,
CURL_MAX_HTTP_HEADER, CURL_WRITEFUNC_PAUSE, CURLFINFOFLAG_KNOWN_FILENAME,
CURLFINFOFLAG_KNOWN_FILETYPE, CURLFINFOFLAG_KNOWN_TIME,
CURLFINFOFLAG_KNOWN_PERM, CURLFINFOFLAG_KNOWN_UID, CURLFINFOFLAG_KNOWN_GID,
CURLFINFOFLAG_KNOWN_SIZE, CURLFINFOFLAG_KNOWN_HLINKCOUNT,
CURL_CHUNK_BGN_FUNC_OK, CURL_CHUNK_BGN_FUNC_FAIL, CURL_CHUNK_BGN_FUNC_SKIP,
CURL_CHUNK_END_FUNC_OK, CURL_CHUNK_END_FUNC_FAIL, CURL_FNMATCHFUNC_MATCH,
CURL_FNMATCHFUNC_NOMATCH, CURL_FNMATCHFUNC_FAIL, CURL_SEEKFUNC_OK,
CURL_SEEKFUNC_FAIL, CURL_SEEKFUNC_CANTSEEK, CURL_READFUNC_ABORT,
CURL_READFUNC_PAUSE, CURLIOE_OK, CURLIOE_UNKNOWNCMD, CURLIOE_FAILRESTART,
CURLIOE_LAST, CURLIOCMD_NOP, CURLIOCMD_RESTARTREAD, CURLINFO_TEXT,
CURLINFO_HEADER_IN, CURLINFO_HEADER_OUT, CURLINFO_DATA_IN, CURLINFO_DATA_OUT,
CURLINFO_SSL_DATA_IN, CURLINFO_SSL_DATA_OUT, CURLINFO_END, CURLE_OK,
CURLE_UNSUPPORTED_PROTOCOL, CURLE_FAILED_INIT, CURLE_URL_MALFORMAT,
CURLE_NOT_BUILT_IN, CURLE_COULDNT_RESOLVE_PROXY, CURLE_COULDNT_RESOLVE_HOST,
CURLE_COULDNT_CONNECT, CURLE_FTP_WEIRD_SERVER_REPLY,
CURLE_REMOTE_ACCESS_DENIED, CURLE_FTP_WEIRD_PASS_REPLY,
CURLE_FTP_WEIRD_PASV_REPLY, CURLE_FTP_WEIRD_227_FORMAT,
CURLE_FTP_CANT_GET_HOST, CURLE_FTP_COULDNT_SET_TYPE, CURLE_PARTIAL_FILE,
CURLE_FTP_COULDNT_RETR_FILE, CURLE_QUOTE_ERROR, CURLE_HTTP_RETURNED_ERROR,
CURLE_WRITE_ERROR, CURLE_UPLOAD_FAILED, CURLE_READ_ERROR, CURLE_OUT_OF_MEMORY,
CURLE_OPERATION_TIMEDOUT, CURLE_FTP_PORT_FAILED, CURLE_FTP_COULDNT_USE_REST,
CURLE_RANGE_ERROR, CURLE_HTTP_POST_ERROR, CURLE_SSL_CONNECT_ERROR,
CURLE_BAD_DOWNLOAD_RESUME, CURLE_FILE_COULDNT_READ_FILE,
CURLE_LDAP_CANNOT_BIND, CURLE_LDAP_SEARCH_FAILED, CURLE_FUNCTION_NOT_FOUND,
CURLE_ABORTED_BY_CALLBACK, CURLE_BAD_FUNCTION_ARGUMENT,
CURLE_INTERFACE_FAILED, CURLE_TOO_MANY_REDIRECTS, CURLE_UNKNOWN_OPTION,
CURLE_TELNET_OPTION_SYNTAX, CURLE_PEER_FAILED_VERIFICATION, CURLE_GOT_NOTHING,
CURLE_SSL_ENGINE_NOTFOUND, CURLE_SSL_ENGINE_SETFAILED, CURLE_SEND_ERROR,
CURLE_RECV_ERROR, CURLE_SSL_CERTPROBLEM, CURLE_SSL_CIPHER, CURLE_SSL_CACERT,
CURLE_BAD_CONTENT_ENCODING, CURLE_LDAP_INVALID_URL, CURLE_FILESIZE_EXCEEDED,
CURLE_USE_SSL_FAILED, CURLE_SEND_FAIL_REWIND, CURLE_SSL_ENGINE_INITFAILED,
CURLE_LOGIN_DENIED, CURLE_TFTP_NOTFOUND, CURLE_TFTP_PERM,
CURLE_REMOTE_DISK_FULL, CURLE_TFTP_ILLEGAL, CURLE_TFTP_UNKNOWNID,
CURLE_REMOTE_FILE_EXISTS, CURLE_TFTP_NOSUCHUSER, CURLE_CONV_FAILED,
CURLE_CONV_REQD, CURLE_SSL_CACERT_BADFILE, CURLE_REMOTE_FILE_NOT_FOUND,
CURLE_SSH, CURLE_SSL_SHUTDOWN_FAILED, CURLE_AGAIN, CURLE_SSL_CRL_BADFILE,
CURLE_SSL_ISSUER_ERROR, CURLE_FTP_PRET_FAILED, CURLE_RTSP_CSEQ_ERROR,
CURLE_RTSP_SESSION_ERROR, CURLE_FTP_BAD_FILE_LIST, CURLE_CHUNK_FAILED,
CURLPROXY_HTTP, CURLPROXY_HTTP_1_0, CURLPROXY_SOCKS4, CURLPROXY_SOCKS5,
CURLPROXY_SOCKS4A, CURLPROXY_SOCKS5_HOSTNAME, CURLGSSAPI_DELEGATION_NONE,
CURLGSSAPI_DELEGATION_POLICY_FLAG, CURLGSSAPI_DELEGATION_FLAG,
CURL_ERROR_SIZE, CURLKHTYPE_UNKNOWN, CURLKHTYPE_RSA1, CURLKHTYPE_RSA,
CURLKHTYPE_DSS, CURLKHSTAT_FINE_ADD_TO_FILE, CURLKHSTAT_FINE,
CURLKHSTAT_REJECT, CURLKHSTAT_DEFER, CURLKHSTAT_LAST, CURLKHMATCH_OK,
CURLKHMATCH_MISMATCH, CURLKHMATCH_MISSING, CURLUSESSL_NONE, CURLUSESSL_TRY,
CURLUSESSL_CONTROL, CURLUSESSL_ALL, CURLUSESSL_LAST, CURLFTPSSL_CCC_NONE,
CURLFTPSSL_CCC_PASSIVE, CURLFTPSSL_CCC_ACTIVE, CURLFTPAUTH_DEFAULT,
CURLFTPAUTH_SSL, CURLFTPAUTH_TLS, CURLFTPAUTH_LAST, CURLFTP_CREATE_DIR_NONE,
CURLFTP_CREATE_DIR, CURLFTP_CREATE_DIR_RETRY, CURLFTPMETHOD_DEFAULT,
CURLFTPMETHOD_MULTICWD, CURLFTPMETHOD_NOCWD, CURLFTPMETHOD_SINGLECWD,
CURLPROTO_HTTP, CURLPROTO_HTTPS, CURLPROTO_FTP, CURLPROTO_FTPS, CURLPROTO_SCP,
CURLPROTO_SFTP, CURLPROTO_TELNET, CURLPROTO_LDAP, CURLPROTO_LDAPS,
CURLPROTO_DICT, CURLPROTO_FILE, CURLPROTO_TFTP, CURLPROTO_IMAP,
CURLPROTO_IMAPS, CURLPROTO_POP3, CURLPROTO_POP3S, CURLPROTO_SMTP,
CURLPROTO_SMTPS, CURLPROTO_RTSP, CURLPROTO_RTMP, CURLPROTO_RTMPT,
CURLPROTO_RTMPE, CURLPROTO_RTMPTE, CURLPROTO_RTMPS, CURLPROTO_RTMPTS,
CURLPROTO_GOPHER, CURLPROTO_ALL, CURLOPTTYPE_LONG, CURLOPTTYPE_OBJECTPOINT,
CURLOPTTYPE_FUNCTIONPOINT, CURLOPTTYPE_OFF_T, CURLOPT_FILE, CURLOPT_URL,
CURLOPT_PORT, CURLOPT_PROXY, CURLOPT_USERPWD, CURLOPT_PROXYUSERPWD,
CURLOPT_RANGE, CURLOPT_INFILE, CURLOPT_ERRORBUFFER, CURLOPT_WRITEFUNCTION,
CURLOPT_READFUNCTION, CURLOPT_TIMEOUT, CURLOPT_INFILESIZE, CURLOPT_POSTFIELDS,
CURLOPT_REFERER, CURLOPT_FTPPORT, CURLOPT_USERAGENT,
CURLOPT_LOW_SPEED_LIMIT, CURLOPT_LOW_SPEED_TIME, CURLOPT_RESUME_FROM,
CURLOPT_COOKIE, CURLOPT_HTTPHEADER, CURLOPT_HTTPPOST, CURLOPT_SSLCERT,
CURLOPT_KEYPASSWD, CURLOPT_CRLF, CURLOPT_QUOTE, CURLOPT_WRITEHEADER,
CURLOPT_COOKIEFILE, CURLOPT_SSLVERSION, CURLOPT_TIMECONDITION,
CURLOPT_TIMEVALUE, CURLOPT_CUSTOMREQUEST, CURLOPT_STDERR, CURLOPT_POSTQUOTE,
CURLOPT_VERBOSE, CURLOPT_HEADER, CURLOPT_NOPROGRESS, CURLOPT_NOBODY,
CURLOPT_FAILONERROR, CURLOPT_UPLOAD, CURLOPT_POST, CURLOPT_DIRLISTONLY,
CURLOPT_APPEND, CURLOPT_NETRC, CURLOPT_FOLLOWLOCATION, CURLOPT_TRANSFERTEXT,
CURLOPT_PUT, CURLOPT_PROGRESSFUNCTION, CURLOPT_PROGRESSDATA,
CURLOPT_AUTOREFERER, CURLOPT_PROXYPORT, CURLOPT_POSTFIELDSIZE,
CURLOPT_HTTPPROXYTUNNEL, CURLOPT_INTERFACE, CURLOPT_KRBLEVEL,
CURLOPT_SSL_VERIFYPEER, CURLOPT_CAINFO, CURLOPT_MAXREDIRS, CURLOPT_FILETIME,
CURLOPT_TELNETOPTIONS, CURLOPT_MAXCONNECTS, CURLOPT_FRESH_CONNECT,
CURLOPT_FORBID_REUSE, CURLOPT_RANDOM_FILE, CURLOPT_EGDSOCKET,
CURLOPT_CONNECTTIMEOUT, CURLOPT_HEADERFUNCTION, CURLOPT_HTTPGET,
CURLOPT_SSL_VERIFYHOST, CURLOPT_COOKIEJAR, CURLOPT_SSL_CIPHER_LIST,
CURLOPT_HTTP_VERSION, CURLOPT_FTP_USE_EPSV, CURLOPT_SSLCERTTYPE,
CURLOPT_SSLKEY, CURLOPT_SSLKEYTYPE, CURLOPT_SSLENGINE,
CURLOPT_SSLENGINE_DEFAULT, CURLOPT_DNS_CACHE_TIMEOUT, CURLOPT_PREQUOTE,
CURLOPT_DEBUGFUNCTION, CURLOPT_DEBUGDATA, CURLOPT_COOKIESESSION,
CURLOPT_CAPATH, CURLOPT_BUFFERSIZE, CURLOPT_NOSIGNAL, CURLOPT_SHARE,
CURLOPT_PROXYTYPE, CURLOPT_ACCEPT_ENCODING, CURLOPT_PRIVATE,
CURLOPT_HTTP200ALIASES, CURLOPT_UNRESTRICTED_AUTH, CURLOPT_FTP_USE_EPRT,
CURLOPT_HTTPAUTH, CURLOPT_SSL_CTX_FUNCTION, CURLOPT_SSL_CTX_DATA,
CURLOPT_FTP_CREATE_MISSING_DIRS, CURLOPT_PROXYAUTH,
CURLOPT_FTP_RESPONSE_TIMEOUT, CURLOPT_SERVER_RESPONSE_TIMEOUT,
CURLOPT_IPRESOLVE, CURLOPT_MAXFILESIZE, CURLOPT_INFILESIZE_LARGE,
CURLOPT_RESUME_FROM_LARGE, CURLOPT_MAXFILESIZE_LARGE, CURLOPT_NETRC_FILE,
CURLOPT_USE_SSL, CURLOPT_POSTFIELDSIZE_LARGE, CURLOPT_TCP_NODELAY,
CURLOPT_FTPSSLAUTH, CURLOPT_IOCTLFUNCTION, CURLOPT_IOCTLDATA,
CURLOPT_FTP_ACCOUNT, CURLOPT_COOKIELIST, CURLOPT_IGNORE_CONTENT_LENGTH,
CURLOPT_FTP_SKIP_PASV_IP, CURLOPT_FTP_FILEMETHOD, CURLOPT_LOCALPORT,
CURLOPT_LOCALPORTRANGE, CURLOPT_CONNECT_ONLY,
CURLOPT_CONV_FROM_NETWORK_FUNCTION, CURLOPT_CONV_TO_NETWORK_FUNCTION,
CURLOPT_CONV_FROM_UTF8_FUNCTION, CURLOPT_MAX_SEND_SPEED_LARGE,
CURLOPT_MAX_RECV_SPEED_LARGE, CURLOPT_FTP_ALTERNATIVE_TO_USER,
CURLOPT_SOCKOPTFUNCTION, CURLOPT_SOCKOPTDATA, CURLOPT_SSL_SESSIONID_CACHE,
CURLOPT_SSH_AUTH_TYPES, CURLOPT_SSH_PUBLIC_KEYFILE,
CURLOPT_SSH_PRIVATE_KEYFILE, CURLOPT_FTP_SSL_CCC, CURLOPT_TIMEOUT_MS,
CURLOPT_CONNECTTIMEOUT_MS, CURLOPT_HTTP_TRANSFER_DECODING,
CURLOPT_HTTP_CONTENT_DECODING, CURLOPT_NEW_FILE_PERMS,
CURLOPT_NEW_DIRECTORY_PERMS, CURLOPT_POSTREDIR,
CURLOPT_SSH_HOST_PUBLIC_KEY_MD5, CURLOPT_OPENSOCKETFUNCTION,
CURLOPT_OPENSOCKETDATA, CURLOPT_COPYPOSTFIELDS, CURLOPT_PROXY_TRANSFER_MODE,
CURLOPT_SEEKFUNCTION, CURLOPT_SEEKDATA, CURLOPT_CRLFILE, CURLOPT_ISSUERCERT,
CURLOPT_ADDRESS_SCOPE, CURLOPT_CERTINFO, CURLOPT_USERNAME, CURLOPT_PASSWORD,
CURLOPT_PROXYUSERNAME, CURLOPT_PROXYPASSWORD, CURLOPT_NOPROXY,
CURLOPT_TFTP_BLKSIZE, CURLOPT_SOCKS5_GSSAPI_SERVICE,
CURLOPT_SOCKS5_GSSAPI_NEC, CURLOPT_PROTOCOLS, CURLOPT_REDIR_PROTOCOLS,
CURLOPT_SSH_KNOWNHOSTS, CURLOPT_SSH_KEYFUNCTION, CURLOPT_SSH_KEYDATA,
CURLOPT_MAIL_FROM, CURLOPT_MAIL_RCPT, CURLOPT_FTP_USE_PRET,
CURLOPT_RTSP_REQUEST, CURLOPT_RTSP_SESSION_ID, CURLOPT_RTSP_STREAM_URI,
CURLOPT_RTSP_TRANSPORT, CURLOPT_RTSP_CLIENT_CSEQ, CURLOPT_RTSP_SERVER_CSEQ,
CURLOPT_INTERLEAVEDATA, CURLOPT_INTERLEAVEFUNCTION, CURLOPT_WILDCARDMATCH,
CURLOPT_CHUNK_BGN_FUNCTION, CURLOPT_CHUNK_END_FUNCTION,
CURLOPT_FNMATCH_FUNCTION, CURLOPT_CHUNK_DATA, CURLOPT_FNMATCH_DATA,
CURLOPT_RESOLVE, CURLOPT_TLSAUTH_USERNAME, CURLOPT_TLSAUTH_PASSWORD,
CURLOPT_TLSAUTH_TYPE, CURLOPT_TRANSFER_ENCODING, CURLOPT_CLOSESOCKETFUNCTION,
CURLOPT_CLOSESOCKETDATA, CURLOPT_GSSAPI_DELEGATION, CURL_IPRESOLVE_WHATEVER,
CURL_IPRESOLVE_V4, CURL_IPRESOLVE_V6, CURLOPT_WRITEDATA, CURLOPT_READDATA,
CURLOPT_HEADERDATA, CURLOPT_RTSPHEADER, CURL_HTTP_VERSION_NONE,
CURL_HTTP_VERSION_1_0, CURL_HTTP_VERSION_1_1, CURL_RTSPREQ_NONE,
CURL_RTSPREQ_OPTIONS, CURL_RTSPREQ_DESCRIBE, CURL_RTSPREQ_ANNOUNCE,
CURL_RTSPREQ_SETUP, CURL_RTSPREQ_PLAY, CURL_RTSPREQ_PAUSE,
CURL_RTSPREQ_TEARDOWN, CURL_RTSPREQ_GET_PARAMETER, CURL_RTSPREQ_SET_PARAMETER,
CURL_RTSPREQ_RECORD, CURL_RTSPREQ_RECEIVE, CURL_RTSPREQ_LAST,
CURL_NETRC_IGNORED, CURL_NETRC_OPTIONAL, CURL_NETRC_REQUIRED,
CURL_SSLVERSION_DEFAULT, CURL_SSLVERSION_TLSv1, CURL_SSLVERSION_SSLv2,
CURL_SSLVERSION_SSLv3, CURL_TLSAUTH_NONE, CURL_TLSAUTH_SRP,
CURL_REDIR_GET_ALL, CURL_REDIR_POST_301, CURL_REDIR_POST_302,
CURL_REDIR_POST_ALL, CURL_TIMECOND_NONE, CURL_TIMECOND_IFMODSINCE,
CURL_TIMECOND_IFUNMODSINCE, CURL_TIMECOND_LASTMOD, CURLFORM_COPYNAME,
CURLFORM_PTRNAME, CURLFORM_NAMELENGTH, CURLFORM_COPYCONTENTS,
CURLFORM_PTRCONTENTS, CURLFORM_CONTENTSLENGTH, CURLFORM_FILECONTENT,
CURLFORM_ARRAY, CURLFORM_OBSOLETE, CURLFORM_FILE, CURLFORM_BUFFER,
CURLFORM_BUFFERPTR, CURLFORM_BUFFERLENGTH, CURLFORM_CONTENTTYPE,
CURLFORM_CONTENTHEADER, CURLFORM_FILENAME, CURLFORM_END, CURLFORM_STREAM,
CURL_FORMADD_OK, CURL_FORMADD_MEMORY, CURL_FORMADD_OPTION_TWICE,
CURL_FORMADD_NULL, CURL_FORMADD_UNKNOWN_OPTION, CURL_FORMADD_INCOMPLETE,
CURL_FORMADD_ILLEGAL_ARRAY, CURL_FORMADD_DISABLED, CURLINFO_STRING,
CURLINFO_LONG, CURLINFO_DOUBLE, CURLINFO_SLIST, CURLINFO_MASK,
CURLINFO_TYPEMASK, CURLINFO_EFFECTIVE_URL, CURLINFO_RESPONSE_CODE,
CURLINFO_TOTAL_TIME, CURLINFO_NAMELOOKUP_TIME, CURLINFO_CONNECT_TIME,
CURLINFO_PRETRANSFER_TIME, CURLINFO_SIZE_UPLOAD, CURLINFO_SIZE_DOWNLOAD,
CURLINFO_SPEED_DOWNLOAD, CURLINFO_SPEED_UPLOAD, CURLINFO_HEADER_SIZE,
CURLINFO_REQUEST_SIZE, CURLINFO_SSL_VERIFYRESULT, CURLINFO_FILETIME,
CURLINFO_CONTENT_LENGTH_DOWNLOAD, CURLINFO_CONTENT_LENGTH_UPLOAD,
CURLINFO_STARTTRANSFER_TIME, CURLINFO_CONTENT_TYPE, CURLINFO_REDIRECT_TIME,
CURLINFO_REDIRECT_COUNT, CURLINFO_PRIVATE, CURLINFO_HTTP_CONNECTCODE,
CURLINFO_HTTPAUTH_AVAIL, CURLINFO_PROXYAUTH_AVAIL, CURLINFO_OS_ERRNO,
CURLINFO_NUM_CONNECTS, CURLINFO_SSL_ENGINES, CURLINFO_COOKIELIST,
CURLINFO_LASTSOCKET, CURLINFO_FTP_ENTRY_PATH, CURLINFO_REDIRECT_URL,
CURLINFO_PRIMARY_IP, CURLINFO_APPCONNECT_TIME, CURLINFO_CERTINFO,
CURLINFO_CONDITION_UNMET, CURLINFO_RTSP_SESSION_ID, CURLINFO_RTSP_CLIENT_CSEQ,
CURLINFO_RTSP_SERVER_CSEQ, CURLINFO_RTSP_CSEQ_RECV, CURLINFO_PRIMARY_PORT,
CURLINFO_LOCAL_IP, CURLINFO_LOCAL_PORT, CURLCLOSEPOLICY_OLDEST,
CURLCLOSEPOLICY_LEAST_RECENTLY_USED, CURLCLOSEPOLICY_LEAST_TRAFFIC,
CURLCLOSEPOLICY_SLOWEST, CURLCLOSEPOLICY_CALLBACK, CURL_GLOBAL_SSL,
CURL_GLOBAL_WIN32, CURL_GLOBAL_ALL, CURL_GLOBAL_NOTHING, CURL_LOCK_DATA_NONE,
CURL_LOCK_DATA_SHARE, CURL_LOCK_DATA_COOKIE, CURL_LOCK_DATA_DNS,
CURL_LOCK_DATA_SSL_SESSION, CURL_LOCK_DATA_CONNECT, CURL_LOCK_ACCESS_NONE,
CURL_LOCK_ACCESS_SHARED, CURL_LOCK_ACCESS_SINGLE, CURLVERSION_FIRST,
CURLVERSION_SECOND, CURLVERSION_THIRD, CURLVERSION_FOURTH, CURL_VERSION_IPV6,
CURL_VERSION_KERBEROS4, CURL_VERSION_SSL, CURL_VERSION_LIBZ,
CURL_VERSION_NTLM, CURL_VERSION_GSSNEGOTIATE, CURL_VERSION_DEBUG,
CURL_VERSION_ASYNCHDNS, CURL_VERSION_SPNEGO, CURL_VERSION_LARGEFILE,
CURL_VERSION_IDN, CURL_VERSION_SSPI, CURL_VERSION_CONV,
CURL_VERSION_CURLDEBUG, CURL_VERSION_TLSAUTH_SRP, CURL_VERSION_NTLM_WB,
CURLPAUSE_RECV, CURLPAUSE_RECV_CONT, CURLPAUSE_SEND, CURLPAUSE_SEND_CONT,
CURLPAUSE_ALL, CURLPAUSE_CONT,


// Types
CURL, CURLinfo,
slist,

// Function names
curl_version,
easy_init,
easy_cleanup,
curl_escape,
curl_unescape,
curl_free,
easy_setopt_long,
easy_setopt_ptr,
easy_setopt_offset,
easy_perform,

easy_info_get_long,
easy_info_get_double,
easy_info_get_ptr,
easy_info_get_slist,
easy_strerror,
easy_pause,
slist_cast,
slist_free_all;
import crack.net.curl FormData, urlDecode, urlEncode;

errStr := FStr();

void exitError(String msg) {
    cerr `ERROR: $(msg)\n`;
    exit(1);
}

int progress_callback(CURL handle, float64 dltotal, float64 dlnow, float64 ultotal,
                      float64 ulnow) {
    cout `$dltotal, $dlnow, $ultotal, $ulnow\n`;
    return 0;
}



curl := easy_init();

// Test roundtrip url-escaping strings -----------------------------------------
args := "A broken (*&*^&* string";
escaped_args := CString(curl_escape(args.buffer, args.size), false);
unescaped_args := CString(curl_unescape(escaped_args.buffer, escaped_args.size),
                          false
                          );

if (unescaped_args != args)
    exitError(errStr I`Problem url-escaping string:\n'$args' -> \
                       '$escaped_args' -> '$unescaped_args'\n`);

escaped := urlEncode(args);
unescaped := urlDecode(escaped);
if (args != unescaped)
    exitError(errStr I`Problem with urlEncode/Decode string:\n'$args' -> \
                       '$escaped' -> '$unescaped'\n`);

// Test linked list ------------------------------------------------------------

class sList {
    slist head, tail;
    oper init(slist base) : head = base, tail=head {}
    oper init(Buffer d) : head = slist(d.buffer), tail=head {}

    void append(Buffer d) {
        tail = tail.append(d.buffer);
    }
}


list := sList("first");
list.append("second");
list.append("third");

cout `Test curl_slist\n`;
for (l := list.head; l !is null; l = l.next)
    cout `data: $(l.data)\n`;


// Test program from http://curl.haxx.se/libcurl/c/simple.html -----------------
url := "http://www.iana.org/domains/reserved";
easy_setopt_ptr(curl, CURLOPT_URL, url.buffer);
cout I`setopt noprogress = $(easy_setopt_long(curl, CURLOPT_NOPROGRESS,
       int64(0)))\n`;
cout I`setopt callback = $(easy_setopt_ptr(curl, CURLOPT_PROGRESSFUNCTION,
       progress_callback))\n`;
res := easy_perform(curl);

if (res != CURLE_OK) {
    errMsg := CString(easy_strerror(res), false);
    exitError(errStr `Downloading $url failed:  $errMsg\n`);
}

info := CURLinfo(CURLINFO_EFFECTIVE_URL);

Array[String] STRING_TEST_NAMES = ["CURLINFO_EFFECTIVE_URL",
                                   "CURLINFO_REDIRECT_URL"];
Array[int] STRING_TEST_CODES = [CURLINFO_EFFECTIVE_URL,
                                CURLINFO_REDIRECT_URL];

Array[String] LONG_TEST_NAMES = ["CURLINFO_RESPONSE_CODE"];
Array[int]LONG_TEST_CODES = [CURLINFO_RESPONSE_CODE];

Array[String] DOUBLE_TEST_NAMES = ["CURLINFO_TOTAL_TIME",
                                   "CURLINFO_NAMELOOKUP_TIME",
                                   "CURLINFO_CONNECT_TIME"];
Array[int] DOUBLE_TEST_CODES = [CURLINFO_TOTAL_TIME,
                                CURLINFO_NAMELOOKUP_TIME,
                                CURLINFO_CONNECT_TIME];

cout `Strings: $("-"*70)\n`;

for (int i=0; i< STRING_TEST_NAMES.count(); i++) {
    info.info=STRING_TEST_CODES[i];
    res = easy_info_get_ptr(curl, info);
    if (res != CURLE_OK) {
        errMsg := CString(easy_strerror(res), false);
        exitError(errStr `Getting $(STRING_TEST_NAMES[i]) failed:  $errMsg\n`);
    }
    if (info.resultPtr !is null)
        cout I`$(STRING_TEST_NAMES[i]) = $(CString(byteptr(info.resultPtr),
               false))\n`;

}

cout `Longs: $("-"*72)\n`;
for (int i=0; i< LONG_TEST_NAMES.count(); i++) {
    info.info=LONG_TEST_CODES[i];
    res = easy_info_get_long(curl, info);
    if (res != CURLE_OK) {
        errMsg := CString(easy_strerror(res), false);
        exitError(errStr `Getting $(LONG_TEST_NAMES[i]) failed:  $errMsg\n`);
    }
    cout `$(LONG_TEST_NAMES[i]) = $(info.resultLong)\n`;
}

cout `Doubles: $("-"*70)\n`;
for (int i=0; i< DOUBLE_TEST_NAMES.count(); i++) {
    info.info=DOUBLE_TEST_CODES[i];
    res = easy_info_get_double(curl, info);
    if (res != CURLE_OK) {
        errMsg := CString(easy_strerror(res), false);
        exitError(errStr `Getting $(DOUBLE_TEST_NAMES[i]) failed:  $errMsg\n`);
    }
    cout `$(DOUBLE_TEST_NAMES[i]) = $(info.resultDouble)\n`;
}



// Clean up
easy_cleanup(curl);

// Test form data creation/parsing

form := FormData();
form["test"] = "simple";
form["messy"] = args; // see above
encoded := "test=simple&messy=A%20broken%20%28%2A%26%2A%5E%26%2A%20string";

if (form.encoded() != encoded) {
    cout `Error encoding form data\n`;
    exit(1);
}

form2 := FormData(encoded);
if (form2["test"] != "simple" || form2["messy"] != args) {
    cout `Error decoding form data:\n$form2\n`;
    exit(1);
}

cout `ok\n`;
