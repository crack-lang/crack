// Copyright 2010-2011 Google Inc.
// Copyright 2010 Shannon Weyrick <weyrick@mozek.us>
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

import crack.runtime memcmp;
void foo(int16 val) { puts('failed, matched int16 func'); }
void foo(int32 val) { puts('failed, matched int32 func'); }
void foo(int64 val) {
    if (val != 1234567890123 || val < 2147483647)
        puts('failed, incorrect value passed');
}

foo(1234567890123);

i64 := int64(-4);
if (i64 != -4)
    puts('failed negative conversion to int64');

// simple hex
i := 0xa;
if (i != 10)
    puts("failed");
i = +0xf;
if (i != 15)
    puts("failed");
i = -0xff;
if (i != -255)
    puts("failed");

// simple octal
o := 07;
if (o != 7)
    puts("failed");
o = -05;
if (o != -5)
    puts("failed");
o = 0777;
if (o != 511)
    puts("failed");

u := uint64(-1);
UINT64_MAX :=  (uint64(9223372036854775807) << 1) | 1;
if (u != UINT64_MAX)
    puts('failed negative conversion to uint64');

b := byte(-1);
if (b != 255)
    puts('failed negative conversion to byte');

// min, max, overflow tests
if ( (0xffffffff   != 4294967295) ||
     (037777777777 != 4294967295)
   )
   puts("fail");

if ( (+0xffffffff   != 4294967295) ||
     (+037777777777 != 4294967295)
   )
   puts("fail");

if ( (-0xffffffff   != -4294967295) ||
     (-037777777777 != -4294967295)
   )
   puts("fail");

if ( (0xffffffffffffffff      != 18446744073709551615) ||
     (01777777777777777777777 != 18446744073709551615)
   )
   puts("fail");

if ( (-0xffffffffffffffff      != -18446744073709551615) ||
     (-01777777777777777777777 != -18446744073709551615)
   )
   puts("fail");

# 0xb... numbers were problematic because they activated the hack we use to
# propagate byte constants.
if (0xb != 11)
    puts('failed to parse 0xb correctly');

// unsigned
// 32 max
uint32 ui1 = 0xffffffff;
if (ui1 != 4294967295)
   puts("fail");
// 64 max
uint64 ui2 = 0xffffffffffffffff;
if (ui2 == 9223372036854775807)
   puts("fail: unable to parse unsigned 64bit");
if (ui2 != 18446744073709551615)
   puts("fail");

// signed
// 32 max
int32 i1 = 0x7fffffff;
if (i1 != 2147483647)
   puts("fail");
// 32 overflow
i1++;
if (i1 != -2147483648)
   puts("fail");
// 32 min
i1 = -0x80000000;
if (i1 != -2147483648)
   puts("fail");
// 32 underflow
i1--;
if (i1 != 2147483647)
   puts("fail");

// 64 max
int64 i2 = 0x7FFFFFFFFFFFFFFF;
if (i2 != 9223372036854775807)
   puts("fail1");
// 64 overflow
i2++;
if (i2 != -9223372036854775808)
   puts("fail2: ");

// 64 min
i2 = -0x8000000000000000;
if (i2 != -9223372036854775808)
   puts("fail3");
// 64 underflow
i2--;
if (i2 != 9223372036854775807)
   puts("fail4");

if (b'A' != 65)
    puts('FAILED byte constants');

if (i'\001\0' != 256 || i"SpugCrak" != 6012434588913262955)
    puts('FAILED integer string constants');

// raw string constants
if (memcmp(r'test\string', 'test\\string', 12))
    puts('FAILED raw strings, simple backslash');

if (memcmp(r'test\'value', 'test\\\'value', 12))
    puts('FAILED raw strings with escaped terminators');

puts('ok');
