@import crack.extgen generateExtension;

@generateExtension crack.ext._ssl {
    @filename 'opt/_ssl.cc'
    @crack_internal

    @inject '#include <openssl/ssl.h>\n'
    @inject '#include <openssl/evp.h>\n'
    @inject '#include <openssl/cmac.h>\n'
    @inject '

#include <iostream>
using namespace std;

SSL *my_SSL_new(SSL_CTX *ctx) {
    SSL *result = SSL_new(ctx);
    if (!result)
        cerr << "error is " << SSL_get_error(result, 0) <<
            " context is " << ctx << endl;
    cerr << "my ssl = " << result << endl;
    return result;
}

void my_BIO_set_blocking(BIO *bio, int blocking) {
    BIO_set_nbio(bio, !blocking);
}

void my_SSL_set_accept_state(SSL *ssl) {
    cerr << "setting accept state on " << ssl << endl;
    SSL_set_accept_state(ssl);
}

int my_EVP_CIPHER_iv_length(EVP_CIPHER *cipher) {
    return EVP_CIPHER_iv_length(cipher);
}

int my_EVP_CIPHER_key_length(EVP_CIPHER *cipher) {
    return EVP_CIPHER_key_length(cipher);
}

int my_EVP_CIPHER_block_size(EVP_CIPHER *cipher) {
    return EVP_CIPHER_block_size(cipher);
}

int my_EVP_CIPHER_mode(EVP_CIPHER *cipher) {
    return EVP_CIPHER_mode(cipher);
}

int my_EVP_CIPHER_flags(EVP_CIPHER *cipher) {
    return EVP_CIPHER_flags(cipher);
}

// Definining this here.
struct engine_st {};

// Undefined type for CRACK_CTX.
struct Undef {};
';

    const int SSL_FILETYPE_PEM,
              SSL_ERROR_NONE,
              SSL_ERROR_ZERO_RETURN,
              SSL_ERROR_WANT_READ,
              SSL_ERROR_WANT_WRITE,
              SSL_ERROR_WANT_CONNECT,
              SSL_ERROR_WANT_ACCEPT,
              SSL_ERROR_WANT_X509_LOOKUP,
              SSL_ERROR_SYSCALL,
              SSL_ERROR_SSL;

    class BIO_METHOD;
    BIO_METHOD BIO_s_mem();

    class BIO {

        @cname BIO_read
        int read(byteptr buffer, int len);

        @cname BIO_write
        int write(byteptr buffer, int len);

#        @cname BIO_new
#        oper new(BIO_METHOD method);

        @cname BIO_free
        void free(BIO bio);

        @cname BIO_ctrl_pending
        int ctrlPending();

        @cname my_BIO_set_blocking
        void setBlocking(bool blocking);

    }

    BIO BIO_new(BIO_METHOD method);

    class SSL_METHOD;
    SSL_METHOD SSLv23_method();

    void SSL_library_init();

    class SSL_CTX {

#        @cname SSL_CTX_new
#        oper new(SSL_METHOD method);

        @cname SSL_CTX_free
        void free();

        @cname SSL_CTX_use_certificate_file
        int useCertificateFile(byteptr filename, int type);

        @cname SSL_CTX_use_PrivateKey_file
        int usePrivateKeyFile(byteptr file, int type);
    }

    SSL_CTX SSL_CTX_new(SSL_METHOD method);

    class SSL {

#        @cname SSL_new
#        oper new(SSL_CTX ctx);

        @cname SSL_free
        void free();

        @cname SSL_set_bio
        void setBIO(BIO rbio, BIO wbio);

        @cname SSL_set_accept_state
        void setAcceptState();

        @cname SSL_set_connect_state
        void setConnectState();

        @cname SSL_accept
        int accept();

        @cname SSL_connect
        int connect();

        @cname SSL_shutdown
        int shutdown();

        @cname SSL_write
        int write(byteptr buf, int size);

        @cname SSL_read
        int read(byteptr buf, int cap);

        @cname SSL_get_error
        int getError(int ret);
    }

    SSL SSL_new(SSL_CTX ctx);

    # The high-level EVP functions.  These can do pretty much all of the
    # encryption/decryption that we could want.

    @cname EVP_CIPHER
    class EVPCipher {

        ## This appears to produce the size of the IV vector in bytes.
        @cname my_EVP_CIPHER_iv_length
        int getIVLength();

        @cname my_EVP_CIPHER_key_length
        int getKeyLength();

        @cname my_EVP_CIPHER_block_size
        int getBlockSize();

        @cname my_EVP_CIPHER_mode
        int getMode();

        @cname my_EVP_CIPHER_flags
        int getFlags();
    }

    @cname ENGINE
    class Engine {}

    # The set of ciphers.  Groups of ciphers that are commented out were
    # unavailable on debian.
    EVPCipher EVP_enc_null();
    EVPCipher EVP_aes_128_cbc();
    EVPCipher EVP_aes_128_ecb();
    EVPCipher EVP_aes_128_cfb();
    EVPCipher EVP_aes_128_ofb();
    EVPCipher EVP_aes_128_ctr();

    EVPCipher EVP_aes_192_cbc();
    EVPCipher EVP_aes_192_ecb();
    EVPCipher EVP_aes_192_cfb();
    EVPCipher EVP_aes_192_ofb();
    EVPCipher EVP_aes_192_ctr();

    EVPCipher EVP_aes_256_cbc();
    EVPCipher EVP_aes_256_ecb();
    EVPCipher EVP_aes_256_cfb();
    EVPCipher EVP_aes_256_ofb();
    EVPCipher EVP_aes_256_ctr();

    EVPCipher EVP_des_cbc();
    EVPCipher EVP_des_ecb();
    EVPCipher EVP_des_cfb();
    EVPCipher EVP_des_ofb();

    EVPCipher EVP_des_ede_cbc();
    EVPCipher EVP_des_ede();
    EVPCipher EVP_des_ede_ofb();
    EVPCipher EVP_des_ede_cfb();

    EVPCipher EVP_des_ede3_cbc();
    EVPCipher EVP_des_ede3();
    EVPCipher EVP_des_ede3_ofb();
    EVPCipher EVP_des_ede3_cfb();

    EVPCipher EVP_desx_cbc();

    EVPCipher EVP_rc4();

    EVPCipher EVP_rc4_40();

/*
    EVPCipher EVP_idea_cbc();
    EVPCipher EVP_idea_ecb();
    EVPCipher EVP_idea_cfb();
    EVPCipher EVP_idea_ofb();
*/

    EVPCipher EVP_rc2_cbc();
    EVPCipher EVP_rc2_ecb();
    EVPCipher EVP_rc2_cfb();
    EVPCipher EVP_rc2_ofb();

    EVPCipher EVP_rc2_40_cbc();
    EVPCipher EVP_rc2_64_cbc();

    EVPCipher EVP_bf_cbc();
    EVPCipher EVP_bf_ecb();
    EVPCipher EVP_bf_cfb();
    EVPCipher EVP_bf_ofb();

    EVPCipher EVP_cast5_cbc();
    EVPCipher EVP_cast5_ecb();
    EVPCipher EVP_cast5_cfb();
    EVPCipher EVP_cast5_ofb();

/*
    EVPCipher EVP_rc5_32_12_16_cbc();
    EVPCipher EVP_rc5_32_12_16_ecb();
    EVPCipher EVP_rc5_32_12_16_cfb();
    EVPCipher EVP_rc5_32_12_16_ofb();
*/

    EVPCipher EVP_aes_128_gcm();
    EVPCipher EVP_aes_192_gcm();
    EVPCipher EVP_aes_256_gcm();

/*
    EVPCipher EVP_aes_128_ocb();
    EVPCipher EVP_aes_192_ocb();
    EVPCipher EVP_aes_256_ocb();
*/

    EVPCipher EVP_aes_128_ccm();
    EVPCipher EVP_aes_192_ccm();
    EVPCipher EVP_aes_256_ccm();

    # Cipher modes.

    const int EVP_CIPH_STREAM_CIPHER,
              EVP_CIPH_ECB_MODE,
              EVP_CIPH_CBC_MODE,
              EVP_CIPH_CFB_MODE,
              EVP_CIPH_OFB_MODE,
              EVP_CIPH_CTR_MODE,
              EVP_CIPH_GCM_MODE,
              EVP_CIPH_CCM_MODE,
              EVP_CIPH_XTS_MODE,
              EVP_CIPH_MODE,
              EVP_CIPH_VARIABLE_LENGTH,
              EVP_CIPH_CUSTOM_IV,
              EVP_CIPH_ALWAYS_CALL_INIT,
              EVP_CIPH_CTRL_INIT,
              EVP_CIPH_CUSTOM_KEY_LENGTH,
              EVP_CIPH_NO_PADDING,
              EVP_CIPH_RAND_KEY,
              EVP_CIPH_CUSTOM_COPY,
              EVP_CIPH_FLAG_DEFAULT_ASN1,
              EVP_CIPH_FLAG_LENGTH_BITS,
              EVP_CIPH_FLAG_FIPS,
              EVP_CIPH_FLAG_NON_FIPS_ALLOW,
              EVP_CIPH_FLAG_CUSTOM_CIPHER,
              EVP_CIPH_FLAG_AEAD_CIPHER,

              EVP_CTRL_INIT,
              EVP_CTRL_SET_KEY_LENGTH,
              EVP_CTRL_GET_RC2_KEY_BITS,
              EVP_CTRL_SET_RC2_KEY_BITS,
              EVP_CTRL_GET_RC5_ROUNDS,
              EVP_CTRL_SET_RC5_ROUNDS,
              EVP_CTRL_RAND_KEY,
              EVP_CTRL_PBE_PRF_NID,
              EVP_CTRL_COPY,
              EVP_CTRL_GCM_SET_IVLEN,
              EVP_CTRL_GCM_GET_TAG,
              EVP_CTRL_GCM_SET_TAG,
              EVP_CTRL_GCM_SET_IV_FIXED,
              EVP_CTRL_GCM_IV_GEN,
              EVP_CTRL_CCM_SET_IVLEN,
              EVP_CTRL_CCM_GET_TAG,
              EVP_CTRL_CCM_SET_TAG,
              EVP_CTRL_CCM_SET_L,
              EVP_CTRL_CCM_SET_MSGLEN,
              EVP_CTRL_AEAD_TLS1_AAD;

    @cname EVP_CIPHER_CTX
    class EVPCipherContext {
        @cname EVP_CIPHER_CTX_init
        oper init();

        @cname EVP_CIPHER_CTX_cleanup
        void cleanup();

        @cname EVP_EncryptInit_ex
        int encryptInit(EVPCipher type, Engine impl, byteptr key, byteptr iv);

        @cname EVP_EncryptUpdate
        int encryptUpdate(byteptr out, array[int] out1, byteptr inp,
                          int inp1);

        @cname EVP_EncryptFinal
        int encryptFinal(byteptr out, array[int] out1);

        @cname EVP_DecryptInit_ex
        int decryptInit(EVPCipher type, Engine impl, byteptr key, byteptr iv);

        @cname EVP_DecryptUpdate
        int decryptUpdate(byteptr out, array[int] out1, byteptr inp, int inp1);

        @cname EVP_DecryptFinal
        int decryptFinal(byteptr out, array[int] out1);
    }

    // CMAC.

    @cname Undef
    class CMACContext {

        @cname CMAC_CTX_new
        oper new();

        @cname CMAC_Init
        int init(byteptr key, uintz keylen, EVPCipher cipher, Engine impl);

        @cname CMAC_Update
        int update(byteptr data, uintz len);

        @cname CMAC_Final
        int final(byteptr out, array[int] outLen);

        @cname CMAC_CTX_free
        void free();
    }
}
