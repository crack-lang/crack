// Copyright 2014 Google Inc.
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//

@import crack.extgen generateExtension;

# build with:
#  ./crack -l lib opt/_pthread.crk && \
#  g++ -shared -o _pthread.so  _pthread.cc
@generateExtension crack.ext._pthread {
    @filename 'opt/_pthread.cc'
    @crack_internal

    @inject '#include <pthread.h>\n'
    @inject I'
        int crk_pthread_join(pthread_t *thread, void **retval) {
            return pthread_join(*thread, retval);
        }

        int crk_pthread_detach(pthread_t *thread, void **retval) {
            return pthread_detach(*thread);
        }
    ';

    class pthread_t;
    class pthread_attr_t;
    int pthread_create(pthread_t thread, pthread_attr_t attr,
                       function[void, voidptr] func,
                       voidptr arg
                       );

    @cname crk_pthread_join
    int pthread_join(pthread_t thread, array[voidptr] retval);

    @cname crk_pthread_detach
    int pthread_detach(pthread_t thread);

    class pthread_mutexattr_t;
    class pthread_mutex_t;
    int pthread_mutex_init(pthread_mutex_t mutex,
                           pthread_mutexattr_t attrs
                           );
    int pthread_mutex_destroy(pthread_mutex_t mutext);
    int pthread_mutex_lock(pthread_mutex_t mutex);
    int pthread_mutex_trylock(pthread_mutex_t mutex);
    int pthread_mutex_unlock(pthread_mutex_t mutex);

    class pthread_cond_t;
    class pthread_condattr_t;
    int pthread_cond_init(pthread_cond_t cond,
                          pthread_condattr_t attrs
                          );
    int pthread_cond_destroy(pthread_cond_t cond);
    int pthread_cond_signal(pthread_cond_t cond);
    int pthread_cond_broadcast(pthread_cond_t cond);
    int pthread_cond_wait(pthread_cond_t cond, pthread_mutex_t mutex);
}

