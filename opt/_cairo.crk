# Crack Cairo binding of cairo.h
# Adapted from SDL binding
# Copyright 2011 Google Inc.
# Copyright 2011-2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

@import crack.extgen generateExtension;

@generateExtension crack.ext._cairo {
   @filename 'opt/_cairo.cc'
   @dumpsymbols 'opt/_cairo.txt'
   @inject '#include <cairo/cairo.h>\n'
   @inject '#include <cairo/cairo-pdf.h>\n'
   @inject '#include <cairo/cairo-ps.h>\n'
   @inject '#include <cairo/cairo-svg.h>\n'
   @inject '#include <cairo/cairo-xlib.h>\n'
   @inject '#include <stdio.h>\n'

   @inject '#include <cairo/cairo-features.h>\n'
   @inject '#include <X11/Xlib.h>\n'
   @crack_internal

   # make sure defines for our constants exist
   @inject '#ifndef CAIRO_HAS_FC_FONT\n# define CAIRO_HAS_FC_FONT 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_FT_FONT\n# define CAIRO_HAS_FT_FONT 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_GOBJECT_FUNCTIONS\n# define CAIRO_HAS_GOBJECT_FUNCTIONS 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_IMAGE_SURFACE\n# define CAIRO_HAS_IMAGE_SURFACE 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_PDF_SURFACE\n# define CAIRO_HAS_PDF_SURFACE 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_PNG_FUNCTIONS\n# define CAIRO_HAS_PNG_FUNCTIONS 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_PS_SURFACE\n# define CAIRO_HAS_PS_SURFACE 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_RECORDING_SURFACE\n# define CAIRO_HAS_RECORDING_SURFACE 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_SVG_SURFACE\n# define CAIRO_HAS_SVG_SURFACE 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_USER_FONT\n# define CAIRO_HAS_USER_FONT 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_XCB_SHM_FUNCTIONS\n# define CAIRO_HAS_XCB_SHM_FUNCTIONS 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_XCB_SURFACE\n# define CAIRO_HAS_XCB_SURFACE 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_XLIB_SURFACE\n# define CAIRO_HAS_XLIB_SURFACE 0\n#endif\n\n'
   @inject '#ifndef CAIRO_HAS_XLIB_XRENDER_SURFACE\n# define CAIRO_HAS_XLIB_XRENDER_SURFACE 0\n#endif\n'

   // define int as an "undefined type" for use as the C-types
   @inject 'typedef int Undef;\n'

   @constclass(CAIRO, _)
   @boundclass(Rectangle, rectangle, cairo_rectangle, _, cairo_rectangle_t)
   @boundclass(RectangleList, rectangle_list, cairo_rectangle_list, _, cairo_rectangle_list_t)

   @boundclass(Matrix, matrix, cairo_matrix, _, cairo_matrix_t)
   @boundclass(Device, device, cairo_device, _, cairo_device_t)


   @boundclass(Surface, surface, cairo_surface, _, cairo_surface_t)
   @boundclass(Pattern, pattern, cairo_pattern, _, cairo_pattern_t)

   @boundclass(Cairo, cr, cairo, _, cairo_t)

   @boundclass(TextExtents, extents, cairo_text_extents, _, cairo_text_extents_t)
   @boundclass(FontExtents, extents, cairo_font_extents, _, cairo_font_extents_t)
   @boundclass(Region, region, cairo_region, _, cairo_region_t)
   @boundclass(FontOptions, font_options, cairo_font_options, _, cairo_font_options_t)
   @boundclass(FontFace, font_face, cairo_font_face, _, cairo_font_face_t)
   @boundclass(ScaledFont, scaled_font, cairo_scaled_font, _, cairo_scaled_font_t)
   @boundclass(Glyph, glyph, cairo_glyph, _, cairo_glyph_t)


   // Features
   const uint
      CAIRO_HAS_FC_FONT,
      CAIRO_HAS_FT_FONT,
      CAIRO_HAS_GOBJECT_FUNCTIONS,
      CAIRO_HAS_IMAGE_SURFACE,
      CAIRO_HAS_PDF_SURFACE,
      CAIRO_HAS_PNG_FUNCTIONS,
      CAIRO_HAS_PS_SURFACE,
      CAIRO_HAS_RECORDING_SURFACE,
      CAIRO_HAS_SVG_SURFACE,
      CAIRO_HAS_USER_FONT,
      CAIRO_HAS_XCB_SHM_FUNCTIONS,
      CAIRO_HAS_XCB_SURFACE,
      CAIRO_HAS_XLIB_SURFACE,
      CAIRO_HAS_XLIB_XRENDER_SURFACE;

   // Status constants
   const uint
      CAIRO_STATUS_SUCCESS,
      CAIRO_STATUS_NO_MEMORY,
      CAIRO_STATUS_INVALID_RESTORE,
      CAIRO_STATUS_INVALID_POP_GROUP,
      CAIRO_STATUS_NO_CURRENT_POINT,
      CAIRO_STATUS_INVALID_MATRIX,
      CAIRO_STATUS_INVALID_STATUS,
      CAIRO_STATUS_NULL_POINTER,
      CAIRO_STATUS_INVALID_STRING,
      CAIRO_STATUS_INVALID_PATH_DATA,
      CAIRO_STATUS_READ_ERROR,
      CAIRO_STATUS_WRITE_ERROR,
      CAIRO_STATUS_SURFACE_FINISHED,
      CAIRO_STATUS_SURFACE_TYPE_MISMATCH,
      CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
      CAIRO_STATUS_INVALID_CONTENT,
      CAIRO_STATUS_INVALID_FORMAT,
      CAIRO_STATUS_INVALID_VISUAL,
      CAIRO_STATUS_FILE_NOT_FOUND,
      CAIRO_STATUS_INVALID_DASH,
      CAIRO_STATUS_INVALID_DSC_COMMENT,
      CAIRO_STATUS_INVALID_INDEX,
      CAIRO_STATUS_CLIP_NOT_REPRESENTABLE,
      CAIRO_STATUS_TEMP_FILE_ERROR,
      CAIRO_STATUS_INVALID_STRIDE,
      CAIRO_STATUS_FONT_TYPE_MISMATCH,
      CAIRO_STATUS_USER_FONT_IMMUTABLE,
      CAIRO_STATUS_USER_FONT_ERROR,
      CAIRO_STATUS_NEGATIVE_COUNT,
      CAIRO_STATUS_INVALID_CLUSTERS,
      CAIRO_STATUS_INVALID_SLANT,
      CAIRO_STATUS_INVALID_WEIGHT,
      CAIRO_STATUS_INVALID_SIZE,
      CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED,
      CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
      CAIRO_STATUS_DEVICE_ERROR,
      CAIRO_STATUS_LAST_STATUS;

   // Content constants
   const uint
      CAIRO_CONTENT_COLOR,
      CAIRO_CONTENT_ALPHA,
      CAIRO_CONTENT_COLOR_ALPHA;

   // Operator constants
   const uint
      CAIRO_OPERATOR_CLEAR,

      CAIRO_OPERATOR_SOURCE,
      CAIRO_OPERATOR_OVER,
      CAIRO_OPERATOR_IN,
      CAIRO_OPERATOR_OUT,
      CAIRO_OPERATOR_ATOP,

      CAIRO_OPERATOR_DEST,
      CAIRO_OPERATOR_DEST_OVER,
      CAIRO_OPERATOR_DEST_IN,
      CAIRO_OPERATOR_DEST_OUT,
      CAIRO_OPERATOR_DEST_ATOP,

      CAIRO_OPERATOR_XOR,
      CAIRO_OPERATOR_ADD,
      CAIRO_OPERATOR_SATURATE,

      CAIRO_OPERATOR_MULTIPLY,
      CAIRO_OPERATOR_SCREEN,
      CAIRO_OPERATOR_OVERLAY,
      CAIRO_OPERATOR_DARKEN,
      CAIRO_OPERATOR_LIGHTEN,
      CAIRO_OPERATOR_COLOR_DODGE,
      CAIRO_OPERATOR_COLOR_BURN,
      CAIRO_OPERATOR_HARD_LIGHT,
      CAIRO_OPERATOR_SOFT_LIGHT,
      CAIRO_OPERATOR_DIFFERENCE,
      CAIRO_OPERATOR_EXCLUSION,
      CAIRO_OPERATOR_HSL_HUE,
      CAIRO_OPERATOR_HSL_SATURATION,
      CAIRO_OPERATOR_HSL_COLOR,
      CAIRO_OPERATOR_HSL_LUMINOSITY;

   // Anti-alias constants
   const uint
      CAIRO_ANTIALIAS_DEFAULT,
      CAIRO_ANTIALIAS_NONE,
      CAIRO_ANTIALIAS_GRAY,
      CAIRO_ANTIALIAS_SUBPIXEL;

   // Winding rule constants
   const uint
      CAIRO_FILL_RULE_WINDING,
      CAIRO_FILL_RULE_EVEN_ODD;

   // Line cap constants
   const uint
      CAIRO_LINE_CAP_BUTT,
      CAIRO_LINE_CAP_ROUND,
      CAIRO_LINE_CAP_SQUARE;

   // Line join constants
   const uint
      CAIRO_LINE_JOIN_MITER,
      CAIRO_LINE_JOIN_ROUND,
      CAIRO_LINE_JOIN_BEVEL;

   // Text cluster direction
   const uint
      CAIRO_TEXT_CLUSTER_FLAG_BACKWARD;

   // Font slant constants
   const uint
      CAIRO_FONT_SLANT_NORMAL,
      CAIRO_FONT_SLANT_ITALIC,
      CAIRO_FONT_SLANT_OBLIQUE;

   // Font weight constants
   const uint
      CAIRO_FONT_WEIGHT_NORMAL,
      CAIRO_FONT_WEIGHT_BOLD;

   // Subpixel order constants
   const uint
      CAIRO_SUBPIXEL_ORDER_DEFAULT,
      CAIRO_SUBPIXEL_ORDER_RGB,
      CAIRO_SUBPIXEL_ORDER_BGR,
      CAIRO_SUBPIXEL_ORDER_VRGB,
      CAIRO_SUBPIXEL_ORDER_VBGR;

   // Hint style constants
   const uint
      CAIRO_HINT_STYLE_DEFAULT,
      CAIRO_HINT_STYLE_NONE,
      CAIRO_HINT_STYLE_SLIGHT,
      CAIRO_HINT_STYLE_MEDIUM,
      CAIRO_HINT_STYLE_FULL;

   // Hint metrics constants
   const uint
      CAIRO_HINT_METRICS_DEFAULT,
      CAIRO_HINT_METRICS_OFF,
      CAIRO_HINT_METRICS_ON;

   // Font type constants
   const uint
      CAIRO_FONT_TYPE_TOY,
      CAIRO_FONT_TYPE_FT,
      CAIRO_FONT_TYPE_WIN32,
      CAIRO_FONT_TYPE_QUARTZ,
      CAIRO_FONT_TYPE_USER;

   // Path constants
   const uint
      CAIRO_PATH_MOVE_TO,
      CAIRO_PATH_LINE_TO,
      CAIRO_PATH_CURVE_TO,
      CAIRO_PATH_CLOSE_PATH;

   // Device constants
   const uint
      CAIRO_DEVICE_TYPE_DRM,
      CAIRO_DEVICE_TYPE_GL,
      CAIRO_DEVICE_TYPE_SCRIPT,
      CAIRO_DEVICE_TYPE_XCB,
      CAIRO_DEVICE_TYPE_XLIB,
      CAIRO_DEVICE_TYPE_XML;

   // Surface constants
   const uint
      CAIRO_SURFACE_TYPE_IMAGE,
      CAIRO_SURFACE_TYPE_PDF,
      CAIRO_SURFACE_TYPE_PS,
      CAIRO_SURFACE_TYPE_XLIB,
      CAIRO_SURFACE_TYPE_XCB,
      CAIRO_SURFACE_TYPE_GLITZ,
      CAIRO_SURFACE_TYPE_QUARTZ,
      CAIRO_SURFACE_TYPE_WIN32,
      CAIRO_SURFACE_TYPE_BEOS,
      CAIRO_SURFACE_TYPE_DIRECTFB,
      CAIRO_SURFACE_TYPE_SVG,
      CAIRO_SURFACE_TYPE_OS2,
      CAIRO_SURFACE_TYPE_WIN32_PRINTING,
      CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
      CAIRO_SURFACE_TYPE_SCRIPT,
      CAIRO_SURFACE_TYPE_QT,
      CAIRO_SURFACE_TYPE_RECORDING,
      CAIRO_SURFACE_TYPE_VG,
      CAIRO_SURFACE_TYPE_GL,
      CAIRO_SURFACE_TYPE_DRM,
      CAIRO_SURFACE_TYPE_TEE,
      CAIRO_SURFACE_TYPE_XML,
      CAIRO_SURFACE_TYPE_SKIA,
      CAIRO_SURFACE_TYPE_SUBSURFACE;

   // Pixel encoding constants
   const uint
      CAIRO_FORMAT_INVALID,
      CAIRO_FORMAT_ARGB32,
      CAIRO_FORMAT_RGB24,
      CAIRO_FORMAT_A8,
      CAIRO_FORMAT_A1,
      CAIRO_FORMAT_RGB16_565;

   // Pixel encoding constants
   const uint
      CAIRO_PATTERN_TYPE_SOLID,
      CAIRO_PATTERN_TYPE_SURFACE,
      CAIRO_PATTERN_TYPE_LINEAR,
      CAIRO_PATTERN_TYPE_RADIAL;

   // Color extention constants
   const uint
      CAIRO_EXTEND_NONE,
      CAIRO_EXTEND_REPEAT,
      CAIRO_EXTEND_REFLECT,
      CAIRO_EXTEND_PAD;

   // Filter constants
   const uint
      CAIRO_FILTER_FAST,
      CAIRO_FILTER_GOOD,
      CAIRO_FILTER_BEST,
      CAIRO_FILTER_NEAREST,
      CAIRO_FILTER_BILINEAR,
      CAIRO_FILTER_GAUSSIAN;

   // Overlap constants
   const uint
      CAIRO_REGION_OVERLAP_IN,
      CAIRO_REGION_OVERLAP_OUT,
      CAIRO_REGION_OVERLAP_PART;

   // Opaque types
   @cname Undef
   class cairo_t;

   @cname Undef
   class cairo_surface_t;

   @cname Undef
   class cairo_device_t;

   // Matrix
   @inject 'cairo_matrix_t *cairo_matrix_new() { return new cairo_matrix_t; }\n'

   class cairo_matrix_t {
       float64 xx; float64 yx;
       float64 xy; float64 yy;
       float64 x0; float64 y0;
   }

   class cairo_user_data_key_t;

   cairo_matrix_t cairo_matrix_new();

   @cname Undef
   class cairo_pattern_t;

   // Rectangle
   @inject 'cairo_rectangle_t *cairo_rectangle_new() { return new cairo_rectangle_t; }\n'
   class cairo_rectangle_t{
      float64 x, y, width, height;
   }

   cairo_rectangle_t cairo_rectangle_new();

   // Rectangle list
   @inject 'cairo_rectangle_list_t *cairo_rectangle_list_new() { return new cairo_rectangle_list_t; }\n'
   class cairo_rectangle_list_t{
      uint                    status;
      array[cairo_rectangle_t] rectangles;
      int                      num_rectangles;

      @cname cairo_rectangle_list_destroy
      oper del (cairo_rectangle_list_t rectangle_list);
   }

   cairo_rectangle_list_t cairo_rectangle_list_new ();

   @cname Undef
   class cairo_scaled_font_t;

   @cname Undef
   class cairo_font_face_t;

   @cname uint
   class cairo_operator_t;

   // Glyph
   class cairo_glyph_t;

   // Text cluster
   class cairo_text_cluster_t;

   // Text extents
   @inject 'cairo_text_extents_t *cairo_text_extents_new() { return new cairo_text_extents_t; }\n'
   class cairo_text_extents_t {
      float64 x_bearing, y_bearing;
      float64 width, height;
      float64 x_advance, y_advance;
   }
   cairo_text_extents_t cairo_text_extents_new ();

   @inject 'cairo_font_extents_t *cairo_font_extents_new() { return new cairo_font_extents_t; }\n'
   class cairo_font_extents_t {
       float64 ascent;
       float64 descent;
       float64 height;
       float64 max_x_advance;
       float64 max_y_advance;
   };
   cairo_font_extents_t cairo_font_extents_new ();

   @cname Undef
   class cairo_font_options_t;
   class cairo_path_data_t;
   class cairo_path_t;
   class cairo_rectangle_int_t;

   @cname Undef
   class cairo_region_t;

   @inject 'cairo_surface_t *cairo_surface_new(cairo_surface_t *existing_surface) {
      return existing_surface;
   }\n'

   cairo_t cairo_create (cairo_surface_t target);

   cairo_t cairo_reference (cairo_t cr);
   void cairo_destroy (cairo_t cr);
   uint cairo_get_reference_count (cairo_t cr);

   void cairo_save (cairo_t cr);
   void cairo_restore (cairo_t cr);
   void cairo_push_group (cairo_t cr);

   cairo_pattern_t cairo_pop_group (cairo_t cr);
   void  cairo_pop_group_to_source (cairo_t cr);

   // Modify state
   void cairo_set_operator (cairo_t cr, uint op);
   void cairo_set_source (cairo_t cr, cairo_pattern_t source);

   void cairo_set_source_rgb (cairo_t cr, float64 red, float64 green, float64 blue);
   void cairo_set_source_rgba (cairo_t cr,
                float64 red, float64 green, float64 blue,
                float64 alpha);

   void cairo_set_source_surface (cairo_t  cr,
              cairo_surface_t surface,
              float64   x, float64   y);

   void cairo_set_tolerance (cairo_t cr, float64 tolerance);
   void cairo_set_antialias (cairo_t cr, uint antialias);

   void cairo_set_fill_rule (cairo_t cr, uint fill_rule);
   void cairo_set_line_width (cairo_t cr, float64 width);
   void cairo_set_line_cap (cairo_t cr, uint line_cap);

   void cairo_set_line_join (cairo_t cr, uint line_join);

   void cairo_set_dash (cairo_t cr, array[float64] dashes,
                         int num_dashes, float64 offset);

   void cairo_set_miter_limit (cairo_t cr, float64 limit);
   void cairo_translate (cairo_t cr, float64 tx, float64 ty);
   void cairo_scale (cairo_t cr, float64 sx, float64 sy);
   void cairo_rotate (cairo_t cr, float64 angle);
   void cairo_transform (cairo_t cr, cairo_matrix_t matrix);

   void cairo_set_matrix (cairo_t  cr, cairo_matrix_t matrix);
   void cairo_identity_matrix (cairo_t cr);
   void cairo_user_to_device (cairo_t cr, array[float64] x, array[float64] y);
   void cairo_user_to_device_distance (cairo_t cr, array[float64] dx, array[float64] dy);
   void cairo_device_to_user (cairo_t cr, array[float64] x, array[float64] y);
   void cairo_device_to_user_distance (cairo_t cr, array[float64] dx, array[float64] dy);

   // Path creation functions
   void cairo_new_path (cairo_t cr);
   void cairo_move_to (cairo_t cr, float64 x, float64 y);
   void cairo_new_sub_path (cairo_t cr);
   void cairo_line_to (cairo_t cr, float64 x, float64 y);
   void cairo_curve_to (cairo_t cr,
                        float64 x1, float64 y1,
                        float64 x2, float64 y2,
                        float64 x3, float64 y3);

   void cairo_arc (cairo_t cr,
                   float64 xc, float64 yc,
                   float64 radius,
                   float64 angle1, float64 angle2);

   void cairo_arc_negative (cairo_t cr,
                            float64 xc, float64 yc,
                             float64 radius,
                             float64 angle1, float64 angle2);


   void cairo_rel_move_to (cairo_t cr, float64 dx, float64 dy);
   void cairo_rel_line_to (cairo_t cr, float64 dx, float64 dy);
   void cairo_rel_curve_to (cairo_t cr,
                            float64 dx1, float64 dy1,
                            float64 dx2, float64 dy2,
                            float64 dx3, float64 dy3);

   void cairo_rectangle (cairo_t cr,
                         float64 x, float64 y,
                         float64 width, float64 height);

   void cairo_close_path (cairo_t cr);
   void cairo_path_extents (cairo_t cr,
                            array[float64] x1, array[float64] y1,
                            array[float64] x2, array[float64] y2);

   // Painting functions
   void cairo_paint (cairo_t cr);
   void cairo_paint_with_alpha (cairo_t cr, float64   alpha);

   void cairo_mask (cairo_t cr, cairo_pattern_t pattern);

   void cairo_mask_surface (cairo_t cr, cairo_surface_t surface,
                            float64 surface_x,
                            float64 surface_y);

   void cairo_stroke (cairo_t cr);
   void cairo_stroke_preserve (cairo_t cr);
   void cairo_fill (cairo_t cr);
   void cairo_fill_preserve (cairo_t cr);
   void cairo_copy_page (cairo_t cr);
   void cairo_show_page (cairo_t cr);

   // Insideness testing
   bool cairo_in_stroke (cairo_t cr, float64 x, float64 y);
   bool cairo_in_fill (cairo_t cr, float64 x, float64 y);
   bool cairo_in_clip (cairo_t cr, float64 x, float64 y);

   // Rectangular extents
   void cairo_stroke_extents (cairo_t cr,
                                 array[float64] x1, array[float64] y1,
                                 array[float64] x2, array[float64] y2);

   void cairo_fill_extents (cairo_t cr,
                               array[float64] x1, array[float64] y1,
                               array[float64] x2, array[float64] y2);

   // Clipping
   void cairo_reset_clip (cairo_t cr);
   void cairo_clip (cairo_t cr);
   void cairo_clip_preserve (cairo_t cr);
   void cairo_clip_extents (cairo_t cr,
                               array[float64] x1, array[float64] y1,
                               array[float64] x2, array[float64] y2);

   // Rectangles
   cairo_rectangle_list_t cairo_copy_clip_rectangle_list (cairo_t cr);
   void cairo_rectangle_list_destroy (cairo_rectangle_list_t rectangle_list);

   // Glyphs
   cairo_glyph_t cairo_glyph_allocate (int num_glyphs);
   void cairo_glyph_free (cairo_glyph_t glyphs);

   // Text cluster
   cairo_text_cluster_t cairo_text_cluster_allocate (int num_clusters);
   void cairo_text_cluster_free (cairo_text_cluster_t clusters);

   // Text options
   cairo_font_options_t cairo_font_options_create ();
   cairo_font_options_t cairo_font_options_copy (cairo_font_options_t original);
   void cairo_font_options_destroy (cairo_font_options_t options);
   uint cairo_font_options_status (cairo_font_options_t options);
   void cairo_font_options_merge ( cairo_font_options_t options,
                                    cairo_font_options_t other);
   bool cairo_font_options_equal ( cairo_font_options_t options,
                                    cairo_font_options_t other);

   uint64 cairo_font_options_hash (cairo_font_options_t options);
   void cairo_font_options_set_antialias (cairo_font_options_t options,
                                          uint antialias);
   uint cairo_font_options_get_antialias (cairo_font_options_t options);
   void cairo_font_options_set_subpixel_order (cairo_font_options_t options,
                   uint  subpixel_order);
   uint cairo_font_options_get_subpixel_order (cairo_font_options_t options);
   void cairo_font_options_set_hint_style (cairo_font_options_t options,
                                             uint hint_style);
   uint cairo_font_options_get_hint_style (cairo_font_options_t options);
   void cairo_font_options_set_hint_metrics (cairo_font_options_t options,
                                                uint hint_metrics);
   uint cairo_font_options_get_hint_metrics (cairo_font_options_t options);

   // This interface is for dealing with text as text, not caring about the
   // font object inside the the cairo_t
   void cairo_select_font_face (cairo_t cr, byteptr family,
                                 uint  slant, uint weight);
   void cairo_set_font_size (cairo_t cr, float64 size);
   void cairo_set_font_matrix (cairo_t cr, cairo_matrix_t matrix);
   void cairo_get_font_matrix (cairo_t cr, cairo_matrix_t matrix);
   void cairo_set_font_options (cairo_t cr, cairo_font_options_t options);
   void cairo_get_font_options (cairo_t cr, cairo_font_options_t options);
   void cairo_set_font_face (cairo_t cr, cairo_font_face_t font_face);
   cairo_font_face_t cairo_get_font_face (cairo_t cr);
   void cairo_set_scaled_font (cairo_t cr, cairo_scaled_font_t scaled_font);
   cairo_scaled_font_t cairo_get_scaled_font (cairo_t cr);
   void cairo_show_text (cairo_t cr, byteptr utf8);
   void cairo_show_glyphs (cairo_t cr, cairo_glyph_t glyphs, int num_glyphs);

   void cairo_show_text_glyphs (cairo_t cr,
                                 byteptr utf8,
                                 int utf8_len,
                                 cairo_glyph_t glyphs,
                                 int num_glyphs,
                                 cairo_text_cluster_t clusters,
                                 int num_clusters,
                                 array[uint] cluster_flags);

   void cairo_text_path  (cairo_t cr, byteptr utf8);
   void cairo_glyph_path (cairo_t cr, cairo_glyph_t glyphs, int num_glyphs);

   void cairo_text_extents (cairo_t cr, byteptr utf8,
                              cairo_text_extents_t extents);

   void cairo_glyph_extents (cairo_t cr,
                              array[cairo_glyph_t] glyphs,
                              int num_glyphs,
                              cairo_text_extents_t extents);

   void cairo_font_extents (cairo_t cr, cairo_font_extents_t extents);

   // Generic identifier for a font style

   cairo_font_face_t cairo_font_face_reference (cairo_font_face_t font_face);
   void cairo_font_face_destroy (cairo_font_face_t font_face);
   uint cairo_font_face_get_reference_count (cairo_font_face_t font_face);
   uint cairo_font_face_status (cairo_font_face_t font_face);

   uint cairo_font_face_get_type (cairo_font_face_t font_face);

   void cairo_font_face_get_user_data (cairo_font_face_t  font_face,
                                       cairo_user_data_key_t key);


   uint cairo_font_face_set_user_data (cairo_font_face_t font_face,
               cairo_user_data_key_t key,
               voidptr user_data,
               function[void, voidptr] destroy);

   // Portable interface to general font features.
   cairo_scaled_font_t
      cairo_scaled_font_create (cairo_font_face_t     font_face,
                                cairo_matrix_t        font_matrix,
                                cairo_matrix_t        ctm,
                                cairo_font_options_t  options);

   cairo_scaled_font_t cairo_scaled_font_reference (cairo_scaled_font_t scaled_font);
   void cairo_scaled_font_destroy (cairo_scaled_font_t scaled_font);
   uint cairo_scaled_font_get_reference_count (cairo_scaled_font_t scaled_font);
   uint cairo_scaled_font_status (cairo_scaled_font_t scaled_font);
   uint cairo_scaled_font_get_type (cairo_scaled_font_t scaled_font);

   void cairo_scaled_font_get_user_data (cairo_scaled_font_t scaled_font,
                                         cairo_user_data_key_t key);

   uint
   cairo_scaled_font_set_user_data (cairo_scaled_font_t scaled_font,
                                        cairo_user_data_key_t key,
                                        voidptr    user_data,
                                        function[void, voidptr] destroy);

   void  cairo_scaled_font_extents (cairo_scaled_font_t  scaled_font,
                                       cairo_font_extents_t extents);

   void
      cairo_scaled_font_text_extents (cairo_scaled_font_t    scaled_font,
                                       byteptr               utf8,
                                       cairo_text_extents_t  extents);

   void
      cairo_scaled_font_glyph_extents (cairo_scaled_font_t     scaled_font,
                                        array[cairo_glyph_t]   glyphs,
                                        int                    num_glyphs,
                                        cairo_text_extents_t   extents);

   uint
      cairo_scaled_font_text_to_glyphs (cairo_scaled_font_t  scaled_font,
                                   float64                      x,
                                   float64                      y,
                                   byteptr                      utf8,
                                   int                          utf8_len,
                                   array[cairo_glyph_t]         glyphs,
                                   int                          num_glyphs,
                                   array[cairo_text_cluster_t]  clusters,
                                   int                          num_clusters,
                                   array[uint]                cluster_flags);

   cairo_font_face_t
      cairo_scaled_font_get_font_face (cairo_scaled_font_t scaled_font);

   void
      cairo_scaled_font_get_font_matrix (cairo_scaled_font_t scaled_font,
                                         cairo_matrix_t font_matrix);

   void
      cairo_scaled_font_get_ctm (cairo_scaled_font_t  scaled_font,
                                 cairo_matrix_t ctm);

   void
      cairo_scaled_font_get_scale_matrix (cairo_scaled_font_t scaled_font,
                                          cairo_matrix_t   scale_matrix);

   void
      cairo_scaled_font_get_font_options (cairo_scaled_font_t         scaled_font,
                                          cairo_font_options_t options);


   // Toy fonts
   cairo_font_face_t
      cairo_toy_font_face_create (byteptr family,
                                  uint    slant,
                                  uint   weight);

   byteptr cairo_toy_font_face_get_family (cairo_font_face_t font_face);
   uint cairo_toy_font_face_get_slant (cairo_font_face_t font_face);
   uint cairo_toy_font_face_get_weight (cairo_font_face_t font_face);


   // User fonts
   cairo_font_face_t cairo_user_font_face_create ();

   // Query functions
   uint cairo_get_operator (cairo_t cr)
   cairo_pattern_t cairo_get_source (cairo_t cr);
   float64 cairo_get_tolerance (cairo_t cr);
   uint cairo_get_antialias (cairo_t cr);

   bool cairo_has_current_point (cairo_t cr);
   void cairo_get_current_point (cairo_t cr, array[float64] x, array[float64] y);
   uint cairo_get_fill_rule (cairo_t cr);

   float64 cairo_get_line_width (cairo_t cr);
   uint cairo_get_line_cap (cairo_t cr);
   uint cairo_get_line_join (cairo_t cr);
   float64 cairo_get_miter_limit (cairo_t cr);
   int cairo_get_dash_count (cairo_t cr);
   void cairo_get_dash (cairo_t cr, array[float64] dashes, array[float64] offset);

   void cairo_get_matrix (cairo_t cr, cairo_matrix_t matrix);
   cairo_surface_t cairo_get_target (cairo_t cr);
   cairo_surface_t cairo_get_group_target (cairo_t cr);

   cairo_path_t cairo_copy_path (cairo_t cr);
   cairo_path_t cairo_copy_path_flat (cairo_t cr);
   void cairo_append_path (cairo_t    cr, cairo_path_t   path);
   void cairo_path_destroy (cairo_path_t path);

   // Error status queries
   uint cairo_status (cairo_t cr);
   byteptr cairo_status_to_string (uint status);

   // Backend device manipulation
   cairo_device_t cairo_device_reference (cairo_device_t device);
   uint cairo_device_get_type (cairo_device_t device);
   uint cairo_device_status (cairo_device_t device);
   uint cairo_device_acquire (cairo_device_t device);
   void cairo_device_release (cairo_device_t device);
   void cairo_device_flush (cairo_device_t device);
   void cairo_device_finish (cairo_device_t device);
   void cairo_device_destroy (cairo_device_t device);
   uint cairo_device_get_reference_count (cairo_device_t device);

   voidptr
      cairo_device_get_user_data (cairo_device_t       device,
                                  cairo_user_data_key_t key);

   uint
   cairo_device_set_user_data (cairo_device_t device,
            cairo_user_data_key_t key,
            voidptr user_data,
            function[void, voidptr] destroy);


   // Surface manipulation
   cairo_surface_t
      cairo_surface_create_similar (cairo_surface_t other,
                                    uint   content,
                                    int      width,
                                    int      height);

   cairo_surface_t
      cairo_surface_create_for_rectangle (cairo_surface_t target,
                                          float64       x,
                                          float64       y,
                                          float64       width,
                                          float64       height);

   cairo_surface_t cairo_surface_reference (cairo_surface_t surface);
   void cairo_surface_finish (cairo_surface_t surface);
   void cairo_surface_destroy (cairo_surface_t surface);
   cairo_device_t cairo_surface_get_device (cairo_surface_t surface);
   uint cairo_surface_get_reference_count (cairo_surface_t surface);
   uint cairo_surface_status (cairo_surface_t surface);
   uint cairo_surface_get_type (cairo_surface_t surface);
   uint cairo_surface_get_content (cairo_surface_t surface);

@ifdef CAIRO_HAS_PNG_FUNCTIONS {
   uint cairo_surface_write_to_png (cairo_surface_t surface,
                                      byteptr filename);

   uint cairo_surface_write_to_png_stream (cairo_surface_t surface,
                                             function[uint, voidptr, byteptr,
                                                      uint] write_func,
                                             voidptr         closure);
}

   voidptr cairo_surface_get_user_data (cairo_surface_t surface,
                                        cairo_user_data_key_t key);

   uint cairo_surface_set_user_data (cairo_surface_t surface,
                                       cairo_user_data_key_t key,
                                       voidptr user_data,
                                       function[void, voidptr] destroy);

   void
      cairo_surface_get_mime_data (cairo_surface_t surface,
                                   byteptr mime_type,
                                   array[byteptr] data,
                                   array[uint64] length);

   uint
      cairo_surface_set_mime_data (cairo_surface_t surface,
                                   byteptr mime_type,
                                   byteptr data,
                                   uint64 length,
                                   function[void, voidptr] destroy,
                                   voidptr closure);

   void cairo_surface_get_font_options (cairo_surface_t surface,
                                        cairo_font_options_t options);

   void cairo_surface_flush (cairo_surface_t surface);
   void cairo_surface_mark_dirty (cairo_surface_t surface);
   void cairo_surface_mark_dirty_rectangle (cairo_surface_t surface,
                                             int              x,
                                             int              y,
                                             int              width,
                                             int              height);

   void cairo_surface_set_device_offset (cairo_surface_t surface,
                                          float64           x_offset,
                                          float64           y_offset);

   void cairo_surface_get_device_offset (cairo_surface_t surface,
                                          array[float64] x_offset,
                                          array[float64] y_offset);

   void cairo_surface_set_fallback_resolution (cairo_surface_t surface,
                                                float64 x_pixels_per_inch,
                                                float64 y_pixels_per_inch);

   void cairo_surface_get_fallback_resolution (cairo_surface_t surface,
                                                array[float64] x_pixels_per_inch,
                                                array[float64] y_pixels_per_inch);

   void cairo_surface_copy_page (cairo_surface_t surface);
   void cairo_surface_show_page (cairo_surface_t surface);
   bool cairo_surface_has_show_text_glyphs (cairo_surface_t surface);
   cairo_surface_t cairo_image_surface_create (uint   format,
                                               int        width,
                                               int        height);

   int cairo_format_stride_for_width (uint   format,
                                       int     width);

   cairo_surface_t
      cairo_image_surface_create_for_data (byteptr    data,
                                           uint     format,
                                           int        width,
                                           int        height,
                                           int        stride);

   byteptr cairo_image_surface_get_data (cairo_surface_t surface);

   uint
      cairo_image_surface_get_format (cairo_surface_t surface);
   int cairo_image_surface_get_width (cairo_surface_t surface);
   int cairo_image_surface_get_height (cairo_surface_t surface);
   int cairo_image_surface_get_stride (cairo_surface_t surface);

@ifdef CAIRO_HAS_PNG_FUNCTIONS {
   cairo_surface_t cairo_image_surface_create_from_png (byteptr filename);
}

   //~ cairo_surface_t
      //~ cairo_image_surface_create_from_png_stream (cairo_read_func_t  read_func,
                   //~ voidptr closure);

   // Recording-surface functions
   cairo_surface_t
      cairo_recording_surface_create (uint     content,
                                      cairo_rectangle_t extents);

   void cairo_recording_surface_ink_extents (cairo_surface_t surface,
                                              array[float64] x0,
                                              array[float64] y0,
                                              array[float64] width,
                                              array[float64] height);

   // Pattern creation functions
   cairo_pattern_t
      cairo_pattern_create_rgb (float64 red, float64 green, float64 blue);
   cairo_pattern_t
      cairo_pattern_create_rgba (float64 red, float64 green, float64 blue,
                                 float64 alpha);
   cairo_pattern_t
      cairo_pattern_create_for_surface (cairo_surface_t surface);
   cairo_pattern_t
      cairo_pattern_create_linear (float64 x0, float64 y0,
                                    float64 x1, float64 y1);
   cairo_pattern_t
      cairo_pattern_create_radial (float64 cx0, float64 cy0, float64 radius0,
                                    float64 cx1, float64 cy1, float64 radius1);

   cairo_pattern_t cairo_pattern_reference (cairo_pattern_t pattern);
   void cairo_pattern_destroy (cairo_pattern_t pattern);
   uint cairo_pattern_get_reference_count (cairo_pattern_t pattern);
   uint cairo_pattern_status (cairo_pattern_t pattern);

   voidptr cairo_pattern_get_user_data (cairo_pattern_t pattern,
                                        cairo_user_data_key_t key);

   uint
      cairo_pattern_set_user_data (cairo_pattern_t pattern,
                                   cairo_user_data_key_t key,
                                   voidptr user_data,
                                   function[void, voidptr] destroy);

   uint cairo_pattern_get_type (cairo_pattern_t pattern);

   void
      cairo_pattern_add_color_stop_rgb (cairo_pattern_t pattern,
                                         float64 offset, float64 red,
                                         float64 green, float64 blue);

   void
      cairo_pattern_add_color_stop_rgba (cairo_pattern_t pattern,
                                      float64 offset,
                                      float64 red, float64 green, float64 blue,
                                      float64 alpha);

   void cairo_pattern_set_matrix (cairo_pattern_t pattern,
                                  cairo_matrix_t matrix);

   void cairo_pattern_get_matrix (cairo_pattern_t pattern,
                                   cairo_matrix_t matrix);

   // Extend functions
   void cairo_pattern_set_extend (cairo_pattern_t pattern, uint extend);
   uint cairo_pattern_get_extend (cairo_pattern_t pattern);
   void cairo_pattern_set_filter (cairo_pattern_t pattern, uint filter);

   uint cairo_pattern_get_filter (cairo_pattern_t pattern);

   uint
      cairo_pattern_get_rgba (cairo_pattern_t pattern,
                              array[float64] red, array[float64] green,
                              array[float64] blue, array[float64] alpha);

   uint
      cairo_pattern_get_surface (cairo_pattern_t pattern,
                                 cairo_surface_t surface);


   uint
      cairo_pattern_get_color_stop_rgba (cairo_pattern_t pattern,
                                         int index, array[float64] offset,
                                         array[float64] red, array[float64] green,
                                         array[float64] blue, array[float64] alpha);

   uint
      cairo_pattern_get_color_stop_count (cairo_pattern_t pattern,
                                          array[int] count);

   uint
      cairo_pattern_get_linear_points (cairo_pattern_t pattern,
                                       array[float64] x0, array[float64] y0,
                                       array[float64] x1, array[float64] y1);

   uint
      cairo_pattern_get_radial_circles (cairo_pattern_t pattern,
                                        array[float64] x0, array[float64] y0, array[float64] r0,
                                        array[float64] x1, array[float64] y1, array[float64] r1);
   // Matrix functions
   void
      cairo_matrix_init (cairo_matrix_t matrix,
                         float64  xx, float64  yx,
                         float64  xy, float64  yy,
                         float64  x0, float64  y0);
   void
      cairo_matrix_init_identity (cairo_matrix_t matrix);

   void
      cairo_matrix_init_translate (cairo_matrix_t matrix,
                                   float64 tx, float64 ty);
   void cairo_matrix_init_scale (cairo_matrix_t matrix,
                                 float64 sx, float64 sy);

   void cairo_matrix_init_rotate (cairo_matrix_t matrix,
                                   float64 radians);
   void cairo_matrix_translate (cairo_matrix_t matrix, float64 tx, float64 ty);
   void cairo_matrix_scale (cairo_matrix_t matrix, float64 sx, float64 sy);
   void cairo_matrix_rotate (cairo_matrix_t matrix, float64 radians);
   uint cairo_matrix_invert (cairo_matrix_t matrix);

   void cairo_matrix_multiply (cairo_matrix_t result,
                                cairo_matrix_t a,
                                cairo_matrix_t b);
   void
      cairo_matrix_transform_distance (cairo_matrix_t matrix,
                                       array[float64] dx,
                                       array[float64] dy);

   void
      cairo_matrix_transform_point (cairo_matrix_t matrix,
               array[float64] x, array[float64] y);

   // Region functions
   cairo_region_t cairo_region_create ();
   cairo_region_t
      cairo_region_create_rectangle (cairo_rectangle_int_t rectangle);

   cairo_region_t
      cairo_region_create_rectangles (cairo_rectangle_int_t rects, int count);

   cairo_region_t cairo_region_copy (cairo_region_t original);
   cairo_region_t cairo_region_reference (cairo_region_t region);
   void cairo_region_destroy (cairo_region_t region);
   bool cairo_region_equal (cairo_region_t region, cairo_region_t b);
   uint cairo_region_status (cairo_region_t region);

   void
      cairo_region_get_extents (cairo_region_t region,
                               cairo_rectangle_int_t extents);

   int cairo_region_num_rectangles (cairo_region_t region);

   void cairo_region_get_rectangle (cairo_region_t region,
                                     int                    nth,
                                     cairo_rectangle_int_t rectangle);

   bool cairo_region_is_empty (cairo_region_t region);

   uint
      cairo_region_contains_rectangle (cairo_region_t region,
                                       cairo_rectangle_int_t rectangle);

   bool
      cairo_region_contains_point (cairo_region_t region, int x, int y);
   void cairo_region_translate (cairo_region_t region, int dx, int dy);

   uint cairo_region_subtract (cairo_region_t region, cairo_region_t other);

   uint
      cairo_region_subtract_rectangle (cairo_region_t region,
                                    cairo_rectangle_int_t rectangle);
   uint cairo_region_intersect (cairo_region_t region, cairo_region_t other);

   uint
      cairo_region_intersect_rectangle (cairo_region_t region,
              cairo_rectangle_int_t rectangle);

   uint
      cairo_region_union (cairo_region_t region, cairo_region_t other);

   uint
      cairo_region_union_rectangle (cairo_region_t region,
                                    cairo_rectangle_int_t rectangle);
   uint
      cairo_region_xor (cairo_region_t region, cairo_region_t other);

   uint
      cairo_region_xor_rectangle (cairo_region_t region,
                                  cairo_rectangle_int_t rectangle);

   // Functions to be used while debugging
   // (not intended for use in production code)
   void cairo_debug_reset_static_data ();

   //---------------------------------------------------------------------------
   // PDF version
   const uint  CAIRO_PDF_VERSION_1_4, CAIRO_PDF_VERSION_1_5;

   cairo_surface_t
      cairo_pdf_surface_create (byteptr                 filename,
                                float64                 width_in_points,
                                float64                 height_in_points);

   cairo_surface_t
      cairo_pdf_surface_create_for_stream (function[uint, voidptr, byteptr,
                                                    uint] write_func,
                                           voidptr             closure,
                                           float64             width_in_points,
                                           float64             height_in_points);

   void
      cairo_pdf_surface_restrict_to_version (cairo_surface_t           surface,
                                             uint                    version);

   void
      cairo_pdf_get_versions (array[uint] versions,
                              array[int] num_versions);

   byteptr
      cairo_pdf_version_to_string (uint version);

   void
      cairo_pdf_surface_set_size (cairo_surface_t       surface,
                                  float64               width_in_points,
                                  float64               height_in_points);

   //---------------------------------------------------------------------------
   // Freetype functions

   //~ cairo_public cairo_font_face_t
      //~ cairo_ft_font_face_create_for_ft_face (FT_Face         face,
                                             //~ int             load_flags);
//~
   //~ FT_Face
      //~ cairo_ft_scaled_font_lock_face (cairo_scaled_font_t scaled_font);
//~
   //~ void
      //~ cairo_ft_scaled_font_unlock_face (cairo_scaled_font_t scaled_font);
//~
   //~ cairo_public cairo_font_face_t
      //~ cairo_ft_font_face_create_for_pattern (FcPattern pattern);
//~
   //~ void
      //~ cairo_ft_font_options_substitute (const cairo_font_options_t options,
                                        //~ FcPattern                   pattern);

   const uint
       CAIRO_SVG_VERSION_1_1,
       CAIRO_SVG_VERSION_1_2;


   cairo_surface_t
      cairo_svg_surface_create (byteptr  filename,
                                float64  width_in_points,
                                float64  height_in_points);

   // Don't know how usable this is from crack
   cairo_surface_t
      cairo_svg_surface_create_for_stream (function[uint, voidptr, byteptr,
                                           uint] write_func,
                                           voidptr closure,
                                           float64 width_in_points,
                                           float64 height_in_points);

   void
      cairo_svg_surface_restrict_to_version (cairo_surface_t surface,
                                             uint          version);

   void
      cairo_svg_get_versions (array[uint]   versions,
                              array[int]      num_versions);

   byteptr cairo_svg_version_to_string (uint version);

   // Xlib surfaces, we need a small Xlib binding to define these
   @cname Undef
   class Display;
   class Drawable;
   class Visual;
   class Pixmap;
   class Screen;

   cairo_surface_t
      cairo_xlib_surface_create (Display      dpy,
                                 Drawable     drawable,
                                 Visual       visual,
                                 int          width,
                                 int          height);

   cairo_surface_t
      cairo_xlib_surface_create_for_bitmap (Display   dpy,
                                            Pixmap    bitmap,
                                            Screen    screen,
                                            int       width,
                                            int       height);

   void
      cairo_xlib_surface_set_size (cairo_surface_t surface,
                                   int              width,
                                   int              height);

   void
      cairo_xlib_surface_set_drawable (cairo_surface_t  surface,
                                       Drawable         drawable,
                                       int              width,
                                       int              height);

   Display
      cairo_xlib_surface_get_display (cairo_surface_t surface);

   Drawable
      cairo_xlib_surface_get_drawable (cairo_surface_t surface);

   Screen
      cairo_xlib_surface_get_screen (cairo_surface_t surface);

   Visual
      cairo_xlib_surface_get_visual (cairo_surface_t surface);

   int
      cairo_xlib_surface_get_depth (cairo_surface_t surface);

   int
      cairo_xlib_surface_get_width (cairo_surface_t surface);

   int
      cairo_xlib_surface_get_height (cairo_surface_t surface);

   // Postscript surface
   const uint
    CAIRO_PS_LEVEL_2,
    CAIRO_PS_LEVEL_3;

   cairo_surface_t
      cairo_ps_surface_create (byteptr  filename,
                               float64  width_in_points,
                               float64  height_in_points);

   cairo_surface_t
      cairo_ps_surface_create_for_stream (function[uint, voidptr, byteptr,
                                                   uint] write_func,
                                          voidptr  closure,
                                          float64  width_in_points,
                                          float64  height_in_points);

   void
      cairo_ps_surface_restrict_to_level (cairo_surface_t  surface,
                                          uint           level);

   void
      cairo_ps_get_levels (array[uint]  levels,
                           int            num_levels);

   byteptr
      cairo_ps_level_to_string (uint level);

   void
      cairo_ps_surface_set_eps (cairo_surface_t  surface,
                                bool             eps);

   bool
      cairo_ps_surface_get_eps (cairo_surface_t surface);

   void
      cairo_ps_surface_set_size (cairo_surface_t  surface,
                                 float64          width_in_points,
                                 float64          height_in_points);

   void
      cairo_ps_surface_dsc_comment (cairo_surface_t  surface,
                                    byteptr          comment);

   void
      cairo_ps_surface_dsc_begin_setup (cairo_surface_t surface);

   void
      cairo_ps_surface_dsc_begin_page_setup (cairo_surface_t surface);


}
