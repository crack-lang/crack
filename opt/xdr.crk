# Binding for rpc/xdr.h
# Copyright 2012 Google Inc.
# Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# 6/22/2012

@import crack.extgen generateExtension;

@generateExtension crack.runtime.xdr {
    @filename 'runtime/XDR.cc'
    @dumpsymbols 'opt/xdr.txt'
    @inject I'// Copy\
                 right 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
              // 6/22/2012
              //
              //  This Source Code Form is subject to the terms of the \
                  Mozilla Public
              //  License, v. 2.0. If a copy of the MPL was not distributed \
                  with this
              //  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n'
    @inject '
#include <rpc/xdr.h>

#define INT_SIZE sizeof(int)

    XDR *crk_xdrmem_create(char *buffer, unsigned int numbytes, int op){
               XDR *xdrs = new XDR;
               xdrmem_create(xdrs, buffer, numbytes, (enum xdr_op)op);
               return xdrs;
            }

    void crk_xdr_destroy(XDR * xdrs){
        xdr_destroy(xdrs);
        delete xdrs;
    }

    bool xdr_error;
    unsigned int xdr_size;

    bool crk_xdr_error(){
        return xdr_error;
    }

    unsigned int crk_xdr_size(){
        return xdr_size;
    }

    // Returns the end of the buffer
    unsigned int crk_xdr_getpos(XDR *xdrs){
        return xdr_getpos(xdrs);
    }

    // Sets the position to be read from next in the buffer/stream
    void crk_xdr_setpos(XDR *xdrs, unsigned int pos){
        xdr_setpos(xdrs, pos);
    }


\#define scalar_op(tpe, func_tpe, crk_tpe) \\
    bool crk_xdr_encode_\#\#crk_tpe(XDR *xdrs, tpe value){ \\
        return (bool)xdr_\#\#func_tpe(xdrs, &value); \\
    } \\
\\
    tpe crk_xdr_decode_\#\#crk_tpe(XDR *xdrs){ \\
        tpe value; \\
        xdr_error = xdr_\#\#func_tpe(xdrs, &value); \\
        return value; \\
    }

    scalar_op(int, int, int)
    scalar_op(unsigned int, u_int, uint)
    scalar_op(int32_t, int32_t, int32)
    scalar_op(uint32_t, uint32_t, uint32)
    scalar_op(int64_t, int64_t, int64)
    scalar_op(uint64_t, uint64_t, uint64)
    scalar_op(float, float, float32)
    scalar_op(double, double, float64)

    // Encode a bool
    bool crk_xdr_encode_bool(XDR *xdrs, bool value){
        bool_t val = value;
        return xdr_bool(xdrs, &val);
    }

    // Decode a bool
    bool crk_xdr_decode_bool(XDR *xdrs){
        bool_t value;
        xdr_error = xdr_bool(xdrs, &value);
        return (bool)value;
    }

    // Encode a string
    bool crk_xdr_encode_bytes(XDR *xdrs, char *buf, unsigned int numbytes){
        return (bool)xdr_bytes(xdrs, &buf, &numbytes, numbytes);
    }

    // Decode a string
    unsigned int crk_xdr_decode_bytes(XDR *xdrs, char *buf, unsigned int numbytes){
        xdr_error = xdr_bytes(xdrs, &buf, &numbytes, numbytes);
        return numbytes;
    }

\#define array_op(tpe, func_tpe, crk_tpe) \\
    bool crk_xdr_encode_array_\#\#crk_tpe(XDR *xdrs, tpe *value, \\
            unsigned int count, unsigned int max) { \\
        return (bool) xdr_array(xdrs,  (char **)&value, &count, max, \\
                                sizeof(tpe), (xdrproc_t)xdr_\#\#func_tpe); \\
    } \\
\\
    unsigned int crk_xdr_decode_array_\#\#crk_tpe(XDR *xdrs, tpe *value, \\
                                                  unsigned int max) { \\
        unsigned int count; \\
        xdr_error = xdr_array(xdrs, (char **)&value, &count, max, \\
                              sizeof(tpe), (xdrproc_t)xdr_\#\#func_tpe); \\
        return count; \\
    }

    array_op(int, int, int)
    array_op(unsigned int, u_int, uint)
    array_op(int32_t, int32_t, int32)
    array_op(uint32_t, uint32_t, uint32)
    array_op(int64_t, int64_t, int64)
    array_op(uint64_t, uint64_t, uint64)
    array_op(float, float, float32)
    array_op(double, double, float64)
    array_op(bool_t, bool, bool)

    '

    @crack_internal

    const int XDR_ENCODE, XDR_DECODE, XDR_FREE, INT_SIZE;

    @cname XDR
    class xdr;

    @cname crk_xdrmem_create
    xdr xdrmem_create(byteptr buffer, uint numbytes, int op);

    @cname crk_xdr_destroy
    void xdr_destroy(xdr xdrs);

    @cname crk_xdr_getpos
    uint xdr_getpos(xdr xdrs);

    @cname crk_xdr_setpos
    uint xdr_setpos(xdr xdrs, uint pos);

    // int
    @cname crk_xdr_encode_int
    bool xdr_encode_int(xdr xdrs, int value);
    @cname crk_xdr_decode_int
    int xdr_decode_int(xdr xdrs);

    // uint
    @cname crk_xdr_encode_uint
    bool xdr_encode_uint(xdr xdrs, uint value);
    @cname crk_xdr_decode_uint
    uint xdr_decode_uint(xdr xdrs);

    // int32
    @cname crk_xdr_encode_int32
    bool xdr_encode_int32(xdr xdrs, int32 value);
    @cname crk_xdr_decode_int32
    int32 xdr_decode_int32(xdr xdrs);

    // uint32
    @cname crk_xdr_encode_uint32
    bool xdr_encode_uint32(xdr xdrs, uint32 value);
    @cname crk_xdr_decode_uint32
    uint32 xdr_decode_uint32(xdr xdrs);

    // int64
    @cname crk_xdr_encode_int64
    bool xdr_encode_int64(xdr xdrs, int64 value);
    @cname crk_xdr_decode_int64
    int64 xdr_decode_int64(xdr xdrs);

    // uint64
    @cname crk_xdr_encode_uint64
    bool xdr_encode_uint64(xdr xdrs, uint64 value);
    @cname crk_xdr_decode_uint64
    uint64 xdr_decode_uint64(xdr xdrs);

    // float32
    @cname crk_xdr_encode_float32
    bool xdr_encode_float32(xdr xdrs, float32 value);
    @cname crk_xdr_decode_float32
    float32 xdr_decode_float32(xdr xdrs);

    // float64
    @cname crk_xdr_encode_float64
    bool xdr_encode_float64(xdr xdrs, float64 value);
    @cname crk_xdr_decode_float64
    float64 xdr_decode_float64(xdr xdrs);

    @cname crk_xdr_encode_bool
    bool xdr_encode_bool(xdr xdrs, bool value);

    @cname crk_xdr_decode_bool
    bool xdr_decode_bool(xdr xdrs);

    @cname crk_xdr_encode_bytes
    bool xdr_encode_bytes(xdr xdrs, byteptr buf, uint numbytes);

    @cname crk_xdr_decode_bytes
    uint xdr_decode_bytes(xdr xdrs, byteptr buf, uint numbytes);

// Arrays
    @cname crk_xdr_encode_array_int
    bool xdr_encode_array_int(xdr xdrs, array[int] buf, uint count, uint max);

    @cname crk_xdr_decode_array_int
    uint xdr_decode_array_int(xdr xdrs, array[int] buf, uint max);

    @cname crk_xdr_encode_array_uint
    bool xdr_encode_array_uint(xdr xdrs, array[uint] buf, uint count, uint max);

    @cname crk_xdr_decode_array_uint
    uint xdr_decode_array_uint(xdr xdrs, array[uint] buf, uint max);


    @cname crk_xdr_encode_array_int32
    bool xdr_encode_array_int32(xdr xdrs, array[int32] buf, uint count, uint max);

    @cname crk_xdr_decode_array_int32
    uint xdr_decode_array_int32(xdr xdrs, array[int32] buf, uint max);

    @cname crk_xdr_encode_array_uint32
    bool xdr_encode_array_uint32(xdr xdrs, array[uint32] buf, uint count, uint max);

    @cname crk_xdr_decode_array_uint32
    uint xdr_decode_array_uint32(xdr xdrs, array[uint32] buf, uint max);


    @cname crk_xdr_encode_array_int64
    bool xdr_encode_array_int64(xdr xdrs, array[int64] buf, uint count, uint max);

    @cname crk_xdr_decode_array_int64
    uint xdr_decode_array_int64(xdr xdrs, array[int64] buf, uint max);

    @cname crk_xdr_encode_array_uint64
    bool xdr_encode_array_uint64(xdr xdrs, array[uint64] buf, uint count, uint max);

    @cname crk_xdr_decode_array_uint64
    uint xdr_decode_array_uint64(xdr xdrs, array[uint64] buf, uint max);


    @cname crk_xdr_encode_array_float32
    bool xdr_encode_array_float32(xdr xdrs, array[float32] buf, uint count, uint max);

    @cname crk_xdr_decode_array_float32
    uint xdr_decode_array_float32(xdr xdrs, array[float32] buf, uint max);

    @cname crk_xdr_encode_array_float64
    bool xdr_encode_array_float64(xdr xdrs, array[float64] buf, uint count, uint max);

    @cname crk_xdr_decode_array_float64
    uint xdr_decode_array_float64(xdr xdrs, array[float64] buf, uint max);

    @cname crk_xdr_encode_array_bool
    bool xdr_encode_array_bool(xdr xdrs, array[bool] buf, uint count, uint max);

    @cname crk_xdr_decode_array_bool
    uint xdr_decode_array_bool(xdr xdrs, array[bool] buf, uint max);

    @cname crk_xdr_error
    bool xdr_error();

}
