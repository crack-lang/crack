## Annotations for command-line processing.

import crack.ann deserializeNodeList, deserializeXMac, readBlock, Node,
    NodeList, NodeListImpl, Tok, Type;
import crack.compiler CrackContext, Token, TOK_IDENT, TOK_NULLKW, TOK_STRING;
import crack.cont.array Array;
import crack.io cerr, FStr;
import crack.strutil StringArray;

@import crack.ann assert, cvars, tokens, xmac;

class CommandArgs {
    NodeList parentType = NodeListImpl();
    Token __parentName;

    # @command( arg = val, ... )
    #          ^                ^
    void parse(CrackContext ctx) {
        while (true) {
            tok := ctx.getToken();
            if (tok.isRParen())
                break;

            if (!tok.isIdent())
                ctx.error(tok,
                          'Identifier expected in @command arguments'.buffer
                          );

            argTok := tok;
            arg := String(argTok.getText());

            tok = ctx.getToken();
            if (!tok.isAssign())
                ctx.error(
                    tok,
                    'Assignment operator expected in @command args.'.buffer
                );

            if (arg == 'parent') {
                Type.parse(ctx, parentType);
            } else if (arg == 'parentAttr') {
                tok = ctx.getToken();
                if (!tok.isIdent())
                    ctx.error(
                        tok,
                        'Identifier expected after parentAttr arg'.buffer
                    );
                __parentName = tok;
            } else {
                ctx.error(argTok,
                        FStr() `Unknown @command argument $arg\0`.buffer
                        );
            }

            tok = ctx.getToken();
            if (tok.isRParen())
                break;
            else if (!tok.isComma())
                ctx.error(
                    tok,
                    'Comma or end paren expected in @command args.'.buffer
                );
        }
    }

    Token getParentName() {
        return !(__parentName is null) ?
                    __parentName :
                    Token(TOK_IDENT, 'parent'.buffer,
                          parentType.getLocation()
                          );
    }

    NodeList emitParentInstVar() {
        if (!parentType)
            return parentType;

        parentVar := getParentName();
        return @xmac* { $parentType $parentVar ; }.expand();
    }
}

Array[Tok] parseFlagAnn(CrackContext ctx) {
    tok := ctx.getToken();
    result := Array[Tok]();
    if (tok.isLParen()) {
        while (true) {
            tok = ctx.getToken();
            if (tok.isRParen())
                break;

            if (tok.isString())
                result.append(Tok(tok));
            else
                ctx.error(tok, '@flags only supports string arguments'.buffer);

            tok = ctx.getToken();
            if (tok.isRParen())
                break;
            else if (!tok.isComma())
                ctx.error(tok, 'comma or closing paren expected'.buffer);
        }
        return result;

    } else {
        ctx.putBack(tok);
        return result;
    }
}

class Arg {
    @cvars {
        NodeList type;
        Token name;
        # It would be better to store this in an array of Token (we don't need
        # the Tok type) but we can't put those into an array.
        Array[Tok] flags;
        Token default;
        bool multi;
    }

    @final bool isSubcmd() { return !type }

    NodeList emit() {
        return @xmac* { $type $name }.expand();
    }

    ## For subcommands, we usurp this object to store just the name of the
    ## variable bound to a SubcommandArgInfo object.
    @static Arg subcmd(Token variable) {
        return Arg(null, variable, null, null, false);
    }
}

NodeList emitFieldsAsInstVars(Array[Arg] args) {
    NodeList result = NodeListImpl();
    for (arg :in args) {
        if (arg.isSubcmd())
            continue;
        emittedArg := arg.emit();
        result = @xmac* { $result $emittedArg; }.expand();
    }

    return result;
}

## Create the name of the subcommand variable for a command.  'var' is the
## variable name of the command class.
Token createSubcommandVar(Token var) {
    return Token(TOK_IDENT, (String(var.getText()) + '_subcmds\0').buffer,
                 var.getLocation()
                 );
}

NodeList emitFieldsAsArgInfoArray(Array[Arg] args) {
    NodeList elems = NodeListImpl();
    for (arg :in args) {

        # check for a subcommand
        if (arg.isSubcmd()) {
            var := createSubcommandVar(arg.name);
            elems = @xmac* { $elems SubcommandArgInfo($var), }.expand();
            continue;
        }

        # Generate flags array.
        NodeList flagsArr;
        if (arg.flags) {
            flagsArr = NodeListImpl();
            for (flag :in arg.flags) {
                flagTok := flag.tok;
                flagsArr = @xmac* { $flagsArr $flagTok, }.expand();
            }
            flagsArr = @xmac* { StringArray![ $flagsArr ] }.expand();
        } else {
            flagsArr = @tokens { null };
        }

        name := Token(TOK_STRING, arg.name.getText(), arg.name.getLocation());
        type := arg.type;
        hasDefaultValue := !(arg.default is null) ? @tokens { true } :
                                                    @tokens { false };
        defaultValue := !(arg.default is null) ?
                            arg.default :
                            Token(TOK_NULLKW, 'null'.buffer,
                                  arg.name.getLocation()
                                  );
        multi := arg.multi ? @tokens { true } : @tokens { false };

        elems = @xmac* {
            $elems
            ArgInfo[$type]($name, $flagsArr, $hasDefaultValue, $defaultValue,
                           $multi),
        }.expand();
    }

    return @xmac* { [ $elems ] }.expand();
}

## Create the name of the subcommand variable from a node list.
Token createSubcommandVar(CrackContext ctx, NodeList var) {
    # Make sure we just have one element.
    Node node;
    for (item :in var) {
        if (node) {
            ctx.error(FStr() I`Can't use composite type name \
                               $(var.toString(null)) as parent (hint: create \
                               an alias for it and use that instead)\0`.buffer
                      );
        } else {
            node = item;
        }
    }
    @assert(node);

    # Convert to a token.
    return createSubcommandVar(Tok.cast(node).tok);
}

NodeList emitFieldAssignments(Array[Arg] args) {
    NodeList result = NodeListImpl();
    for (arg :in args) {
        if (arg.isSubcmd())
            continue;

        name := arg.name;
        type := arg.type;
        nameStr := Token(TOK_STRING, arg.name.getText(),
                         arg.name.getLocation()
                         );
        result = @xmac* {
            $result
            this.$name = ArgVal[$type].cast(argVals[$nameStr]).val;
        }.expand();
    }
    return result;
}

## A command-line command.
## Usage:
##    import crack.cmd ArgInfo, ArgVal, CommandInterface;
##    import crack.cont.treemap TreeMap;
##    import crack.strutil StringArray;
##    @import crack.ann command;
##
##    ## This is a doc-comment, which is preserved.
##    @command int foo(String positionalArg,
##                     int anotherPosArg,
##                     String optionalArg = null,
##                     @flag('-f') bool someFlag
##                     ) {
##        ....
##    |
##
## You can also add arguments to @command by following it with parenthesized
## arguments:
##
##     @command(parent = foo)
##
## Arguments to @command are:
##     parent: The class that this is a subcommand of.  An instance of this
##         will be added to your class and assigned when the subcommand is
##         instantiated along with the other arguments.
##     parentAttr: The name of the variable assign the parent instance to
##         ("parent" by default).

void command(CrackContext ctx) {
    tok := ctx.getToken();
    commandArgs := CommandArgs();
    if (tok.isLParen())
        commandArgs.parse(ctx);
    else
        ctx.putBack(tok);
    returnType := NodeListImpl();
    Type.parse(ctx, returnType);

    name := ctx.getToken();
    nameStr := Token(TOK_STRING, name.getText(), name.getLocation());
    if (!name.isIdent())
        ctx.error(name, 'Identifier expected'.buffer);

    tok = ctx.getToken();
    if (!tok.isLParen())
        ctx.error(tok, 'arg list expected'.buffer);

    args := Array[Arg]();
    bool isParentCommand;
    tok = ctx.getToken();
    while (!tok.isRParen()) {
        Array[Tok] flagNames;
        bool multi;
        bool omitArg;  # Don't parse an argument after the annotations.

        # Check for annotations.
        while (tok.isAnn()) {
            tok = ctx.getToken();
            if (!tok.isIdent())
                ctx.error(tok, 'Identifier expected in annotation'.buffer);

            tokText := String(tok.getText());
            if (tokText == 'flag') {
                flagNames = parseFlagAnn(ctx);
            } else if (tokText == 'multi') {
                multi = true;
            } else if (tokText == 'subcmd') {
                omitArg = true;
                args.append(Arg.subcmd(name));
                isParentCommand = true;
            } else {
                # Should probably just pass this through to the argument list.
                ctx.error(tok, 'Unknown arg annotation.'.buffer);
            }

            tok = ctx.getToken();
        }

        # Parse the argument (unless we got an annotation that doesn't modify
        # one).
        if (!omitArg) {
            argType := NodeListImpl();
            ctx.putBack(tok);
            Type.parse(ctx, argType);

            arg := ctx.getToken();
            if (!tok.isIdent())
                ctx.error(tok, 'identifier expected in arg list'.buffer);

            # Check for a default value.
            tok = ctx.getToken();
            Token default;
            if (tok.isAssign()) {
                default = ctx.getToken();
                tok = ctx.getToken();
            }

            args.append(Arg(argType, arg, flagNames, default, multi));
        }

        if (tok.isComma())
            tok = ctx.getToken();
        else if (!tok.isRParen())
            ctx.error(tok, 'comma, default value or end paren expected'.buffer);
    }

    block := readBlock(ctx);
    fieldsAsInstVars := emitFieldsAsInstVars(args);
    fieldsAsArgInfoArray := emitFieldsAsArgInfoArray(args);
    fieldAssignments := emitFieldAssignments(args);
    parentInstVar := commandArgs.emitParentInstVar();
    NodeList parentConstruction;
    if (commandArgs.parentType) {
        parentVar := commandArgs.getParentName();
        parentType := commandArgs.parentType;
        parentConstruction =
            @xmac* { $parentVar = $parentType(parentVals) }.expand();
    } else {
        parentConstruction = NodeListImpl();
    }

    # Generate the subcommand variable, which is a map containing all of the
    # subcommands for a given command.
    NodeList subcommandVarDef;
    if (isParentCommand) {
        subcommandVar := createSubcommandVar(name);
        subcommandVarDef =
            @xmac* {
                TreeMap[String, ArgParser] $subcommandVar = {};
            }.expand();
    } else {
        subcommandVarDef = NodeListImpl();
    }

    # Generate the parent binder, which is the statement that binds a
    # subcommand to its parent's subcommand map.
    NodeList parentBinder;
    if (commandArgs.parentType) {
        parentSubcommandVar :=
            createSubcommandVar(ctx, commandArgs.parentType);
        parentBinder = @xmac* {
            $parentSubcommandVar[$nameStr] = $name();
        }.expand();
    } else {
        parentBinder = NodeListImpl();
    }

    @xmac* {
        $subcommandVarDef
        class $name @impl ArgParser {
            $fieldsAsInstVars
            $parentInstVar
            oper init(StringArray args) {
                ci := CommandInterface!$fieldsAsArgInfoArray;
                argVals := ci.parseArgs(args);
                $fieldAssignments
            }

            oper init(ValueMap argVals) {
                $fieldAssignments
            }

            oper init() {}

            $returnType oper call() $block

            ValueMap parseArgs(Array[String] args, ValueMap parentVals) {
                ci := CommandInterface!$fieldsAsArgInfoArray;
                argVals := ci.parseArgs(args);
                $parentConstruction;
                $fieldAssignments
                this();
                return argVals;
            }

            String getName() { return $nameStr }
        }
        $parentBinder
    }.expand(ctx);
}
