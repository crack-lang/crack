## High-level interface for the fluidsynth module.
## Copyright 2012 Google Inc.
##
##   This Source Code Form is subject to the terms of the Mozilla Public
##   License, v. 2.0. If a copy of the MPL was not distributed with this
##   file, You can obtain one at http://mozilla.org/MPL/2.0/.
##

import crack.io cout;
import crack.lang CString;
import crack.runtime free;
import crack.ext._fluidsynth fluid_synth_t, fluid_settings_t,
    fluid_audio_driver_t, delete_fluid_audio_driver, delete_fluid_settings,
    delete_fluid_synth, new_fluid_settings, new_fluid_synth,
    fluid_settings_getstr_default, fluid_settings_setstr,
    fluid_settings_getint_default, fluid_settings_setint,
    fluid_settings_getnum_default, fluid_settings_setnum,
    fluid_synth_all_notes_off, fluid_synth_noteon, fluid_synth_noteoff,
    fluid_synth_pitch_bend, fluid_synth_program_change,
    new_fluid_audio_driver, fluid_synth_sfload;

@import crack.ann define;

class FluidSettings {
    fluid_settings_t _rep;
    oper init() {
        _rep = new_fluid_settings();
    }

    oper del() {
        delete_fluid_settings(_rep);
    }

    @define settingsFuncs(type, qualifier, sfx) {

        ## Returns the default value for a setting.
        type getDefault$$qualifier(String name) {
            resultHolder := array[type](1);
            nameCstr := name.toCString();
            fluid_settings_get$$sfx$$_default(_rep, nameCstr.buffer, resultHolder);
            result := resultHolder[0];
            free(resultHolder);
            return result;
        }

        ## Set the given settings parameter to the given value.
        void set(String name, type value) {
            nameCstr := name.toCString();
            fluid_settings_set$$sfx(_rep, nameCstr.buffer, value);
        }
    }

    @settingsFuncs(int, Int, int)
    @settingsFuncs(float64, Float, num)

    # Strings are special, we have to do value conversion.

    ## Returns the default value for a setting.
    String getDefault(String name) {
        resultHolder := array[byteptr](1);
        nameCstr := name.toCString();
        fluid_settings_getstr_default(_rep, nameCstr.buffer, resultHolder);
        result := StaticString(resultHolder[0]);
        free(resultHolder);
        return result;
    }

    alias getDefaultStr = getDefault;

    ## Set the given settings parameter to the given value.
    void set(String name, String value) {
        nameCstr := name.toCString();
        valCstr := value.toCString();
        fluid_settings_setstr(_rep, nameCstr.buffer, valCstr.buffer);
    }
}

class FluidSynth {
    fluid_synth_t __rep;
    FluidSettings __settings;
    fluid_audio_driver_t __driver;
    oper init(FluidSettings settings) :
        __rep = new_fluid_synth(settings._rep),
        __settings = settings,
        __driver = new_fluid_audio_driver(settings._rep, __rep) {
    }

    oper del() {
        delete_fluid_audio_driver(__driver);
        delete_fluid_synth(__rep);
    }

    void loadFont(CString name, bool resetPresets) {
        fluid_synth_sfload(__rep, name.buffer, resetPresets ? 1 : 0);
    }

    void loadFont(StaticString name, bool resetPresets) {
        fluid_synth_sfload(__rep, name.buffer, resetPresets ? 1 : 0);
    }

    void loadFont(String name, bool resetPresets) {
        loadFont(CString(name), resetPresets);
    }

    void noteOn(int channel, int note, int velocity) {
        fluid_synth_noteon(__rep, channel, note, velocity);
    }

    void pitchBend(int channel, int value) {
        fluid_synth_pitch_bend(__rep, channel, value + 8192);
    }

    void allNotesOff(int channel) {
        fluid_synth_all_notes_off(__rep, channel);
    }

    void allSoundsOff(int channel) {
        fluid_synth_all_notes_off(__rep, channel);
    }

    void noteOff(int channel, int note) {
        fluid_synth_noteoff(__rep, channel, note);
    }

    void programChange(int channel, int program) {
        fluid_synth_program_change(__rep, channel, program);
    }
}




