#==============================================================================
#
#  $Id$
#
#  MIDI sequencer and data model module.
#
#  Copyright 1999 Michael A. Muller <mmuller@enduden.com>
#  Copyright 2011-2012 Google Inc.
#  Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#    This Source Code Form is subject to the terms of the Mozilla Public
#    License, v. 2.0. If a copy of the MPL was not distributed with this
#    file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
#
#==============================================================================

import crack.ascii hex, radix;
import crack.cont.array Array;
import crack.lang cmp, AssertionError, Buffer, InvalidArgumentError,
    InvalidStateError, ManagedBuffer;
import crack.io cerr, StandardFormatter, FStr, Formatter, StringFormatter,
    Reader, Writer;

@import crack.ann assert, interface, implements;

const int
    SNDCTL_SEQ_SYNC = 20737,
    SNDCTL_SEQ_RESET = 20736,
    SNDCTL_TMR_START = 21506,
    SNDCTL_TMR_STOP = 21507,
    SNDCTL_TMR_TIMEBASE = -1073458175,
    SNDCTL_TMR_TEMPO = -1073458171,
    SNDCTL_SEQ_CTRLRATE = -1073458941;

# if this is true, all received midi events will be printed
bool _printEvents;

## Wrapper to help write to a midi stream.  Manages a buffer and allows you to
## keep track of a status byte.
class MidiWriter {
    Writer out;
    byte status;
    ManagedBuffer buffer = {1024};
    oper init(Writer out) : out = out {}

    ## Write eveything buffered to the final output stream.
    @final void flush() {
        out.write(buffer);
        buffer.size = 0;
    }

    @final void write(byte b) {
        if (buffer.size == 1024)
            flush();
        buffer.buffer[buffer.size++] = b;
    }

    @final void write(Buffer buf) {
        out.write(buf);
    }

    ## Writes the status byte but only if it is not already the current status.
    @final void writeStatus(byte b) {
        if (status != b) {
            status = b;
            write(b);
        }
    }

    @final void encodeVarLen(uint val) {
        if (!val) {
            write(0);
            return;
        }

        # find the high 7 bits
        uint x = val;
        uint shifts;
        while (x) {
            x >>= 7;
            ++shifts;
        }

        while (--shifts)
            write(byte( (val >> (7 * shifts)) & 0x7f | 0x80 ));

        # write the last byte
        write(byte(val & 0x7f));
    }

    oper del() {
        flush();
    }
}

##  A MIDI event.  An abstract base class.
##
##  Public variables:
##      time: Absolute time of the event.
@abstract class Event {

    uint time;

    oper init(uint time) : time = time {}

    class StatAndString {
        byte status;
        String rep;
        oper init(byte status, byteptr rep, uintz size) :
            status = status,
            rep(rep, size, true)  {
        }

        oper init(byte status, String rep) : status = status, rep = rep {}
    }

    ## Used to convert the event to a string of bytes suitable for inclusion
    ## in a midi stream of some sort.  /status/ is the current, running
    ## status byte.
    ##
    ## This method returns a tuple consisting of the new status byte and
    ## the string representation of the event.
    @abstract StatAndString toMidiString(byte status);

    @abstract void writeTo(MidiWriter writer);

    ## Make a copy of the event object.
    @abstract Event clone();

    @final int cmp(Event other) {
        return cmp(time, other.time);
    }
}

## Abstract base class for all events that apply to a particular channel.
##
## Public variables:
##  channel: The channel that the event occurred on.  An integer from 0-15.
@abstract class ChannelEvent : Event {
    byte channel;

    oper init(uint time, byte channel) : Event(time), channel = channel {}

    @final int cmp(ChannelEvent other) {
        rc := cmp(channel, other.channel);
        if (rc) return rc;
        return Event.cmp(other);
    }
}

##  Base class for midi "note on" and "note off" events, both of which have
##  the same public interface.
##
##  Public variables:
##  note: Numeric note (0-127)
##  velocity: Numeric velocity (0-127)
@abstract class NoteEvent : ChannelEvent {

   byte note, velocity;
   oper init(uint time, byte channel, byte note, byte velocity) :
        ChannelEvent(time, channel),
        note = note,
        velocity = velocity {
    }

    @final int cmp(NoteEvent other) {
        rc := cmp(note, other.note);
        if (rc) return rc;
        rc = cmp(velocity, other.velocity);
        if (rc) return rc;
        return ChannelEvent.cmp(other);
    }
}

## Midi "note on" event.
class NoteOn : NoteEvent {

    oper init(uint time, byte channel, byte note, byte velocity) :
        NoteEvent(time, channel, note, velocity) {
    }

    StatAndString toMidiString(byte status) {
        if (status == (0x90 | channel)) {
            return StatAndString(status, byteptr![note, velocity], 2);
        } else {
            status = 0x90 | channel;
            return StatAndString(status, byteptr![status, note, velocity], 3);
        }
    }

    Event clone() {
        return NoteOn(time, channel, note, velocity);
    }

    void writeTo(MidiWriter out) {
        out.writeStatus(0x90 | channel);
        out.write(note);
        out.write(velocity);
    }

    void formatTo(Formatter f) {
        f `ch: $channel, note $note on, velocity $velocity`;
    }

    int cmp(Object other) {
        if (o := NoteOn.cast(other, null))
            return NoteEvent.cmp(o);
        else
            return Object.cmp(other);
    }
}

##  Midi "note off" event.
##
##  This may be in conflict with the actual midi spec, but I am assuming
##  that only a note off with a velocity of 0 can be used in a running
##  "note on" status (as a "note on" event with a velocity of 0).  Any
##  other velocity value will result in a change in the current status
##  to "note off" so that the velocity can be reflected.
class NoteOff : NoteEvent {

    oper init(uint time, byte channel, byte note, byte velocity) :
        NoteEvent(time, channel, note, velocity) {
    }

    StatAndString toMidiString(byte status) {
        if (status == (0x80 | channel)) {
            return StatAndString(status, byteptr![note, velocity], 2);
        } else if (status == (0x90 | channel) && velocity == 0) {
            return StatAndString(status, byteptr![note, 0], 2);
        } else {
            status = 0x80 | channel;
            return StatAndString(status, byteptr![status, note, velocity], 3);
        }
    }

    void writeTo(MidiWriter out) {
        # handle the "note on" status specially - if we're in note on, and the
        # velocity is 0 (which it should always be) we can just emit note on
        # with velocity zero.
        if (out.status != (0x90 | channel) || velocity)
            out.writeStatus(0x80 | channel);
        out.write(note);
        out.write(velocity);
    }

    Event clone() {
        return NoteOff(time, channel, note, velocity);
    }

    void formatTo(Formatter f) {
        f `ch: $channel, note $note off, velocity $velocity`;
    }

    int cmp(Object other) {
        if (o := NoteOff.cast(other, null))
            return NoteEvent.cmp(o);
        else
            return Object.cmp(other);
    }
}

##  Midi "program change" event.
##
##  Public variables:
##  /program/::
##     New program number (0-127).
class ProgramChange : ChannelEvent {

    byte program;

    oper init(uint time, byte channel, byte program) :
        ChannelEvent(time, channel),
        program = program {
    }

    StatAndString toMidiString(byte status) {
        # since there is no reason to do running program changes on the same
        # channel, we just always send a status byte.
        status = 0xC0 | channel;
        return StatAndString(status, byteptr![status, program], 2);
    }

    void writeTo(MidiWriter out) {
        out.writeStatus(0xC0 | channel);
        out.write(program);
    }

    Event clone() {
        return ProgramChange(time, channel, program);
    }

    void formatTo(Formatter f) {
        f `ch: $channel, change to program $program`;
    }

    @final int cmp(ProgramChange other) {
        rc := cmp(program, other.program);
        if (rc) return rc;
        return ChannelEvent.cmp(other);
    }

    int cmp(Object other) {
        if (o := ProgramChange.cast(other, null))
            return cmp(o);
        else
            return Object.cmp(other);
    }
}

##  Midi "pitch wheel" event.
##
##  Public variables:
##  /value/::
##     Numeric value of the pitch wheel.  A value of 0x2000 is centered.
##     Higher values transpose the pitch up, lower values transpose it down.
##
class PitchWheel : ChannelEvent {

    int value;
    oper init(uint time, byte channel, int value) :
        ChannelEvent(time, channel),
        value = value {
    }

    StatAndString toMidiString(byte status) {
        if (status == (0xE0 | channel)) {
            return StatAndString(status,
                                 byteptr![byte(value & 0x7F), byte(value >> 7)],
                                 2
                                 );
        } else {
            status = 0xE0 | channel;
            return StatAndString(status,
                                 byteptr![
                                    status,
                                    byte(value & 0x7F),
                                    byte(value >> 7)
                                 ],
                                 3
                                 );
        }
    }

    void writeTo(MidiWriter out) {
        out.writeStatus(0xE0 | channel);
        out.write(byte(value & 0x7F));
        out.write(byte(value >> 7 & 0xFF));
    }

    Event clone() {
        return PitchWheel(time, channel, value);
    }

    void formatTo(Formatter f) {
        f `ch: $channel, pitch wheel to $value`;
    }

    @final int cmp(PitchWheel other) {
        rc := cmp(value, other.value);
        if (rc) return rc;
        return ChannelEvent.cmp(other);
    }

    int cmp(Object other) {
        if (o := PitchWheel.cast(other, null))
            return cmp(o);
        else
            return Object.cmp(other);
    }
}

##  Midi "control change" event.
##
##  Public variables:
##  /controller/::
##     The controller in question.
##  /value/::
##     The new value for the controller.
class ControlChange : ChannelEvent {
    byte controller, value;

    oper init(uint time, byte channel, byte controller, byte value) :
        ChannelEvent(time, channel),
        controller = controller,
        value = value {
    }

    StatAndString toMidiString(byte status) {
        if (status == (0xB0 | channel)) {
            return StatAndString(status, byteptr![controller, value], 2);
        } else {
            status = 0xB0 | channel;
            return StatAndString(status, byteptr![status, controller, value],
                                 3
                                 );
        }
    }

    void writeTo(MidiWriter out) {
        out.writeStatus(0xB0 | channel);
        out.write(controller);
        out.write(value);
    }

    Event clone() {
        return ControlChange(time, channel, controller, value);
    }

    void formatTo(Formatter f) {
        f `ch: $channel, control $controller changed to $value`;
    }

    @final int cmp(ControlChange other) {
        rc := cmp(controller, other.controller);
        if (rc) return rc;
        rc = cmp(value, other.value);
        if (rc) return rc;
        return ChannelEvent.cmp(other);
    }

    int cmp(Object other) {
        if (o := ControlChange.cast(other, null))
            return cmp(o);
        else
            return Object.cmp(other);
    }
}

##  Midi "system exclusive" event.  Just a big bag of data passed into
##  the system.
##
##  Public Variables:
##  data: A string of binary data to be passed into the remote system.
##     The leading F0 and trailing F7 bytes should be omitted: they will
##     be generated by the @asMidiString() method.
class SysEx : Event {

    String data;

    oper init(uint time, String data) : Event(time), data = data {}

    StatAndString toMidiString(byte status) {
        StringFormatter temp = {};
        temp `\xF0$data\xF7`;
        return StatAndString(0xF0, temp.string());
    }

    Event clone() {
        return SysEx(time, data);
    }

    void writeTo(MidiWriter out) {
        out.writeStatus(0xF0);
        out.encodeVarLen(data.size + 1);
        for (uintz i = 0; i < data.size; ++i)
            out.write(data[i]);
        out.write(0xF7);
    }

    void formatTo(Formatter f) {
        f `SysEx: `;
        for (uintz i = 0; i < data.size; ++i)
            f `$(radix(data[i], 16))`;
    }

    @final int cmp(SysEx other) {
        rc := cmp(data, other.data);
        if (rc) return rc;
        return Event.cmp(other);
    }

    int cmp(Object other) {
        if (o := SysEx.cast(other, null))
            return cmp(o);
        else
            return Object.cmp(other);
    }
}

# Midi meta event.
class MetaEvent : Event {
    byte action;
    String contents;  # May be null for an empty string.

    oper init(uint time, byte action, String contents) :
        Event(time),
        action = action,
        contents = contents {
    }

    StatAndString toMidiString(byte status) {
        return null;
    }

    void writeTo(MidiWriter out) {
        out.write(0xFF);
        out.write(action);
        if (contents) {
            out.write(byte(contents.count()));
            out.write(contents);
        } else {
            out.write(0);
        }
    }

    Event clone() {
        return MetaEvent(time, action, contents);
    }

    void formatTo(Formatter f) {
        f `MetaEvent $action $(contents ? contents.getRepr() : '')`;
    }

    int cmp(Object other) {
        if (o := MetaEvent.cast(other, null)) {
            rc := cmp(action, o.action);
            if (rc) return rc;
            rc = cmp(contents, o.contents);
            return rc;
        } else {
            return Object.cmp(other);
        }
    }
}

## Pseudo-event used as a marker for the end of the track.
## When a track is deserialized, the EndTrack is automatically added from the
## end track marker in the stream.  When a track is serialized, if it doesn't
## have an EndTrack event one will be written at the time of the last existing
## event on the track.
class EndTrack : MetaEvent {
    oper init(uint time) : MetaEvent(time, 0x2F, null) {}

    typeof(EndTrack(0).toMidiString(0)) toMidiString(byte status) {
        return null;
    }

    void writeTo(MidiWriter out) {
        out.write(0xFF);
        out.write(0x2F);
        out.write(0);
    }

    Event clone() {
        return EndTrack(time);
    }

    void formatTo(Formatter f) {
        f `EndEvent`;
    }

    int cmp(Object other) {
        if (o := EndTrack.cast(other, null))
            return Event.cmp(o);
        else
            return Object.cmp(other);
    }
}

# XXX Still need the following classes:
#     AfterTouch
#     ChannelPressure
#     RealTime

## Abstract base class for all event sources.  Implements the iterator
## protocol.
@abstract class EventSource {
    @abstract void next();
    @abstract Event elem();
}

##  Abstrack class for event sources that are random access: allowing
##  the user to define the position within the event stream as a midi
##  clock.
@abstract class SeekableEventSource : EventSource {

    ## Sets the position within the event stream.  /pos/ is an
    ## absolute midi clock value.
    @abstract void setPos(uint pos);

    ## Returns the position within the event stream as an absolute value.
    @abstract uint getPos();

    ## Returns the position of the last event in the event stream.
    @abstract uint getEnd();
}

##  A *Track* is a list of events, sorted in order of their time.
##
##  Public variables:
##  name:
##     Every track can have an associated name.  If the tracks is part of
##     a "piece", use Piece.renameTrack() to rename the track instead
##     of setting this attribute directly.
##
##     A track name must be unique within the piece.
class Track {

    String name;
    Array[Event] __events;

    class TrackEventSource : SeekableEventSource {
        Array[Event] __events;
        uint __i;
        oper init(Array[Event] events, uint i) :
            __events = events,
            __i = i {
        }
        bool isTrue() { return __i < __events.count(); }
        void next() { ++__i; }
        Event elem() { return __events[__i]; }

        void setPos(uint pos) {
            uint binsearch(Array[Event] events, uint bottom, uint top,
                           uint target) {
                if (target <= events[bottom].time)
                    return bottom;
                else if (top - bottom == 1)
                    return top;

                mid := bottom + (top - bottom) / 2;
                if (target < events[mid].time)
                    return binsearch(events, bottom, mid, target);
                else
                    return binsearch(events, mid, top, target);
            }

            # rule out some simple conditions
            if (!__events || pos <= __events[0].time)
                __i = 0;
            else if (pos > __events[-1].time)
                __i =  __events.count();

            __i = binsearch(__events, 0, __events.count(), pos);
        }

        uint getPos() {
            if (__i < __events.count())
                return __events[__i].time;
            else if (!__events)
                return 0;
            else
                return __events[-1].time + 1;
        }

        uint getEnd() {
            if (__events)
                return __events[-1].time;
            else
                return 0;
        }
    }

    oper init(String name, Array[Event] events) :
        name = name,
        __events = events {
    }

    oper init(String name) : name = name, __events() {}

    int cmp(Track other) {
        rc := name.cmp(other.name);
        if (rc) return rc;
        return __events.cmp(other.__events);
    }

    int cmp(Object other) {
        if (o := Track.cast(other, null))
            return cmp(o);
        else
            return Object.cmp(other);
    }

    bool isTrue() {
        return __events;
    }

    ## Add the event to the track at the correct location (with respect to the
    ## time of the other events).
    void add(Event event) {
        if (!__events) {
            __events.append(event);
        } else if (event.time >= (last := __events[-1]).time) {
            # Special case if the last event is an end track event and the
            # time is the same as the new event -- we don't want to go adding
            # events _after_ the EndTrack.
            if (last.isa(EndTrack) && last.time == event.time)
                __events.insert(-1, event);
            else
                __events.append(event);
        } else {
            for (evtCur :on __events) {
                evt := evtCur.elem();
                if (evt.time > event.time) {
                    __events.insert(evtCur, event);
                    return;
                }
            }

            throw AssertionError('found no location to insert an event');
        }
    }

    ## Adds a new event to the end of the track.  The time of the event must
    ## be later than or equal to the time of the last event in the track,
    ## otherwise this throws InvalidArgumentError.
    void append(Event evt) {
        if (__events) {
            last := __events[-1];
            if (evt.time < last.time)
                throw InvalidArgumentError(
                    FStr() I`Appending event $evt which is earlier than the \
                             last event of the track ($(__events[-1].time)).`
                );

            # Once again, special case if the last track is an end event.
            if (last.isa(EndTrack) && last.time == evt.time) {
                __events.insert(-1, evt);
                return;
            }
        }
        __events.append(evt);
    }

    Event oper [](int index) {
        return __events[index];
    }

    uint count() { return __events.count(); }

    TrackEventSource iter() { return TrackEventSource(__events, 0); }

    ## write all of the events in the track with their time deltas.
    void writeEvents(MidiWriter out) {
        uint lastTime = 0;
        for (event :in this) {
            out.encodeVarLen(event.time - lastTime);
            event.writeTo(out);
            lastTime = event.time;
        }
    }

    void writeTo(MidiWriter out) {
        writeEvents(out);

        # Make sure we ended with an EndTrack event.
        if (!__events || !EndTrack.cast(__events[-1], null)) {
            out.write(0);  # time from last event.
            out.write(0xff);
            out.write(0x2f);
            out.write(0);
        }
    }

    void formatTo(Formatter out) {
        for (event :in this)
            out `$(event.time): $event\n`;
    }

/*
   def merge(self, other):
      """
         Returns a new track consisting of the events of /self/ and /other/
         combined.
      """
      source = TrackZipper( [self, other] )
      return Track(self.name, source.getEvents())

   def overwrite(self, other):
      """
         Returns a new track which is the current track overwritten with
         other using a @TrackOverwriter.
      """
      source = TrackOverwriter( [self, other] )
      return Track(self.name, source.getEvents())

   def getChannel(self):
      """
         Returns the channel of the first channel event on the track.
         If there are no channel events on the track, returns *None*.
      """
      for evt in self.__events:
         if isinstance(evt, ChannelEvent):
            return evt.channel
      return None
*/
}

Track merge(String name, Array[Track] tracks) {
    alias Iter = typeof(tracks[0].iter());

    # build an array of iterators
    Array[Iter] iters = {tracks.count()};
    for (t :in tracks)
        iters.append(t.iter());

    Track result = {name};

    # repeat until there are no more events in any of the iterators
    while (iters) {

        # find the earliest event in all of the iterators
        Event first;
        int firstIndex;
        int index;
        for (iter :in iters) {
            if (!first || iter.elem().time < first.time) {
                first = iter.elem();
                firstIndex = index;
            }

            ++index;
        }

        # bump the iterator for the next event forward
        iters[firstIndex].next();
        if (!iters[firstIndex])
            iters.delete(firstIndex);

        result.append(first);
    }

    return result;
}

const BUF_SIZE := 1024;

class MidiReader {
    byte status;
    Reader src;
    ManagedBuffer buf = {BUF_SIZE};
    uint pos;

    oper init(Reader src) : src = src {}

    @final bool gotMoreData() {
        if (pos == buf.size) {
            src.read(buf);
            if (!buf.size)
                return false;
            pos = 0;
        }
        return true;
    }

    @final void needByte() {
        if (pos == buf.size) {
            src.read(buf);
            if (!buf.size)
                throw InvalidStateError('Out of data reading midi file');
            pos = 0;
        }
    }

    @final byte readByte() {
        needByte();
        return buf.buffer[pos++];
    }

    uint readVarLen() {
        uint val;
        byte b = 0x80;
        while (b & 0x80) {
            b = readByte();
            val = val << 7 | (b & 0x7F);
        }
        return val;
    }

    ## This gets called when we read an event with an unknown status byte.
    ## Override it to deal with special events.
    Event readUserEvent() {
        @assert(false);
        return null;
    }

    @final Event readEvent() {
        byte first = readByte();

        # is it a status byte?
        if (first & 0x80) {
            status = first;
            first = readByte();
        }

        statusHigh := status & 0xF0;
        channel := status & 0xF;
        if (statusHigh == 0x90) {
            velocity := readByte();
            if (velocity)
                return NoteOn(0, channel, first, velocity);
            else
                return NoteOff(0, channel, first, velocity);
        } else if (statusHigh == 0x80) {
            return NoteOff(0, channel, first, readByte());
        } else if (statusHigh == 0xE0) {
            high := readByte();
            return PitchWheel(0, channel, (readByte() << 7) | first);
        } else if (statusHigh == 0xC0) {
            return ProgramChange(0, channel, first);
        } else if (statusHigh == 0xB0) {
            return ControlChange(0, channel, first, readByte());
        } else if (status == 0xF0) {
            # sys-ex event
            size := readVarLen();
            ManagedBuffer tempBuf = {size};
            # XXX broken! Will ignore the existing buffer.
            src.read(tempBuf);
            terminator := readByte();
            @assert(terminator == 0xF7);
            return SysEx(0, String(tempBuf, true));
        } else if (status == 0xFF) {
            action := first;
            if (action == 0x2F) {
                @assert(readByte() == 0);
                return EndTrack(0);
            } else {
                # Other meta event.
                import crack.lang AppendBuffer;
                len := readVarLen();
                buf := AppendBuffer(len);
                for (int i; i < len; ++i)
                    buf.append(readByte());
                return MetaEvent(0, action, String(buf, true));
            }
        } else if (status == 0xFE || status == 0xFC || status == 0xFB) {
            # Active sensing, shouldn't be writing these.
            return SysEx(0, '');
        } else {
            return readUserEvent();
        }
    }

    Track readTrack(String name) {
        Track track = {name};
        uint t;
        while (true) {
            if (!gotMoreData())
                break;

            # read the time
            t += readVarLen();
            evt := readEvent();
            if (!evt)
                break;
            evt.time = t;
            track.add(evt);
            if (evt.isa(EndTrack))
                break;
        }

        return track;
    }
}
