// Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>
//
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
//
// Higher level classes from mongo client binding

import crack.ascii escape, hex;
import crack.enc.json JSONArray, JSONBool, JSONFloat, JSONFormatter, JSONInt,
    JSONObject, JSONParser, JSONString, JSONStringFormatter, ParseException,
    UnexpectedToken;
import crack.enc.base64 encode;
import crack.io cout, cerr, Formatter, FStr;
import crack.lang AssertionError, Buffer, CString, InvalidArgumentError,
    InvalidStateError, ManagedBuffer, StaticString;
import crack.runtime errno, free, memcpy;
import crack.sys strerror;
import crack.time Time;
@import crack.ann define;

import crack.db.mongo_support OID;
import crack.ext._mongo
    // Function names
    bson_type_as_string,
    bson_new,
    bson_new_sized,
    bson_new_from_data,
    bson_finish,
    bson_reset,
    bson_free,
    bson_size,
    bson_data,
    bson_validate_key,

    bson_append_string,
    bson_append_double,
    bson_append_document,
    bson_append_array,
    bson_append_binary,
    bson_append_oid,
    bson_append_boolean,
    bson_append_utc_datetime,
    bson_append_null,
    bson_append_regex,

    bson_append_javascript,
    bson_append_symbol,
    bson_append_javascript_w_scope,
    bson_append_int32,
    bson_append_timestamp,
    bson_append_int64,
    bson_cursor_new,
    bson_find,
    bson_cursor_free,
    bson_cursor_next,

    bson_cursor_find_next,
    bson_cursor_find,
    bson_cursor_type,
    bson_cursor_type_as_string,
    bson_cursor_key,
    bson_cursor_get_string,
    bson_cursor_get_double,
    bson_cursor_get_document,
    bson_cursor_get_array,
    bson_cursor_get_oid,

    bson_cursor_get_boolean,
    bson_cursor_get_binary,
    bson_cursor_get_utc_datetime,
    bson_cursor_get_javascript,
    bson_cursor_get_symbol,
    bson_cursor_get_int32,
    bson_cursor_get_timestamp,
    bson_cursor_get_int64,
    mongo_sync_connect,
    mongo_sync_conn_seed_add,
    mongo_sync_reconnect,

    mongo_sync_disconnect,
    mongo_sync_conn_get_slaveok,
    mongo_sync_conn_set_slaveok,
    mongo_sync_conn_get_safe_mode,
    mongo_sync_conn_set_safe_mode,
    mongo_sync_conn_get_auto_reconnect,
    mongo_sync_conn_set_auto_reconnect,
    mongo_sync_conn_get_max_insert_size,
    mongo_sync_conn_set_max_insert_size,
    mongo_sync_cmd_update,

    mongo_sync_cmd_insert,
    mongo_sync_cmd_insert_n,
    mongo_sync_cmd_query,
    mongo_sync_cmd_get_more,
    mongo_sync_cmd_delete,
    mongo_sync_cmd_custom,
    mongo_sync_cmd_count,
    mongo_sync_cmd_exists,
    mongo_sync_cmd_drop,
    mongo_sync_cmd_reset_error,
    mongo_sync_cmd_is_master,

    mongo_sync_cmd_ping,
    mongo_sync_cmd_user_add,
    mongo_sync_cmd_user_remove,
    mongo_sync_cmd_authenticate,
    mongo_sync_cmd_index_create,
    mongo_sync_cmd_index_drop,
    mongo_sync_cmd_index_drop_all,
    mongo_wire_packet_new,
    mongo_wire_packet_free,
    mongo_sync_cursor_new,

    mongo_sync_cursor_next,
    mongo_sync_cursor_get_data,
    mongo_sync_cursor_free,
    mongo_sync_pool_new,
    mongo_sync_pool_free,
    mongo_sync_pool_pick,
    mongo_sync_pool_return,
    mongo_util_oid_init,
    mongo_util_oid_new,
    mongo_util_oid_new_with_time,

    mongo_util_oid_as_string,
    mongo_connect,
    mongo_disconnect,
    mongo_connection_get_requestid,
    mongo_connection_set_timeout,

    // Types
    bson, bson_cursor, mongo_connection, mongo_packet, mongo_sync_connection,
    mongo_sync_cursor, mongo_sync_pool, mongo_sync_pool_connection, bufStruct,

    // Constants
    BSON_BINARY_SUBTYPE_GENERIC, BSON_BINARY_SUBTYPE_FUNCTION,
    BSON_BINARY_SUBTYPE_BINARY, BSON_BINARY_SUBTYPE_UUID,
    BSON_BINARY_SUBTYPE_MD5, BSON_BINARY_SUBTYPE_USER_DEFINED, BSON_TYPE_NONE,
    BSON_TYPE_DOUBLE, BSON_TYPE_STRING, BSON_TYPE_DOCUMENT, BSON_TYPE_ARRAY,
    BSON_TYPE_BINARY, BSON_TYPE_OID, BSON_TYPE_BOOLEAN,
    BSON_TYPE_UTC_DATETIME, BSON_TYPE_NULL, BSON_TYPE_REGEXP,
    BSON_TYPE_JS_CODE, BSON_TYPE_SYMBOL, BSON_TYPE_JS_CODE_W_SCOPE,
    BSON_TYPE_INT32, BSON_TYPE_TIMESTAMP, BSON_TYPE_INT64,
    MONGO_COLLECTION_DEFAULTS, MONGO_COLLECTION_CAPPED,
    MONGO_COLLECTION_CAPPED_MAX, MONGO_COLLECTION_AUTO_INDEX_ID,
    MONGO_COLLECTION_SIZED, MONGO_INDEX_UNIQUE, MONGO_INDEX_DROP_DUPS,
    MONGO_INDEX_BACKGROUND, MONGO_INDEX_SPARSE,
    MONGO_WIRE_FLAG_QUERY_TAILABLE_CURSOR, MONGO_WIRE_FLAG_QUERY_SLAVE_OK,
    MONGO_WIRE_FLAG_QUERY_NO_CURSOR_TIMEOUT, MONGO_WIRE_FLAG_QUERY_AWAIT_DATA,
    MONGO_WIRE_FLAG_QUERY_EXHAUST, MONGO_WIRE_FLAG_QUERY_PARTIAL_RESULTS,
    MONGO_WIRE_FLAG_UPDATE_UPSERT, MONGO_WIRE_FLAG_UPDATE_MULTI;



int MONGO_CONN_LOCAL = -1;

class BSONOID : OID {
    oper init() : OID() { }
    oper init(Buffer newdata) : OID(newdata) { }

    oper init(bson_cursor c) : OID() {
        size = 12;
        if (bson_cursor_type(c) == BSON_TYPE_OID)
            memcpy(buffer, bson_cursor_get_oid(c), 12);
        else
            throw InvalidArgumentError(
                FStr() I`Constructing OID object from BSON type \
                         $(StaticString(bson_cursor_type_as_string(c)))`
            );
    }
}

bson _fromJSONObject(JSONObject jdo);
bson _fromJSONArray(JSONArray jdo);

bson _fromJSONObject(JSONObject jdo) {
    b := bson_new();
    uint cnt = 0;

    for (it :in jdo) {
        jo := it.val;
        key := CString(it.key);
        if (j := JSONObject.cast(jo, null)) {
            newb := _fromJSONObject(j);
            bson_finish(newb);
            bson_append_document(b, key.buffer, newb);
        } else if (j := JSONBool.cast(jo, null)) {
            bson_append_boolean(b, key.buffer, j.value);
        } else if (j := JSONFloat.cast(jo, null)) {
            bson_append_double(b, key.buffer, j.value);
        } else if (j := JSONInt.cast(jo, null)) {
            bson_append_int64(b, key.buffer, int64(j.value));
        } else if (j := JSONString.cast(jo, null)) {
            bson_append_string(b, key.buffer, j.buffer, int32(j.size));
        } else if (j := JSONArray.cast(jo, null)) {
            newb := _fromJSONArray(j);
            bson_finish(newb);
            bson_append_array(b, key.buffer, newb);
        }
        cnt++;
    }
    return b;
}

bson _fromJSONArray(JSONArray jdo) {
    b := bson_new();
    sfmt := FStr();
    uint cnt = 0;

    for (jo :in jdo) {
        key := CString(sfmt `$cnt`);
        if (j := JSONObject.cast(jo, null)) {
            newb := _fromJSONObject(j);
            bson_finish(newb);
            bson_append_document(b, key.buffer, newb);
        } else if (j := JSONBool.cast(jo, null)) {
            bson_append_boolean(b, key.buffer, j.value);
        } else if (j := JSONFloat.cast(jo, null)) {
            bson_append_double(b, key.buffer, j.value);
        } else if (j := JSONInt.cast(jo, null)) {
            bson_append_int64(b, key.buffer, int64(j.value));
        } else if (j := JSONString.cast(jo, null)) {
            bson_append_string(b, key.buffer, j.buffer, int32(j.size));
        } else if (j := JSONArray.cast(jo, null)) {
            newb := _fromJSONArray(j);
            bson_finish(newb);
            bson_append_array(b, key.buffer, newb);
        }
        cnt++;
    }
    return b;
}


class BSON {
    bson _b;
    int _type;
    Buffer _buf; // If we were passed a buffer, we need a reference to keep it
                 // from being freed

    // Create a new BSON object.
    oper init() : _b = bson_new(), _type = BSON_TYPE_DOCUMENT {
    }

    void _initType() {
        c := bson_cursor_new(_b);
        if (c !is null) {
            _type = bson_cursor_type(c);
            bson_cursor_free(c);
        }
    }

    // Wrapper constructor
    oper init(bson b) : _b = b, _type = BSON_TYPE_DOCUMENT {
        _initType();
    }

    // Create a new BSON object.
    oper init(int t) : _b = bson_new(), _type = t {
    }

    // Wrapper constructor
    oper init(bson b, int t) : _b = b, _type = t {
    }

    // Create a new BSON object, preallocating a given amount of space.
    oper init(int32 size) : _b = bson_new_sized(size),
                            _type = BSON_TYPE_DOCUMENT {
    }

    // Create a BSON object from existing data.
    oper init(byteptr data, int32 size) : _b = bson_new_from_data(data, size),
                                          _type = BSON_TYPE_DOCUMENT {
    }

    oper init(Buffer b) : _b = bson_new_from_data(b.buffer, int32(b.size)),
                          _type = BSON_TYPE_DOCUMENT,
                          _buf = b {
    }

    // Finish a BSON object.
    bool finish() {
        return bson_finish(_b);
    }

    // Reset a BSON object.
    bool reset() {
        return bson_reset(_b);
    }

    int type() {
        return _type;
    }

    // Free the memory associated with a BSON object.
    oper del() {
        if (_b !is null) bson_free(_b);
    }

    // Return the size of a finished BSON object.
    int32 size() {
        return bson_size(_b);
    }

    // Return the raw bytestream form of the BSON object.
    Buffer data() {
        return Buffer(bson_data(_b), uint(bson_size(_b)));
    }

    bson get_bson() { // using underscore to avoid confusion
        return _b;
    }

    // Validate a BSON key.
    @static
    bool validateKey(CString key, bool forbid_dots, bool no_dollar) {
        return bson_validate_key(key.buffer, forbid_dots, no_dollar);
    }

    @static BSON fromJSON(Buffer json) {
        parser := JSONParser();
        presult := parser.parse(json);

        if (presult.result is null)
            throw ParseException("failed to parse json document", 1, 1);

        jdo := JSONObject.cast(presult.result); // an OrderedHasmap[String, Object]
        bdo := BSON(_fromJSONObject(jdo));
        bdo.finish();
        return bdo;

    }

    // Append API --------------------------------------------------------------

    // Append a string to a BSON object.
    @final bool appendString(CString name, Buffer val) {
        return bson_append_string(_b, name.buffer, val.buffer,
                                  int32(val.size));
    }

    // Append a BSON document to a BSON object.
    @final bool appendDocument(CString name, BSON doc) {
        return bson_append_document(_b, name.buffer, doc.get_bson());
    }

    // Append a BSON array to a BSON object.
    @final bool appendArray(CString name, BSON arr) {
        return bson_append_array(_b, name.buffer, arr.get_bson());
    }

    // Append a BSON binary blob to a BSON object.
    @final bool appendBinary(CString name, int subtype, Buffer data) {
        return bson_append_binary(_b, name.buffer, subtype, data.buffer,
                                  int32(data.size));
    }

    // Append an ObjectID to a BSON object.
    @final bool appendOID(CString name, Buffer oid) {
        if (oid.size != 12) return false;
        return bson_append_oid(_b, name.buffer, oid.buffer);
    }

    // Append an ObjectID to a BSON object.
    @final bool appendOID(CString name, OID oid) {
        if (oid.size != 12) return false;
        return bson_append_oid(_b, name.buffer, oid.buffer);
    }

    // Append a boolean to a BSON object.
    bool appendBool(CString name, bool value) {
        return bson_append_boolean(_b, name.buffer, value);
    }

    // Append an UTC datetime to a BSON object.
    bool appendUTCDateTime(CString name, int64 ts) {
        return bson_append_utc_datetime(_b, name.buffer, ts);
    }

    // Append an UTC datetime to a BSON object.
    bool appendUTCDateTime(CString name, Time ts) {
        return bson_append_utc_datetime(_b, name.buffer,
                int64(ts.secs)*1000+int64(ts.nsecs)/1000000);
    }

    // Append a NULL value to a BSON object.
    bool appendNull(CString name) {
        return bson_append_null(_b, name.buffer);
    }

    // Append a regexp object to a BSON object.
    bool appendRegex(CString name, CString regexp, CString options) {
        return bson_append_regex(_b, name.buffer, regexp.buffer,
                                 options.buffer);
    }

    // Append Javascript code to a BSON object.
    bool appendJavascript(CString name, Buffer js) {
        return bson_append_javascript(_b, name.buffer, js.buffer,
                                      int32(js.size));
    }

    // Append a symbol to a BSON object.
    bool appendSymbol(CString name, Buffer symbol) {
        return bson_append_symbol(_b, name.buffer, symbol.buffer,
                                  int32(symbol.size));
    }

    // Append Javascript code(with scope) to a BSON object.
    bool appendJavascriptScope(CString name, Buffer js, BSON scope) {
        return bson_append_javascript_w_scope(_b, name.buffer, js.buffer,
                                              int32(js.size), scope.get_bson());
    }

    // Append a double to a BSON object.
    bool appendFloat64(CString name, float64 d) {
        return bson_append_double(_b, name.buffer, d);
    }

    // Append a 32-bit integer to a BSON object.
    bool appendInt32(CString name, int32 i) {
        return bson_append_int32(_b, name.buffer, i);
    }

    // Append a timestamp to a BSON object.
    bool appendTimeStamp(CString name, int64 ts) {
        return bson_append_timestamp(_b, name.buffer, ts);
    }

    // Append a 64-bit integer to a BSON object.
    bool appendInt64(CString name, int64 i) {
        return bson_append_int64(_b, name.buffer, i);
    }

    // This class should not really be used directly
    class BSONCursor {
        bson_cursor _c;
        bson _ib;
        BSON _B;

        // Create  cursor positioned at the beginning of the document
        oper init(BSON B) : _B = B {
            _ib = B.get_bson();
            _c = bson_cursor_new(_ib);
        }

        // Create a new cursor positioned at a given key.
        oper init(BSON B, CString name) : _B = B {
            _ib = B.get_bson();
            _c = bson_find(_ib, name.buffer);
        }

        // Delete a cursor, and free up all resources used by it.
        oper del() {
            bson_cursor_free(_c);
        }

        // Position the cursor to the next key.
        bool next() {
            return bson_cursor_next(_c);
        }

        // Move the cursor to a given key, past the current one.
        bool findNext(CString name) {
            return bson_cursor_find_next(_c, name.buffer);
        }

        // Move the cursor to a given key.
        bool find(CString name) {
            return bson_cursor_find(_c, name.buffer);
        }

        // Determine the type of the current element.
        int tpe() {
            return bson_cursor_type(_c);
        }

        // Retrieve the type of the current element, as string.
        CString typeString(){
            return CString(bson_cursor_type_as_string(_c), false);
        }

        // Determine the name of the current elements key.
        CString key() {
            return CString(bson_cursor_key(_c), false);
        }

        // Get the value stored at the cursor, as string.
        CString getString() {
            return CString(bson_cursor_get_string(_c), false);
        }

        // Get the value stored at the cursor, as a double.
        float64 getFloat64() {
            return bson_cursor_get_double(_c);
        }

        // Get the value stored at the cursor, as a BSON document.
        BSON getDocument() {
            return BSON(bson_cursor_get_document(_c), BSON_TYPE_DOCUMENT);
        }

        // Get the value stored at the cursor, as a BSON array.
        BSON getArray() {
            return BSON(bson_cursor_get_array(_c), BSON_TYPE_ARRAY);
        }

        // Get the value stored at the cursor, as an ObjectID.
        CString getOID() {
            return CString(bson_cursor_get_oid(_c), false);
        }

        // Get the value stored at the cursor, as a boolean.
        bool getBool() {
            return bson_cursor_get_boolean(_c);
        }

        // Get the value stored at the cursor, as a boolean.
        String getBinary() {
            String crackBuf;
            bufStruct b = bson_cursor_get_binary(_c);
            if (b !is null) {
                crackBuf = String(b.data, b.size, true);
                free(b); // Keep the data, not the container
            }
            return crackBuf;
        }

        // Get the value stored at the cursor, as an UTC datetime.
        Time getUTCDateTime(){
            millisecs := bson_cursor_get_utc_datetime(_c);
            s := millisecs/1000;
            return Time(int32(s), int32((millisecs - s*1000)*1000000));
        }

        // Get the value stored at the cursor, as javascript code.
        CString getJavascript() {
             return CString(bson_cursor_get_javascript(_c),false);
        }

        // Get the value stored at the cursor, as a symbol.
        CString getSymbol(){
            return CString(bson_cursor_get_symbol(_c), false);
        }

        // Get the value stored at the cursor, as a 32-bit integer.
        int32 getInt32() {
            return bson_cursor_get_int32(_c);
        }

        // Get the value stored at the cursor, as a timestamp.
        int64 getTimeStamp() {
            return bson_cursor_get_timestamp(_c);
        }

        // Get the value stored at the cursor, as a 64-bit integer.
        int64 getInt64() {
            return bson_cursor_get_int64(_c);
        }
    }

   void formatTo(Formatter fmt) {
        if (_type == BSON_TYPE_ARRAY) fmt.write("[");
        else fmt.write("{");

        cursor := BSONCursor(this);
        first := true;

        while (cursor.next()) {
            if (!first) fmt.write(", ");
            else first = false;

            if (_type != BSON_TYPE_ARRAY)
                fmt `"$(cursor.key())": `;
            t := cursor.tpe();

            if (t == BSON_TYPE_NONE) fmt.write("NONE");
            else if (t == BSON_TYPE_DOUBLE) fmt `$(cursor.getFloat64())`;
            else if (t == BSON_TYPE_STRING) fmt `"$(cursor.getString())"`;
            else if (t == BSON_TYPE_ARRAY) fmt `$(cursor.getArray())`;
            else if (t == BSON_TYPE_DOCUMENT) fmt `$(cursor.getDocument())`;
            else if (t == BSON_TYPE_BINARY) fmt `$(encode(cursor.getBinary(), 78))`;
            else if (t == BSON_TYPE_OID) fmt `"$(hex(cursor.getOID()))"`;
            else if (t == BSON_TYPE_BOOLEAN) fmt.write(cursor.getBool() ? "true" : "false");
            else if (t == BSON_TYPE_UTC_DATETIME) fmt `$(cursor.getUTCDateTime())`;
            else if (t == BSON_TYPE_NULL) fmt.write("null");
            else if (t == BSON_TYPE_JS_CODE) fmt `<code>$(cursor.getJavascript())</code>`;
            else if (t == BSON_TYPE_SYMBOL) fmt `$(cursor.getSymbol())`;
            else if (t == BSON_TYPE_INT32)  fmt `$(cursor.getInt32())`;
            else if (t == BSON_TYPE_TIMESTAMP) fmt `$(cursor.getTimeStamp())`;
            else if (t == BSON_TYPE_INT64) fmt `$(cursor.getInt64())`;
            else fmt `<$(cursor.typeString())>`;
        }

        if (_type == BSON_TYPE_ARRAY)
            fmt.write("]");
        else
            fmt.write("}");
    }

    BSONCursor cursor() {
        return BSONCursor(this);
    }

}

class MongoSync {
    mongo_sync_connection _m;
    bool _owner = true;

    void _checkConnected() {
        if (_m is null) throw InvalidStateError("Not connected");
    }

    // Synchronously connect to a MongoDB server.
    oper init(CString address, int port, bool slaveOK) :
            _m = mongo_sync_connect(address.buffer, port, slaveOK) {
    }

    mongo_sync_connection get_mongo() {
        return _m;
    }

    oper init (mongo_sync_connection m) : _m = m {
        _owner = false;
    }

    oper init (mongo_sync_connection m, bool takeOwnership) : _m = m {
        _owner = takeOwnership ;
    }

    bool connect(CString address, int port, bool slaveOK) {
        if (_m !is null)
            throw InvalidStateError("Already connected");
        _m = mongo_sync_connect(address.buffer, port, slaveOK);
        return _m !is null;
    }

    // Add a seed to an existing MongoDB connection.
    bool addSeed(CString host, int port) {
        _checkConnected();
        return mongo_sync_conn_seed_add(_m, host.buffer, port);
    }

    // Attempt to connect to another member of a replica set.
    MongoSync reconnect(bool forceMaster) {
        _checkConnected();
        return MongoSync(mongo_sync_reconnect(_m, forceMaster));
    }

    // Close and free a synchronous MongoDB connection.
    void disconnect() {
        if (_m !is null) mongo_sync_disconnect(_m);
        _m = null;
    }

    oper del(){
        if (_owner) disconnect();
    }

    // Retrieve the state of the SLAVE_OK flag from a sync connection.
    bool getSlaveOK() {
        _checkConnected();
        return  mongo_sync_conn_get_slaveok(_m);
    }

    // Set the SLAVE_OK flag on a sync connection.
    bool setSlaveOK(bool slaveOK) {
        _checkConnected();
        return mongo_sync_conn_set_slaveok(_m, slaveOK);
    }

    // Retrieve the state of the safe mode flag from a sync connection.
    bool getSafeMode() {
        _checkConnected();
        return mongo_sync_conn_get_safe_mode(_m);
    }

    // Set the safe mode flag on a sync connection.
    bool setSafeMode(bool safeMode) {
        _checkConnected();
        return mongo_sync_conn_set_safe_mode(_m, safeMode);
    }

    // Get the state of the auto-reconnect flag from a sync connection.
    bool getAutoReconnect() {
        _checkConnected();
        return mongo_sync_conn_get_auto_reconnect(_m);
    }

    // Set the state of the auto-reconnect flag on a sync connection.
    bool setAutoReconnect(bool autoReconnect) {
        _checkConnected();
        return mongo_sync_conn_set_auto_reconnect(_m, autoReconnect);
    }

    // Get the maximum size of a bulk insert package.
    int32 getMaxInsertSize() {
        _checkConnected();
        return mongo_sync_conn_get_max_insert_size(_m);
    }

    // Set the maximum size of a bulk insert package.
    bool setMaxInsertSize(int32 maxSize) {
        _checkConnected();
        return mongo_sync_conn_set_max_insert_size(_m, maxSize);
    }

    // Command methods
    // Send an update command to MongoDB.
    bool update(CString ns, int32 flags, BSON selector, BSON update) {
        _checkConnected();
        return mongo_sync_cmd_update(_m, ns.buffer, flags,
                                     selector.get_bson(), update.get_bson()
                                     );
    }

    // Send an update command to MongoDB.
    bool update(CString ns, int32 flags, String selector, String update) {
        _checkConnected();
        return mongo_sync_cmd_update(_m, ns.buffer, flags,
                                     BSON.fromJSON(selector).get_bson(),
                                     BSON.fromJSON(update).get_bson()
                                     );
    }

    // Send an insert command to MongoDB.
    bool insert(CString ns, BSON doc) {
        _checkConnected();
        return mongo_sync_cmd_insert(_m, ns.buffer, doc.get_bson());
    }

    // Send an insert command to MongoDB from a JSON document.
    bool insert(CString ns, String doc) {
        _checkConnected();
        return mongo_sync_cmd_insert(_m, ns.buffer,
                                     BSON.fromJSON(doc).get_bson());
    }

    // Send an insert command to MongoDB.
    bool insertN(CString ns, int32 n, BSON docs) {
        _checkConnected();
        return mongo_sync_cmd_insert_n(_m, ns.buffer, n, docs.get_bson());
    }

    // Send a delete command to MongoDB.
    bool delete(CString ns, int32 flags, BSON sel) {
        _checkConnected();
        return mongo_sync_cmd_delete(_m, ns.buffer, flags, sel.get_bson());
    }

    // Send a delete command to MongoDB.
    bool delete(CString ns, int32 flags, String sel) {
        _checkConnected();
        return mongo_sync_cmd_delete(_m, ns.buffer, flags,
                                     BSON.fromJSON(sel).get_bson());
    }

    // Send a custom command to MongoDB. TODO add
    // mongo_packet mongo_sync_cmd_custom(mongo_sync_connection conn, byteptr db,
    //                                    bson command);

    // Send a count() command to MongoDB.
    uint count(CString db, CString coll, BSON query) {
        _checkConnected();
        return uint(mongo_sync_cmd_count(_m, db.buffer,
                    coll.buffer, query.get_bson())
                    );
    }

    // Send a count() command to MongoDB.
    uint count(CString db, CString coll, String query) {
        _checkConnected();
        return uint(mongo_sync_cmd_count(_m, db.buffer, coll.buffer,
                    BSON.fromJSON(query).get_bson())
                    );
    }

    // Create a new MongoDB collection. TODO bind
    // bool mongo_sync_cmd_create(mongo_sync_connection conn, byteptr db,
    //                            byteptr coll, int flags,...);

    // Check whether a collection exists in MongoDB.
    BSON exists(CString db, CString coll) {
        _checkConnected();
        return BSON(mongo_sync_cmd_exists(_m, db.buffer, coll.buffer));
    }

    // Send a drop() command to MongoDB.
    bool drop(CString db, CString coll) {
        _checkConnected();
        return mongo_sync_cmd_drop(_m, db.buffer, coll.buffer);
    }

    // Get the last error from MongoDB. TODO wrap
    //  bool mongo_sync_cmd_get_last_error(mongo_sync_connection conn, byteptr db,
    //                                      array[byteptr] error);

    // Reset the last error variable in MongoDB.
    bool resetError(CString db) {
        _checkConnected();
        return mongo_sync_cmd_reset_error(_m, db.buffer);
    }

    // Check whether the current node is the master.
    bool isMaster() {
        _checkConnected();
        return mongo_sync_cmd_is_master(_m);
    }

    // Send a PING command to MongoDB.
    bool ping() {
        _checkConnected();
        return mongo_sync_cmd_ping(_m);
    }

    // Add a user to MongoDB.
    bool addUser(CString db, CString user, CString pw) {
        _checkConnected();
        return mongo_sync_cmd_user_add(_m, db.buffer, user.buffer, pw.buffer);
    }

    // Remove a user from MongoDB.
    bool removeUser(CString db, CString user) {
        _checkConnected();
        return mongo_sync_cmd_user_remove(_m, db.buffer, user.buffer);
    }

    // Authenticate a user with MongoDB.
    bool authUser(CString db, CString user, CString pw) {
        _checkConnected();
        return mongo_sync_cmd_authenticate(_m, db.buffer, user.buffer, pw.buffer);
    }

    // Create an index.
    bool createIndex(CString ns, BSON key, int options) {
        _checkConnected();
        return mongo_sync_cmd_index_create(_m, ns.buffer, key.get_bson(), options);
    }

    // Drop an index.
    bool dropIndex(CString ns, BSON key) {
        _checkConnected();
        return mongo_sync_cmd_index_drop(_m, ns.buffer, key.get_bson());
    }

    // Drop all indexes from a namespace.
    bool dropIndexAll(CString ns) {
        _checkConnected();
        return mongo_sync_cmd_index_drop_all(_m, ns.buffer);
    }

    class MongoSyncCursor {
        mongo_sync_cursor _c;
        mongo_packet _p;
        MongoSync _M;
        bool _hasNext;

        oper init(MongoSync M, CString ns, mongo_packet p) : _p = p, _M = M {
            if (_p is null) {
                _hasNext = false;
                return;
            }
            _c = mongo_sync_cursor_new(_M.get_mongo(), ns.buffer, p);
            if (_c is null)
                throw AssertionError("Unable to create cursor");
            _hasNext = true;
        }

        bool next() {
            if (_p is null) return false;
            _hasNext = mongo_sync_cursor_next(_c);
            return _hasNext;
        }

        BSON data() {
            if (_p is null) return null;
            return BSON(mongo_sync_cursor_get_data(_c));
        }

        MongoSyncCursor iter() {
            return this;
        }

        BSON elem() {
            return data();
        }

        bool isTrue() {
            return _hasNext;
        }


        oper del() {
            if (_c !is null)
                mongo_sync_cursor_free (_c);
        }
    }

    /// Send a query command to MongoDB
    /// ns     database namespace in the form db.collection
    /// flags
    ///     MONGO_WIRE_FLAG_QUERY_TAILABLE_CURSOR
    ///         Set the TailableCursor flag on the query.
    ///
    ///      MONGO_WIRE_FLAG_QUERY_SLAVE_OK
    ///         Allow queries made against a replica slave.
    ///
    ///      MONGO_WIRE_FLAG_QUERY_NO_CURSOR_TIMEOUT
    ///         Disable cursor timeout.
    ///
    ///      MONGO_WIRE_FLAG_QUERY_AWAIT_DATA
    ///         Block if at the end of the data block, awaiting data.
    ///         Use only with MONGO_WIRE_FLAG_QUERY_TAILABLE_CURSOR!
    ///
    ///      MONGO_WIRE_FLAG_QUERY_EXHAUST
    ///         Stream the data down full blast in multiple packages.
    ///         When set, the client is not allowed not to read all the data,
    ///         unless it closes connection.
    ///
    ///      MONGO_WIRE_FLAG_QUERY_PARTIAL_RESULTS
    ///         Allow partial results in a sharded environment.
    ///         In case one or more required shards are down, with this flag set,
    ///         partial results will be returned instead of failing.
    /// skip   number of results to skip
    /// ret    number of documents to return
    /// query  the bson-formatted query
    /// sel    bson-formatted selector
    @final
    MongoSyncCursor query(CString ns, int32 flags, int32 skip, int32 ret,
                          BSON query, BSON sel) {
        bson bquery = query is null ? bson_new() : query.get_bson();
        bson bsel;
        if (sel !is null) bsel =  sel.get_bson();

        p := mongo_sync_cmd_query (_m, ns.buffer, flags, skip, ret, bquery, bsel);
        if (query is null) bson_free(bquery);
        return MongoSyncCursor(this, ns, p);
    }

    @final
    MongoSyncCursor query(CString ns, int32 flags, int32 skip, int32 ret,
                          String squery, String sel) {
        BSON bquery, bsel;
        if (squery) bquery = BSON.fromJSON(squery);
        if (sel) bsel = BSON.fromJSON(sel);
        return query(ns, flags, skip, ret, bquery, bsel);
    }

    // Send a get more command to MongoDB
    @final
    MongoSyncCursor more(CString ns, int32 ret, int64 cursor_id) {
        p := mongo_sync_cmd_get_more(_m, ns.buffer, ret, cursor_id);
        return MongoSyncCursor(this, ns, p);
    }
}

@export_symbols BSON_BINARY_SUBTYPE_GENERIC, BSON_BINARY_SUBTYPE_FUNCTION,
    BSON_BINARY_SUBTYPE_BINARY, BSON_BINARY_SUBTYPE_UUID,
    BSON_BINARY_SUBTYPE_MD5, BSON_BINARY_SUBTYPE_USER_DEFINED, BSON_TYPE_NONE,
    BSON_TYPE_DOUBLE, BSON_TYPE_STRING, BSON_TYPE_DOCUMENT, BSON_TYPE_ARRAY,
    BSON_TYPE_BINARY, BSON_TYPE_OID, BSON_TYPE_BOOLEAN,
    BSON_TYPE_UTC_DATETIME, BSON_TYPE_NULL, BSON_TYPE_REGEXP,
    BSON_TYPE_JS_CODE, BSON_TYPE_SYMBOL, BSON_TYPE_JS_CODE_W_SCOPE,
    BSON_TYPE_INT32, BSON_TYPE_TIMESTAMP, BSON_TYPE_INT64,
    MONGO_COLLECTION_DEFAULTS, MONGO_COLLECTION_CAPPED,
    MONGO_COLLECTION_CAPPED_MAX, MONGO_COLLECTION_AUTO_INDEX_ID,
    MONGO_COLLECTION_SIZED, MONGO_INDEX_UNIQUE, MONGO_INDEX_DROP_DUPS,
    MONGO_INDEX_BACKGROUND, MONGO_INDEX_SPARSE,
    MONGO_WIRE_FLAG_QUERY_TAILABLE_CURSOR, MONGO_WIRE_FLAG_QUERY_SLAVE_OK,
    MONGO_WIRE_FLAG_QUERY_NO_CURSOR_TIMEOUT, MONGO_WIRE_FLAG_QUERY_AWAIT_DATA,
    MONGO_WIRE_FLAG_QUERY_EXHAUST, MONGO_WIRE_FLAG_QUERY_PARTIAL_RESULTS,
    MONGO_WIRE_FLAG_UPDATE_UPSERT, MONGO_WIRE_FLAG_UPDATE_MULTI;


