/*
 Copyright (c) 2011, Micael Hildenborg
 All rights reserved.

 Crack version
 Copyright 2012 Conrad D. Steenberg <conrad.steenberg@gmail.com>
 12/26/2012

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Micael Hildenborg nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY Micael Hildenborg ''AS IS'' AND ANY
 EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 DISCLAIMED. IN NO EVENT SHALL Micael Hildenborg BE LIABLE FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 Contributors:
 Gustav
 Several members in the gamedev.se forum.
 Gregory Petrosyan
 */


import crack.cont.array Array;
import crack.ascii radix;
import crack.hash Hash;
import crack.lang AppendBuffer, Buffer, ManagedBuffer, InvalidStateError;
import crack.runtime free, INT_SIZE;
@import crack.ann define;


// Rotate an integer value to left.
uint32 _rol(uint32 value, uint32 steps) {
    return ((value << steps) | (value >> (32 - steps)));
}

// Sets the first 16 integers in the buffert to zero.
// Used for clearing the W buffert.
void _clearWBuffert(array[uint32] buffert)
{
    for (uint pos = 0; pos < 16; pos++)
    {
        buffert[pos] = 0;
    }
}

@define sha1macro(func, val) {
    if (true) {
        uint32 t = _rol(a, 5) + (func) + e + val + w[round];
        e = d;
        d = c;
        c = _rol(b, 30);
        b = a;
        a = t;
    }
}

void innerHash(array[uint32] result, array[uint32] w) {
    uint32 a = result[0];
    uint32 b = result[1];
    uint32 c = result[2];
    uint32 d = result[3];
    uint32 e = result[4];

    uint32 round = 0;

    while (round < 16) {
        @sha1macro((b & c) | (~b & d), 0x5a827999)
        ++round;
    }

    while (round < 20) {
        w[round] = _rol((w[round - 3] ^ w[round - 8] ^ w[round - 14] ^ w[round - 16]), 1);
        @sha1macro((b & c) | (~b & d), 0x5a827999);
        ++round;
    }

    while (round < 40) {
        w[round] = _rol((w[round - 3] ^ w[round - 8] ^ w[round - 14] ^ w[round - 16]), 1);
        @sha1macro(b ^ c ^ d, 0x6ed9eba1);
        ++round;
    }

    while (round < 60) {
        w[round] = _rol((w[round - 3] ^ w[round - 8] ^ w[round - 14] ^ w[round - 16]), 1);
        @sha1macro((b & c) | (b & d) | (c & d), 0x8f1bbcdc);
        ++round;
    }

    while (round < 80) {
        w[round] = _rol((w[round - 3] ^ w[round - 8] ^ w[round - 14] ^ w[round - 16]), 1);
        @sha1macro(b ^ c ^ d, 0xca62c1d6);
        ++round;
    }

    result[0] = result[0] + a;
    result[1] = result[1] + b;
    result[2] = result[2] + c;
    result[3] = result[3] + d;
    result[4] = result[4] + e;
}


// SHA1 class implements a Hash
class SHA1 : Hash {
    ManagedBuffer hash;
    array[uint32] result = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476,
                            0xc3d2e1f0];
    array[uint32] w = {80};
    AppendBuffer src = {1024};
    uint32 totalSize;

    oper del() {
        free(w);
        free(result);
    }

    void _clear() {
        h := hash.buffer;
        if (h !is null && hash.size >= 20) {
            for (uint32 i=0; i < 20; i++)
                h[i] = 0;
        }
    }

    void __processBuffer() {
        // Cast the src pointer to be the byte array we can work with.
        sarray := src.buffer;
        bytelength := src.size;

        // Loop through all complete 64byte blocks.
        int endOfFullBlocks = bytelength & ~0x3F;
        int endCurrentBlock;
        int currentBlock = 0;

        while (currentBlock < endOfFullBlocks) {
            endCurrentBlock = currentBlock + 64;

            // Init the round buffer with the 64 byte block data.
            for (uint32 roundPos = 0; currentBlock < endCurrentBlock;
                 currentBlock += 4) {
                // This line will swap endian on big endian and keep endian on
                // little endian.
                w[roundPos++] = uint32(sarray[currentBlock + 3])
                        | (uint32(sarray[currentBlock + 2]) << 8)
                        | (uint32(sarray[currentBlock + 1]) << 16)
                        | (uint32(sarray[currentBlock]) << 24);
            }
            innerHash(result, w);
        }

        src.compact(endOfFullBlocks);
        totalSize += uint32(endOfFullBlocks);
    }

    void __finish() {
        totalSize += uint32(src.size);
        sarray := src.buffer;

        // The reusable round buffer
        _clearWBuffert(w);

        uint32 lastBlockBytes, wi;
        while (lastBlockBytes < src.size)  {
            wi = lastBlockBytes >> 2;
            w[wi] = w[wi] | (uint32(sarray[lastBlockBytes]) <<
                             ((3 - (lastBlockBytes & 3)) << 3));
            ++lastBlockBytes
        }

        wi = lastBlockBytes >> 2;
        w[wi] = w[wi] | 0x80 << ((3 - (lastBlockBytes & 3)) << 3);

        if (src.size >= 56) {
            innerHash(result, w);
            _clearWBuffert(w);
        }

        w[15] = totalSize << 3;
        h := hash.buffer;
        innerHash(result, w);

        // Store hash in result pointer, and make sure we get in in the
        // correct order on both endian models.
        for (uint32 hashByte = 0; hashByte < 20; hashByte++) {
            h[hashByte] = byte((result[hashByte >> 2] >>
                                (((3 - hashByte) & 0x3) << 3)) &
                            0xff
                            );
        }

        // Remove the source buffer so we know that we've processed the final
        // block.
        src = null;
    }

    oper init() : hash(20) {
        _size = 20;
        hash.size = 20;
    }

    // Add more data
    void update(Buffer buf) {
        if (src is null)
            throw InvalidStateError('Last block has already been processsed.');
        src.extend(buf);
        __processBuffer();
    }

    // Alternative constructor taking a buffer argument
    oper init(Buffer buf) : hash(20) {
        _size = 20;
        hash.size = 20;
        update(buf);
    }

    // Return raw digest as a buffer of 20 bytes
    String digest() {
        if (src !is null)
            __finish();
        return String(hash, false);
    }
}
