## IRC library
## Copyright 2012 Shannon Weyrick <weyrick@mozek.us>
##
## This Source Code Form is subject to the terms of the Mozilla Public
## License, v. 2.0. If a copy of the MPL was not distributed with this
## file, You can obtain one at http://mozilla.org/MPL/2.0/.
##

import crack.ascii wsplit;
import crack.cont.hashmap HashMap;
import crack.io cerr, cout, FStr, StringReader, StringWriter;
import crack.io.readers LineReader;
import crack.lang Formatter;
import crack.net resolve, InetAddress, Poller, PollEvent, Socket, AF_INET,
    POLLIN, SOCK_STREAM;
import crack.regex Regex;
import crack.strutil split, StringArray;
import crack.time TimeDelta;

class User {

    String nick, userName = "", realName = "";

    oper init(String n) : nick = n {
        // strip leading @
        if (nick.size && nick[0] == b'@')
            nick = nick.substr(1);
    }

    oper init(String n, String un, String rn) :
        nick = n,
        userName = un,
        realName = rn {
    }

    // from raw string like: GRiD!GRiD@hospoda.mozek.us
    @static User createFromRaw(String raw) {
        parts1 := split(raw, "@");
        if (!parts1.count())
            return null;
        parts2 := split(parts1[0], "!");
        if (!parts2.count())
            return null;
        return User(parts2[0], parts2[1], "");
    }

    void formatTo(Formatter fmt) {
        fmt `User [$nick] [$userName] [$realName]`;
    }
}

class Channel {

    String name;
    String topic = "";
    String mode = "";

    HashMap[String, User] userList = {};

    oper init(String n): name = n {}

    void addUser(User u) {
        userList[u.nick] = u;
    }

    void removeUser(User u) {
        userList.delete(u.nick);
    }

    void formatTo(Formatter fmt) {
        fmt `Channel [$name] [$topic]\n$userList`;
    }
}

class Client {

    String _serverName;
    uint _port;
    InetAddress _addr;
    Socket _sock;
    Poller _poller;

    bool _connected; // true if we receive RPL_WELCOME
    Formatter _debug; // dump raw output

    Regex _rx_parse;

    User _me;
    HashMap[String, Channel] _channelList = {};

    oper init(String serverName, uint port, String nick, String userName,
              String realName
              ) :
        _me(nick, userName, realName),
        _serverName = serverName,
        _port = port,
        // regex courtesy of:
        // http://calebdelnay.com/blog/2010/11/parsing-the-irc-message-format-as-a-client
        _rx_parse("^(:(?<prefix>\\S+) )?(?<command>\\S+)( (?!:)"
                   "(?<params>.+?))?( :(?<trail>.+))?$"
                  ) {
    }

    void _send(String data) {
        _debug `[WRITE]: $data`;
        _sock.write(data);
        _sock.write("\n");
    }

    /// Called when a new user joins a channel.  Derived classes / may
    //implement, base class version does nothing.
    void _onJoin(User user, Channel channel) {}

    /// Called when a user leaves a channel.  Derived classes / may
    //implement, base class version does nothing.
    void _onPart(User user, Channel channel) {}

    void __doJoin(String source, String channelName) {
        user := User.createFromRaw(source);
        if (user is null) {
            _debug `unable to parse raw source: $source`;
            return;
        }
        Channel channel = _channelList.get(channelName);
        if (!channel) {
            channel = Channel(channelName);
            _channelList[channelName] = channel;
        }
        channel.addUser(user);
        if (user.nick != _me.nick)
            _onJoin(user, channel);
    }

    void __doPart(String source, String channelName) {
        user := User.createFromRaw(source);
        if (user is null) {
            _debug `unable to parse raw source: $source`;
            return;
        }
        Channel channel;
        if (!(channel = _channelList.get(channelName))) {
            _debug `ASSERT: part from channel we don't have`;
            return;
        }
        channel.removeUser(user);
        _onPart(user, channel);
    }

    /// Called when a private message is received.  Derived classes may
    /// override, base class version does nothing.
    void _onPrivMsg(String source, String target, String msg) {}

    /// Called when the connection is established (including the initial
    /// handshake).  Derived classes may implement, base class version does
    /// nothing.
    void _onConnect() {}

    void _dispatch(String prefix, String command, StringArray params,
                   String trail
                   ) {
        _debug `[READ ]: [$prefix] [$command] $params [$trail]`;
        if (command == "001") {
            // RPL_WELCOME: we are now connected
            _connected = true;
            _onConnect();
        } else if (command == "353") {
            // NAMES reply (also happens on join)
            //:irc.roadsend.com 353 crack| @ #crack-lang :crack| @GRiD
            if (params.count() == 3 &&
                (channel := _channelList.get(params[2]))) {
                uList := wsplit(trail);
                for (uString :in uList) {
                    if (_me.nick != uString)
                        channel.addUser(User(uString));
                }
                cout `channel now has: $(channel)\n`;
            }
        } else if (command == "PING") {
            _send(FStr() `PONG :$trail`);
        } else if (command == "JOIN") {
            if (params.count() > 0 &&
                params[0].size > 0 &&
                params[0][0] == b'#'
                )
                __doJoin(prefix, params[0]);
            else
                __doJoin(prefix, trail);
        } else if (command == "PART") {
            if (params.count() > 0)
                __doPart(prefix, params[0]);
        } else if (command == "PRIVMSG") {
            if (params.count() > 0)
                _onPrivMsg(prefix, params[0], trail);
        }
    }

    /// poll socket and process any incoming messages
    /// will not block
    void processOnce(TimeDelta timeout) {
        _poller.wait(timeout);
        e := _poller.nx();
        if (e !is null && e.revents & POLLIN) {
            lr := LineReader(_sock);
            String s;
            while (s = lr.readLine()) {
                //log(s);
                m := _rx_parse.search(s.rtrim());
                if (m)
                    _dispatch(m.group("prefix"), m.group("command"),
                              wsplit(m.group("params")),
                              m.group("trail")
                              );
                else
                    _debug `_process FAIL: [$s]`;
            }
        }
    }

    /// Connect to the first server that answers and communicate until we are
    /// connected.
    bool connect() {
        _debug `connecting to $_serverName`;

        alist := resolve(_serverName);
        if (alist.count() == 0) {
            _debug `unable to resolve`;
            return false;
        }

        for (adr :in alist) {
            _addr := InetAddress(InetAddress.cast(adr), _port);
            _debug `trying $_addr`;
            _sock = Socket(AF_INET, SOCK_STREAM, 0);
            if (_sock.connect(_addr)) {
                _sock.setNonBlocking(true);
                _send(FStr() `NICK $(_me.nick)`);
                _send(FStr() `USER $(_me.userName) host server $(_me.realName)`);
                _poller = Poller();
                _poller.add(_sock, POLLIN);
                // process until we get RPL_WELCOME
                // this forces a connection before any other commands
                // are sent
                // XXX need some sort of timeout here
                while (!_connected)
                    processOnce(TimeDelta(0,0));
                return true;
            }
        }

        _debug `unable to connect`;
        return false;
    }

    /// Join the specified channel.
    void join(String channel) {
        _send(FStr() `JOIN $channel`);
    }

    /// Send the message to the specified channel.  Also can be used to send a
    /// private message to a specific user.
    void say(String channel, String msg) {
        _send(FStr() `PRIVMSG $channel :$msg`);
    }

    /// Returns true if we're connected to the network (this implies a TCP
    /// connection that has also gone through the initialization handshake).
    bool isConnected() { return _connected; }

    String getServerName() { return _serverName; }

    HashMap[String, Channel] getChannelList() { return _channelList; }
}

