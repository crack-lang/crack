## High-level communication module.
##
## This provides commonly used functionality for buffer handling, connection
## listening and logging.
##
## Example client:
##
##     class MyHandler @impl UserHandler {
##         void process(Connection comm) {
##             cout `got data: $(comm.inBuf)\n`;
##             comm.inBuf.compact(comm.inBuf.size);
##         }
##
##         void terminate(Connection comm) {
##             # Use this to do any special processing when the connection has
##             # been closed
##             cout `terminated\n`;
##         }
##
##         void addResponder(Object responder) {
##             # Use this to add a callback or waiter, e.g.
##             # waiter = WaiterFor[int, String].cast(responder);
##         }
##     }
##
##     comm := Comm(Log(null, null, cerr, cerr, cerr, 'client'));
##     comm.start();
##     connection := comm.connect(InetAddress(127, 0, 0, 1, 1234), MyHandler());
##     conn := comm.connect(InetAddress(127, 0, 0, 1, 1234), MyHandler());
##     # You can also call getSyncProxy(), if you've implemented
##     # addResponder() with a Waiter.
##     conn.write('message to server!');
##
## Example server:
##
##    class MyHandler @impl UserHandler {
##        void process(Connection comm) {
##            cout `got data from client: $(comm.inBuf)\n`;
##
##            # send it back.
##            comm.write(comm.inBuf);
##
##            # Consume it.
##            comm.inBuf.compact(comm.inBuf.size);
##        }
##
##        void terminate(Connection comm) {
##            cout `terminated\n`;
##        }
##
##        void addResponder(Object responder) {
##            # Use this to add a callback or waiter, e.g.
##            # waiter = WaiterFor[int, String].cast(responder);
##            # On the server side, this can be used to send synchronous
##            # messages back to the client.
##        }
##    }
##
##    class MyHandlerFactory @impl ConnectionFactory {
##        Connection makeConnection(NewConnection conn) {
##            return Connection(conn.log, MyHandler());
##        }
##    }
##
##    comm := Comm(Log(null, null, cerr, cerr, cerr, 'client'));
##    comm.start();
##    comm.startServer(InetAddress(127, 0, 0, 1, 1234), MyHandlerFactory(),
##                     /* reuse address: */ true
##                     );
##
##
##    UserHandler uh = makeUserHandler()
##
## These examples both use the Comm object to use proxies and to start a
## background poller thread.  For more control, you can create the underlying
## objects directly, though the basic mechanism of defining a UserHandler for
## processing incoming data and a ConnectionFactory on the server side for
## responding to new connections remains the same.
##
## It is important to note that the Connection and CommDispatcher classes are
## not thread-safe.  To interact with them from another thread, you'll need to
## provide some sort of messaging system to the poller thread, possibly along
## with some synchronization mechanisms (this is part of what Comm buys you).

import crack.cont.array Array;
import crack.eventmgr EventCallback, EventManager, EventManagerBackRef;
import crack.functor Functor1;
import crack.io cerr, Formatter, FStr, Writer;
import crack.lang AppendBuffer, Buffer, Exception, InvalidArgumentError,
    InvalidStateError, SystemError;
import crack.logger LogFormatter, Logger;
import crack.logger.ctx Log;
import crack.net Address, Pipe, Poller, PollEvent, PollEventCallback, Socket,
    UnixAddress, AF_INET, AF_UNIX, POLLIN, POLLOUT, POLLERR, POLLHUP,
    SOCK_STREAM;
import crack.runtime c_strerror;
import crack.threads Condition, Event, Mutex, MutexLock, Thread, Queue2;
import crack.time Time;

@import crack.ann assert, impl, implements, interface;

uint defaultBlockSize = 4096;

class Connection;

@interface UserHandler {

    ## Called when a message is received.
    @abstract void process(Connection handler);

    ## Called when a connection is terminated.
    @abstract void terminate(Connection handler);

    ## Adds a "responder" object.  Responders are objects that are activated
    ## after processing a complete response message.  They are typically
    ## either "callbacks", which are executed in the poller thread, or
    ## "waiters" (see the Waiter class) which can be used to communicate the
    ## response back to an invocation in another thread.
    ##
    ## There is no compile-time interface for dealing with these kinds of
    ## objects, as they typically require some data from the response to be
    ## passed in as an argument, so we define the responder to be of type
    ## Object.
    ##
    ## Users should not call this directly, at least not on a handler that has
    ## already been associated with a proxy.  Use Connection.sendSync() instead.
    @abstract void addResponder(Object responder);
}

## Base class for all messages sent to the poller thread.
@abstract class _Message {
    @abstract void run(EventManager eventMan, Log log);
}

## A message with a response that you can wait on.
##
## Derived classes should lock the mutex prior to modifying any internal state
## to be shared between threads.
@abstract class _WaitableMessage : _Message {
    Event _event = {};

    ## Trigger the condition.
    @final void trigger() {
        _event.signal();
    }

    @final void wait() {
        MutexLock lock = {_event.getMutex()};
        _event.wait();
    }
}

## Interface for sending messages and raw data to the poller thread.
@interface _PollerControl {
    @abstract void sendMessage(_Message message);
}

## A communication mechanism for waiting on a result from a message/response
## communication in the poller thread.
class Waiter {
    Event _event = {};

    ## Signal the condition.
    @final void _signal() { _event.signal() }

    ## Wait on the condition.  Caller should be holding the mutex.
    @final void _wait() { _event.wait() }
}

## A communication endpoint handler.  Can be used for both server and client
## side connection handling.
##
##
@final class Connection @impl PollEventCallback, Writer {
    uint blockSize = defaultBlockSize;
    Socket __sock;
    bool __close;
    _PollerControl __out;
    Connection __associate, __owner;
    Log log;
    _PollerControl getOut() { return __out }

    ## If true, The user handler's process() method is called for all events,
    ## not just data input.
    bool processAllEvents;

    AppendBuffer
        ## The input buffer.  Data received from the connection is appended to
        ## this.  User handlers should read from the buffer and "compact()"
        ## it when the data has been fully consumed.
        inBuf,

        ## The output buffer.  Send data through the connection by appending
        ## to this. DEPRECATED.  Use the write() method instead, which works
        ## outside of the poller thread.
        outBuf;

    ## The user data handler.
    UserHandler userHandler;

    @final void addResponder(Object responder);
    @final void removeFrom(Poller poller);

    class __SendData : _Message {
        Connection __handler;
        String __data;

        oper init(Connection handler, String data) :
            __handler = handler,
            __data = data {
        }

        void run(EventManager eventMan, Log log) {
            log.debug `Sending $(__data.size) bytes to $__handler`;
            __handler.outBuf.extend(__data);
        }
    }

    class __SendSync : _Message {
        Connection __handler;
        String __data;
        Waiter __waiter;

        oper init(Connection handler, String data, Waiter waiter) :
            __handler = handler,
            __data = data,
            __waiter = waiter {
        }

        void run(EventManager eventMan, Log log) {
            __handler.addResponder(__waiter);
            __handler.outBuf.extend(__data);
        }
    }

    class __StopClient : _WaitableMessage {
        Connection __handler;

        oper init(Connection handler) : __handler = handler {}

        void run(EventManager eventMan, Log log) {
            lock := MutexLock(_event.getMutex());
            __handler.removeFrom(eventMan.poller);

            # Clear the handler so that no references are retained to keep the
            # object in existence after this action completes.
            __handler = null;

            trigger();
        }
    }

    ## Alternate constructor to allow us to create a handler without a socket.
    ## XXX should probably always use this.
    oper init(Log log, UserHandler handler) :
        inBuf(blockSize),
        outBuf(blockSize),
        log = log,
        userHandler = handler {
    }

    ## Close the socket and remove the handler's socket from the poller.
    @final void removeFrom(Poller poller) {
        # Set the __close flag this so isClosed() returns true, even if the
        # socket wasn't closed explicitly.
        __close = true;

        if (__sock)
            __sock.close();
        else
            # should we still terminate?
            return;

        try {
            poller.remove(__sock);
        } catch (InvalidArgumentError ex) {
            log.debug `Removing connection not in poller.`;
        }
        __sock = null;
        userHandler.terminate(this);
        __associate = null;
    }

    @final Connection __getOwner() {
        return __owner ? __owner : this;
    }

    ## Close the socket asynchronously.
    @final void close() {
        __out.sendMessage(__StopClient(__getOwner()));

        # Break the reference cycle to the owner.
        __owner = null;
    }

    ## Close the socket and wait for it to be close.
    ## Note that this must not be called from the poller thread, otherwise it
    ## will block forever.
    @final void closeSync() {
        msg := __StopClient(__getOwner());
        __out.sendMessage(msg);
        __owner = null;
        msg.wait();
    }

    oper del() {
        # This can only ever get called if we've been released from the
        # Poller ane everything else, so close the socket if it's not already
        # closed.
        if (__sock)
            __sock.close();
    }

    ## Returns true if the socket is closed.
    @final bool isClosed() { return __close && __sock is null }

    @final void addResponder(Object responder) {
        userHandler.addResponder(responder);
    }

    int oper call(Poller poller, PollEvent event) {
        if (__sock is null)
            # XXX there may be a race condition here and below, if we try to
            # remove the socket before this gets called there's going to be
            # trouble.  I'm not sure it can manifest, though, because since
            # the handling is done in the poll loop we will have pretty much
            # done this by the time we get the "stop" message.
            __sock = Socket.cast(event.pollable);

        # See if we're marked for close.
        if (__close) {
            log.info `Closing connection (close() called)`;
            removeFrom(poller);
            return 0;
        }

        log.debug `handler got events = $(event.revents)`;
        if (event.revents & POLLIN) {
            try {
                data := __sock.read(1024);
                if (!data) {
                    log.info `Connection closed`;
                    removeFrom(poller);
                    return 0;
                }

                inBuf.extend(data);
            } catch (SystemError ex) {
                log.error `Error reading from socket: $(ex.text).  Closing`;
                removeFrom(poller);
                return 0;
            }
        }

        if (event.revents & POLLOUT) {
            rc := __sock.send(outBuf, 0);
            log.debug `Sent $rc/$(outBuf.size) bytes`;
            if (rc >= 0) {
                outBuf.compact(rc);
            } else {
                log.error I`Error reading from socket: $(c_strerror()). \
                            Closing`;
                removeFrom(poller);
                return 0;
            }
        }

        if (event.revents & POLLERR) {
            log.error `got error on`;
            __sock.close();
            poller.remove(__sock);
            return 0;
        }

        if (event.revents & POLLHUP) {
            log.info `got HUP`;
            __sock.close();
            poller.remove(__sock);
            return 0;
        }

        if (event.revents & POLLIN || processAllEvents) {
            userHandler.process(this);

            # Check again to see if we're marked for close, since the user
            # handler might have closed us.
            if (__close) {
                log.info `Closing connection (after user handler)`;
                removeFrom(poller);
                return 0;
            }
        }

        return POLLIN | POLLERR | POLLHUP | (outBuf ? POLLOUT : 0);
    }

    ## Write 'data' back to the output channel.  This is safe to use from any
    ## thread.
    void write(Buffer data) {
        __out.sendMessage(__SendData(this, String(data)));
    }

    ## Send a message.
    void _sendMessage(_Message msg) {
        if (!__out)
            throw InvalidStateError(I'Connection object used before connected \
                                      or associated.'
                                    );
        __out.sendMessage(msg);
    }

    ## Send a synchronous message to the client, wait for it with
    ## waiter.getResult().
    void sendSync(String data, Waiter waiter) {
        _sendMessage(__SendSync(this, data, waiter));
    }

    void _setControlChannel(_PollerControl out) {
        __out = out;
        if (__associate)
            __associate._setControlChannel(out);
    }

    ## Associate the handler with another comm handler.  This is required if
    ## you are wrapping another protocol.  'conn' should be the connection
    ## that otherwise would not be registered with the poller.
    void associate(Connection conn) {
        __associate = conn;
        conn.__owner = this;
        if (__out)
            __associate._setControlChannel(__out);
    }

    void formatTo(Formatter out) { out `Connection($__sock)` }
}

@final class NewConnection {
    ## The listeners Log object.
    Log log;

    ## The accested connection info.
    Socket.Accepted accepted;

    oper init(Log log, Socket.Accepted accepted) :
        log = log,
        accepted = accepted {
    }
}

## Interface for classes used to construct the Connection on a new connection.
@interface ConnectionFactory {
    @abstract Connection makeConnection(NewConnection conn);
}

## Legacy interface for CommHandlerFactory.
## Deprecated.  Implement ConnectionFactory instead.
@interface CommHandlerFactory {
    @abstract Connection makeCommHandler(NewConnection conn);
}

class _CommHandlerFactoryAdapter @impl ConnectionFactory {
    CommHandlerFactory __factory;
    oper init(CommHandlerFactory factory) : __factory = factory {}
    Connection makeConnection(NewConnection conn) {
        return __factory.makeCommHandler(conn);
    }
}

## A listener that listens on a socket and creates communication handlers to
## service new connections.
@final class CommListener @impl PollEventCallback {

    Socket __sock;
    Functor1[void, Socket] __onSocketInit;
    _PollerControl _out;
    Log log;
    ConnectionFactory connectionFactory;
    alias commHandlerFactory = connectionFactory;

    oper init(Log log, ConnectionFactory commHandlerFactory) :
        log = log,
        connectionFactory = commHandlerFactory {
    }

    oper init(Log log, CommHandlerFactory commHandlerFactory) :
        log = log,
        connectionFactory = _CommHandlerFactoryAdapter(commHandlerFactory) {
    }

    oper del() {
        # This can only ever get called if we've been released from the
        # Poller ane everything else, so close the socket if it's not already
        # closed.
        if (__sock)
            __sock.close();
    }

    ## Close the connection and remove it from the poller.
    @final void removeFrom(Poller poller) {
        __sock.close();
        poller.remove(__sock);
    }

    int oper call(Poller poller, PollEvent event) {
        if (__sock is null) {
            __sock = Socket.cast(event.pollable);
            if (__onSocketInit)
                __onSocketInit(__sock);
        }
        log.debug `got events = $(event.revents)`;
        if (event.revents & POLLIN) {
            accepted := __sock.accept();
            log.info `New connection received from $(accepted.addr)`;
            comm := connectionFactory.makeConnection(
                NewConnection(log, accepted)
            );
            comm._setControlChannel(_out);
            if (!comm.isClosed())
                poller.add(accepted.sock, comm);
        } else if (event.revents & POLLERR) {
            log.error `got error`;
            __sock.close();
            poller.remove(__sock);
            return 0;
        } else if (event.revents & POLLHUP) {
            log.info `got HUP`;
            __sock.close();
            poller.remove(__sock);
            return 0;
        }
        return POLLIN | POLLERR | POLLHUP;
    }

    ## Adds a callback to be called when the listener is first introduced to
    ## its socket.
    void addSocketInitCallback(Functor1[void, Socket] onSocketInit) {
        __onSocketInit = onSocketInit;
    }
}

# Preserve original name.
alias CommHandler = Connection;

## Special message to terminate the queue
class _Terminate : _Message {
    void run(EventManager eventMan, Log log) {
        eventMan.terminate();
    }
}

const int
    SUCCESS = 0,
    ERR_BIND_FAILURE = 1,
    ERR_LISTEN_FAILURE = 2,
    ERR_REUSE_FAILURE = 3,

    ## Internal error, you should only get this when something in the system
    ## has gone wrong.
    ERR_INTERNAL = 4,

    ERR_CONNECT_FAILURE = 5;

const Array[String] ERROR_TEXT = [
    'Success',
    'Bind failure',
    'Listen failure',
    'Failure setting reusable address',
    'Internal error',
    'Connect failure',
];

## Message to create a new server socket.
class _NewServer : _WaitableMessage {

    Address __addr;
    CommListener __handler;
    bool __reuseAddr;
    _PollerControl __out;

    int errCode;

    oper init(Address addr, CommListener handler,
              bool reuseAddr,
              _PollerControl out
              ) :
        __addr = addr,
        __handler = handler,
        __reuseAddr = reuseAddr,
        __out = out {
    }

    @final int __run(Poller poller, Log log) {
        try {
            family := __addr.isa(UnixAddress) ? AF_UNIX : AF_INET;
            sock := Socket(family, SOCK_STREAM, 0);
            if (__reuseAddr && !sock.setReuseAddr(__reuseAddr))
                return ERR_REUSE_FAILURE;
            if (!sock.bind(__addr)) {
                log.error `Bind to $__addr failed\n`;
                return ERR_BIND_FAILURE;
            }
            if (!sock.listen(5))
                return ERR_LISTEN_FAILURE;
            __handler._out = __out;
            poller.add(sock, __handler);
            return SUCCESS;
        } catch (Exception ex) {
            log.error `Exception in message handling: $ex`;
            return ERR_INTERNAL;
        }
    }

    void run(EventManager eventMan, Log log) {
        MutexLock lock = {_event.getMutex()};
        errCode = __run(eventMan.poller, log);
        trigger();
    }
}

## Message to create a new client connection.
class _NewClient : _WaitableMessage {

    Address __addr;
    Connection __handler;
    _PollerControl __out;

    int errCode;

    oper init(Address addr, Connection handler,
              _PollerControl out) :
        __addr = addr,
        __handler = handler,
        __out = out {
    }

    @final int __run(Poller poller, Log log) {
        try {
            family := __addr.isa(UnixAddress) ? AF_UNIX : AF_INET;
            sock := Socket(family, SOCK_STREAM, 0);
            if (!sock.connect(__addr)) {
                log.error `Connection to $__addr failed`;
                return ERR_CONNECT_FAILURE;
            }
            __handler._setControlChannel(__out);
            poller.add(sock, __handler);
            return SUCCESS;
        } catch (Exception ex) {
            log.error `Exception creating a client: $ex`;
            return ERR_INTERNAL;
        }
    }

    void run(EventManager eventMan, Log log) {
        MutexLock lock = {_event.getMutex()};
        errCode = __run(eventMan.poller, log);
        trigger();
    }
}

class _ScheduleEvent : _Message {
    Time __time;
    EventCallback __event;

    oper init(Time time, EventCallback event) :
        __time = time,
        __event = event {
    }

    void run(EventManager eventMan, Log log) {
        eventMan.scheduleEvent(__time, __event);
    }
}

## Specialization of a Waiter that contains a result value and additional info
## for the handler (typically used to store a key).
@final class WaiterFor[Result, Info] : Waiter {
    Result __result;
    Exception __exception;
    Info info;

    oper init(Info info) : info = info {}

    ## Set the result and trigger the waiter, allowing the waiting thread to
    ## retrieve the response.
    void setResult(Result result) {
        MutexLock lock = {_event.getMutex()};
        __result = result;
        _signal();
    }

    ## Set an exception and trigger the waiter, causing the waiting thread to
    ## throw an exception.
    void setError(Exception ex) {
        MutexLock lock = {_event.getMutex()};
        __exception = ex;
        _signal();
    }

    ## Wait for a result or an error.  If an error is obtained, it will be
    ## thrown.
    Result getResult() {
        MutexLock lock = {_event.getMutex()};
        _event.wait();
        if (__exception)
            throw __exception;
        return __result;
    }
}

class _CommPipeHandler @impl PollEventCallback, _PollerControl {

    class __Message {
        Connection target;
        String data;
        oper init(Connection target, String data) :
            target = target,
            data = data {
        }
    }

    Pipe __pipe;
    Log __log;
    Queue2[_Message] __queue = {};

    # The event manager that owns the pipe.
    EventManagerBackRef __eventMan;

    bool done;

    oper init(Pipe pipe, Log log, EventManagerBackRef eventMan) :
        __pipe = pipe,
        __log = log,
        __eventMan = eventMan {
    }

    int oper call(Poller poller, PollEvent event) {
        if (event.revents & POLLIN) {
            __pipe.read(1024);
            while (message := __queue.getNonBlocking())
                message.run(__eventMan.oper from EventManager(), __log);
        } else if (event.revents & POLLERR) {
            __log.error `got error on control pipe handler`;
            __pipe.close();
            poller.remove(__pipe);
            return 0;
        } else if (event.revents & POLLHUP) {
            __log.info `got HUP on control pipe handler`;
            __pipe.close();
            poller.remove(__pipe);
            return 0;
        }
        return POLLIN | POLLERR | POLLHUP;
    }

    void sendMessage(_Message message) {
        __queue.add(message);
        __pipe.write('x');
    }
}

class _PollerThread : Thread {

    # Our control pipe. Safely send messages from other threads.
    _CommPipeHandler control;
    EventManager __sched = {};

    oper init(Log log) {
        pipe := Pipe();
        control = _CommPipeHandler(pipe, log, __sched);
        __sched.poller.add(pipe, control);
    }

    void run() {
        __sched.run();
    }
}

## Serves as a proxy for a remote connection managed from a background thread
## created by Comm.
## This class doesn't provide any additional functionality on top of
## Connection.  It exists for backwards compatibility.
@final class CommProxy {
    Connection __handler;

    oper init(Connection handler) : __handler = handler {}

    ## Sends 'data' asynchronously to the other communication endpoint.
    void send(String data) {
        __handler.write(data);
    }

    ## Close the connection asynchronously.
    void close() {
        __handler.close();
    }

    ## Returns the underlying Connection for the proxy.
    Connection getConnection() { return __handler }
    alias getCommHandler = getConnection;
}

@final class SyncCommProxy {
    Connection __handler;

    oper init(Connection handler) : __handler = handler {}

    ## Sends 'data' asynchronously to the other communication endpoint.
    void send(String data) {
        __handler.write(data);
    }

    ## Close the connection.
    void close() {
        __handler.close();
    }

    ## Send a synchronous message.  Wait for the result with
    ## 'waiter.getResult()'.
    void sendSync(String data, Waiter waiter) {
        __handler.sendSync(data, waiter);
    }
}

## Manages a poller in a background thread, providing a set of methods to
## control it and interact with its connections.
@final class Comm {
    _PollerThread __thread;
    Log __log;

    oper init(Log log) : __log = log {}

    void start() {
        @assert(!__thread);
        __thread = _PollerThread(__log);
        __thread.start();
    }

    void stop() {
        __thread.control.sendMessage(_Terminate());
        __thread.join();
        __thread = null;
    }

    ## Connect the handler to the server.  Use this if you want to retain
    ## control of the creation of the handler (mainly so you can specify a Log
    ## object).
    @final void connect(Address server, Connection handler) {
        message := _NewClient(server, handler, __thread.control);
        __thread.control.sendMessage(message);
        message.wait();
        if (message.errCode)
            throw Exception(
                FStr() `Connecting to $server: $(ERROR_TEXT[message.errCode])`
            );
    }

    ## Connect to the server and return a new connection.  The new connection
    ## will have a log object that records the Comm log's name concatenated with
    ## `-$server`.
    Connection connect(Address server, UserHandler userHandler) {
        conn := Connection(Log(__log, FStr() `$(__log.identifier)-$server`),
                           userHandler
                           );
        connect(server, conn);
        return conn;
    }

    ## Create a connection to a remote server in the poller thread and return
    ## a proxy for the connection.
    ##
    ## Unless you need to create the Connection to customize logging, use the
    ## version that accepts a UserHandler instead.
    ##
    ## Do not interact with 'handler' directly after calling this unless it
    ## is mutex protected: the contents of the handler will be subject to
    ## manipulation from the poller thread.
    @final CommProxy getProxy(Address server, Connection handler) {
        connect(server, handler);
        return CommProxy(handler);
    }

    ## Create a connection to a remote server in the poller thread and return
    ## a proxy for the connection.
    ## Do not interact with 'handler' directly after calling this unless it
    ## is mutex protected: the contents of the handler will be subject to
    ## manipulation from the poller thread.
    @final CommProxy getProxy(Address server, UserHandler handler) {
        return getProxy(server, Connection(__log, handler));
    }

    ## Same as getProxy(), only returns a synchronous proxy.
    ##
    ## Unless you need to create the Connection to customize logging, use the
    ## version that accepts a UserHandler instead.
    @final SyncCommProxy getSyncProxy(Address server, Connection handler) {
        message := _NewClient(server, handler, __thread.control);
        __thread.control.sendMessage(message);
        message.wait();
        if (message.errCode)
            throw Exception(
                FStr() `Connecting to $server: $(ERROR_TEXT[message.errCode])`
            );
        return SyncCommProxy(handler);
    }

    ## Same as getProxy(), only returns a synchronous proxy.
    @final SyncCommProxy getSyncProxy(Address server, UserHandler handler) {
        return getSyncProxy(server, Connection(__log, handler));
    }

    ## Start a new server in the poller thread, listening on the given
    ## address.  'listener' is the handler that will be invoked on new
    ## connections.  reuseAddr should be true if you want to set the
    ## "REUSEADDR" option on the socket.
    ##
    ## Unless you want to create the CommListener to customize logging, use
    ## the version that accepts a ConnectionFactory instead.
    ##
    ## Do not interact with 'listener' directly after calling this unless it
    ## is mutex protected, as it will be subject to manipulation from the
    ## poller thread.
    @final void startServer(Address addr, CommListener listener,
                            bool resuseAddr
                            ) {
        message := _NewServer(addr, listener, true, __thread.control);
        __thread.control.sendMessage(message);
        message.wait();
        if (message.errCode)
            throw Exception(
                FStr() `Connecting to $addr: $(ERROR_TEXT[message.errCode])`
            );
    }

    ## Start a new server in the poller thread, listening on the given
    ## address.  'listener' is the handler that will be invoked on new
    ## connections.  reuseAddr should be true if you want to set the
    ## "REUSEADDR" option on the socket.
    ##
    ## Do not interact with 'handlerFactory' directly after calling this
    ## unless it is mutex protected, as it will be subject to manipulation
    ## from the poller thread.
    @final void startServer(Address addr, ConnectionFactory handlerFactory,
                            bool reuseAddr
                            ) {
        startServer(addr, CommListener(__log, handlerFactory), reuseAddr);
    }

    ## Schedule an event to be executed at the given time (or immediately, if
    ## the time is in the past).  The vevent will always be run from the
    ## event manager thread.
    @final void scheduleEvent(Time time, EventCallback event) {
        __thread.control.sendMessage(_ScheduleEvent(time, event));
    }

    ## Returns the Comm object's log.
    Log getLog() { return __log }

    oper del() {
        if (__thread)
            stop();
    }
}
