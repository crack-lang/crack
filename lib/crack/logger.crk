// Logger module
// Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
// 
//   This Source Code Form is subject to the terms of the Mozilla Public
//   License, v. 2.0. If a copy of the MPL was not distributed with this
//   file, You can obtain one at http://mozilla.org/MPL/2.0/.
// 
// 2/23/2012

import crack.ascii escape, strip, wsplit;
import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.exp.file File;
import crack.functor Functor2;
import crack.io cout, cerr, StandardFormatter, StringFormatter;
import crack.lang Formatter, Writer;
import crack.runtime usecs;
import crack.strutil StringArray;
import crack.sys argv, env;
import crack.time Date;
@import crack.ann define, impl;

defaultTimeFormat := "%Y-%m-%dT%H:%M:%S";

uint
    FATAL = 0, 
    ERROR = 1, 
    WARN  = 2, 
    INFO  = 3,
    DEBUG = 4;

StringArray levelNames = ["FATAL", "ERROR", "WARN", "INFO", "DEBUG"];


// Place to keep the parameters that describe the logger's output format
class LoggerOptions {
    uint seq;
    String timeFormat, sep, eol;
    Formatter fmt;
    uint level;

    oper init () {}
}


// This class writes out a field to the log formatter
class MessageField {
    LoggerOptions options;

    oper init(LoggerOptions options): options = options {
    }

    void format(uint level, String msg) {
        options.fmt.format(msg);
    }
}

// A field that writes the current time using the strftime in options
class TimeField : MessageField {
    Date d;

    oper init(LoggerOptions options): MessageField(options), d() {
    }

    void format(uint level, String msg) {
        d.setLocalSeconds(int64(usecs()/1000000));
        options.fmt.format(d.strftime(options.timeFormat));
    }
}

// A field that writes an escaped message - this is preferred over the above raw
// message field
class EscapeField : MessageField {

    oper init(LoggerOptions options): MessageField(options) {
    }

    void format(uint level, String msg) {
        options.fmt.format(escape(msg));
    }
}

// A field that writes the program name
class ProgField : MessageField {
    String progname;

    oper init(LoggerOptions options): MessageField(options) {
        progname = argv[0];
    }

    void format(uint level, String msg) {
        options.fmt.format(progname);
    }
}

// A field that writes the program name
class LevelField : MessageField {
    String progname;

    oper init(LoggerOptions options): MessageField(options) {
        progname = argv[0];
    }

    void format(uint level, String msg) {
        options.fmt.write("[");
        if (level < levelNames.count())
            options.fmt.write(levelNames[level]);
        else
            options.fmt.write("Unknown");
        options.fmt.write("]");
    }
}

class Logger @impl Functor2[void, uint, String] {
    LoggerOptions options;
    Array[MessageField] _fields;
    HashMap[String, MessageField] _availableFields;

    void initNamedFields() {
        _availableFields["msg"] = MessageField(options);
        _availableFields["datetime"] = TimeField(options);
        _availableFields["escapemsg"] = EscapeField(options);
        _availableFields["progname"] = ProgField(options);
        _availableFields["severity"] = LevelField(options);
    }

    void _setDefaultOptions() {
        options.timeFormat = defaultTimeFormat;
        options.sep = " ";
        options.eol = "\n";
        options.seq = 0;
    }

    void setNamedFields(Array[String] fieldNames) {
        _fields.clear();
        for (name :in fieldNames)
            _fields.append(_availableFields[name]);
    }

    void setNamedFields(String fieldSpec) {
        _fields.clear();
        fieldNames := wsplit(fieldSpec);
        for (name :in fieldNames) {
            if (name.size > 0)
                _fields.append(_availableFields[name]);
        }
    }

    StringArray getNamedFields() {
        StringArray fieldNames = {};
        for (item :in _availableFields)
            fieldNames.append(item.key);
        return fieldNames;
    }

    void setNamedField(String name, MessageField field) {
        _availableFields[name] = field;
    }
    
    oper init(Formatter fmt, uint level) :
                _fields(), options(), _availableFields()
    {
        options.fmt = fmt;
        options.level = level;
        _setDefaultOptions();
        initNamedFields();
        setNamedFields(Array[String]!["datetime", "severity", "msg"]);
    }

    oper init(Formatter fmt, uint level, Array[String] fieldNames) :
                _fields(), options(), _availableFields()
    {
        options.fmt = fmt;
        options.level = level;
        _setDefaultOptions();
        initNamedFields();
        setNamedFields(fieldNames);
    }

    oper init(Formatter fmt, uint level, String fieldSpec) :
                _fields(), options(), _availableFields()
    {
        options.fmt = fmt;
        options.level = level;
        _setDefaultOptions();
        initNamedFields();
        fieldNames := wsplit(fieldSpec);
        for (name :in fieldNames) {
            if (name.size > 0)
                _fields.append(_availableFields[name]);
        }
    }

    void setDateTimeFormat(String newTimeFormat) {
        options.timeFormat = newTimeFormat;
    }

    void log(uint lv, String msg) {
        if (lv <= options.level) {
            options.seq++;
            bool first = true;
            for (field :in _fields) {
                if (first) first = false;
                else options.fmt.format(options.sep);
                field.format(lv, msg);
            }
            options.fmt.format(options.eol);
        }
    }

    void oper call(uint lv, String msg) {
      log(lv, msg);
    }

    @define _namedLogger(levelName, levelValue) {
        void levelName(String msg) {
          log(levelValue, msg);
        }
    }

    @_namedLogger(fatal, FATAL)
    @_namedLogger(error, ERROR)
    @_namedLogger(warn, WARN)
    @_namedLogger(info, INFO)
    @_namedLogger(debug, DEBUG)

    void setLevel(uint newLevel) {
        options.level = newLevel;
    }

    uint getLevel() {
        return options.level;
    }

    void setFormatter(Formatter fmt) {
        options.fmt = fmt;
    }

    Formatter getFormatter() {
        return options.fmt;
    }

    void setFile(String fname) {
        options.fmt = StandardFormatter(File(fname, "w"));
    }

    void setWriter(Writer w) {
        options.fmt = StandardFormatter(w);
    }

    void setFile(File file) {
        options.fmt = StandardFormatter(file);
    }

}

class _EntryFormatter : StringFormatter {

    Logger __logger;
    uint __level;

    oper init(Logger logger, uint level) : __logger = logger, __level = level {}

    @final void leave() {
        __logger.log(__level, string());
    }
}

class LogFormatter {
    Logger _logger;
    uint _level;

    oper init(Logger logger, uint level) :
        _logger = logger,
        _level = level {
    }

    oper init(String fname, uint level, String fieldSpec) :
        _level = level,
        _logger = Logger(StandardFormatter(File(fname, "w")), level,
                         fieldSpec
                         ) {
    }

    oper init(Writer w, uint level, String fieldSpec) :
        _level = level,
        _logger = Logger(StandardFormatter(w), level, fieldSpec) {
    }

    oper init(String fname, uint level) :
        _level = level,
        _logger = Logger(StandardFormatter(File(fname, "w")), level) {
    }

    oper init(Writer w, uint level) :
        _level = level,
        _logger = Logger(StandardFormatter(w), level) {
    }

    Logger logger() {
      return _logger;
    }

    _EntryFormatter enter() {
        return _EntryFormatter(_logger, _level);
    }

    void setNamedFields(Array[String] fieldNames) {
        _logger.setNamedFields(fieldNames);
    }

    void setNamedFields(String fieldSpec) {
        _logger.setNamedFields(fieldSpec);
    }

    void setLogger(Logger newLogger) {
        _logger = newLogger;
    }

    void setLevel(uint newLevel) {
        _level = newLevel;
    }

    void setLoggerLevel(uint newLevel) {
        _logger.setLevel(newLevel);
    }

    void setFormatter(Formatter fmt) {
        _logger.setFormatter(fmt);
    }

    void setFile(String fname) {
        _logger.setFile(fname);
    }

    void setFile(File file) {
        _logger.setFile(file);;
    }

    void setWriter(Writer w) {
        _logger.setWriter(w);;
    }

}

cerrLogger := Logger(cerr, ERROR);
void setLogLevel(uint newLevel) {
    cerrLogger.setLevel(newLevel);
}

void setLogFormatter(Formatter fmt) {
    cerrLogger.setFormatter(fmt);
}

void setLogFile(String fname) {
    cerrLogger.setFile(fname);
}

void setLogFile(File file) {
    cerrLogger.setFile(file)
}

void setLogWriter(Writer w) {
    cerrLogger.setWriter(w)
}

@define _namedCerrLogger(levelName, levelValue) {
    levelName := LogFormatter(cerrLogger, levelValue);
}

@_namedCerrLogger(fatal, FATAL)
@_namedCerrLogger(error, ERROR)
@_namedCerrLogger(warn, WARN)
@_namedCerrLogger(info, INFO)
@_namedCerrLogger(debug, DEBUG)
