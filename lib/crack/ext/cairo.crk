# Cairo 2D drawing library binding, class-based interface
# Copyright 2011-2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import crack.lang free, FreeBase;
import crack.lang CString, Buffer, Writer, Formatter;
import crack.io cout, FStr;
import crack.cont.array Array;

import crack.ext._cairo
// auto-generated by extgen.crk
// Constants
CAIRO_HAS_FC_FONT, CAIRO_HAS_FT_FONT, CAIRO_HAS_GOBJECT_FUNCTIONS, CAIRO_HAS_IMAGE_SURFACE,
CAIRO_HAS_PDF_SURFACE, CAIRO_HAS_PNG_FUNCTIONS, CAIRO_HAS_PS_SURFACE, CAIRO_HAS_RECORDING_SURFACE,
CAIRO_HAS_SVG_SURFACE, CAIRO_HAS_USER_FONT, CAIRO_HAS_XCB_SHM_FUNCTIONS,
CAIRO_HAS_XCB_SURFACE, CAIRO_HAS_XLIB_SURFACE, CAIRO_HAS_XLIB_XRENDER_SURFACE,
CAIRO_STATUS_SUCCESS, CAIRO_STATUS_NO_MEMORY, CAIRO_STATUS_INVALID_RESTORE,
CAIRO_STATUS_INVALID_POP_GROUP, CAIRO_STATUS_NO_CURRENT_POINT, CAIRO_STATUS_INVALID_MATRIX,
CAIRO_STATUS_INVALID_STATUS, CAIRO_STATUS_NULL_POINTER, CAIRO_STATUS_INVALID_STRING,
CAIRO_STATUS_INVALID_PATH_DATA, CAIRO_STATUS_READ_ERROR, CAIRO_STATUS_WRITE_ERROR,
CAIRO_STATUS_SURFACE_FINISHED, CAIRO_STATUS_SURFACE_TYPE_MISMATCH, CAIRO_STATUS_PATTERN_TYPE_MISMATCH,
CAIRO_STATUS_INVALID_CONTENT, CAIRO_STATUS_INVALID_FORMAT, CAIRO_STATUS_INVALID_VISUAL,
CAIRO_STATUS_FILE_NOT_FOUND, CAIRO_STATUS_INVALID_DASH, CAIRO_STATUS_INVALID_DSC_COMMENT,
CAIRO_STATUS_INVALID_INDEX, CAIRO_STATUS_CLIP_NOT_REPRESENTABLE, CAIRO_STATUS_TEMP_FILE_ERROR,
CAIRO_STATUS_INVALID_STRIDE, CAIRO_STATUS_FONT_TYPE_MISMATCH, CAIRO_STATUS_USER_FONT_IMMUTABLE,
CAIRO_STATUS_USER_FONT_ERROR, CAIRO_STATUS_NEGATIVE_COUNT, CAIRO_STATUS_INVALID_CLUSTERS,
CAIRO_STATUS_INVALID_SLANT, CAIRO_STATUS_INVALID_WEIGHT, CAIRO_STATUS_INVALID_SIZE,
CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, CAIRO_STATUS_DEVICE_TYPE_MISMATCH,
CAIRO_STATUS_DEVICE_ERROR, CAIRO_STATUS_LAST_STATUS, CAIRO_CONTENT_COLOR,
CAIRO_CONTENT_ALPHA, CAIRO_CONTENT_COLOR_ALPHA, CAIRO_OPERATOR_CLEAR, CAIRO_OPERATOR_SOURCE,
CAIRO_OPERATOR_OVER, CAIRO_OPERATOR_IN, CAIRO_OPERATOR_OUT, CAIRO_OPERATOR_ATOP,
CAIRO_OPERATOR_DEST, CAIRO_OPERATOR_DEST_OVER, CAIRO_OPERATOR_DEST_IN, CAIRO_OPERATOR_DEST_OUT,
CAIRO_OPERATOR_DEST_ATOP, CAIRO_OPERATOR_XOR, CAIRO_OPERATOR_ADD, CAIRO_OPERATOR_SATURATE,
CAIRO_OPERATOR_MULTIPLY, CAIRO_OPERATOR_SCREEN, CAIRO_OPERATOR_OVERLAY, CAIRO_OPERATOR_DARKEN,
CAIRO_OPERATOR_LIGHTEN, CAIRO_OPERATOR_COLOR_DODGE, CAIRO_OPERATOR_COLOR_BURN,
CAIRO_OPERATOR_HARD_LIGHT, CAIRO_OPERATOR_SOFT_LIGHT, CAIRO_OPERATOR_DIFFERENCE,
CAIRO_OPERATOR_EXCLUSION, CAIRO_OPERATOR_HSL_HUE, CAIRO_OPERATOR_HSL_SATURATION,
CAIRO_OPERATOR_HSL_COLOR, CAIRO_OPERATOR_HSL_LUMINOSITY, CAIRO_ANTIALIAS_DEFAULT,
CAIRO_ANTIALIAS_NONE, CAIRO_ANTIALIAS_GRAY, CAIRO_ANTIALIAS_SUBPIXEL, CAIRO_FILL_RULE_WINDING,
CAIRO_FILL_RULE_EVEN_ODD, CAIRO_LINE_CAP_BUTT, CAIRO_LINE_CAP_ROUND, CAIRO_LINE_CAP_SQUARE,
CAIRO_LINE_JOIN_MITER, CAIRO_LINE_JOIN_ROUND, CAIRO_LINE_JOIN_BEVEL, CAIRO_TEXT_CLUSTER_FLAG_BACKWARD,
CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_SLANT_ITALIC, CAIRO_FONT_SLANT_OBLIQUE,
CAIRO_FONT_WEIGHT_NORMAL, CAIRO_FONT_WEIGHT_BOLD, CAIRO_SUBPIXEL_ORDER_DEFAULT,
CAIRO_SUBPIXEL_ORDER_RGB, CAIRO_SUBPIXEL_ORDER_BGR, CAIRO_SUBPIXEL_ORDER_VRGB,
CAIRO_SUBPIXEL_ORDER_VBGR, CAIRO_HINT_STYLE_DEFAULT, CAIRO_HINT_STYLE_NONE,
CAIRO_HINT_STYLE_SLIGHT, CAIRO_HINT_STYLE_MEDIUM, CAIRO_HINT_STYLE_FULL,
CAIRO_HINT_METRICS_DEFAULT, CAIRO_HINT_METRICS_OFF, CAIRO_HINT_METRICS_ON,
CAIRO_FONT_TYPE_TOY, CAIRO_FONT_TYPE_FT, CAIRO_FONT_TYPE_WIN32, CAIRO_FONT_TYPE_QUARTZ,
CAIRO_FONT_TYPE_USER, CAIRO_PATH_MOVE_TO, CAIRO_PATH_LINE_TO, CAIRO_PATH_CURVE_TO,
CAIRO_PATH_CLOSE_PATH, CAIRO_DEVICE_TYPE_DRM, CAIRO_DEVICE_TYPE_GL, CAIRO_DEVICE_TYPE_SCRIPT,
CAIRO_DEVICE_TYPE_XCB, CAIRO_DEVICE_TYPE_XLIB, CAIRO_DEVICE_TYPE_XML, CAIRO_SURFACE_TYPE_IMAGE,
CAIRO_SURFACE_TYPE_PDF, CAIRO_SURFACE_TYPE_PS, CAIRO_SURFACE_TYPE_XLIB, CAIRO_SURFACE_TYPE_XCB,
CAIRO_SURFACE_TYPE_GLITZ, CAIRO_SURFACE_TYPE_QUARTZ, CAIRO_SURFACE_TYPE_WIN32,
CAIRO_SURFACE_TYPE_BEOS, CAIRO_SURFACE_TYPE_DIRECTFB, CAIRO_SURFACE_TYPE_SVG,
CAIRO_SURFACE_TYPE_OS2, CAIRO_SURFACE_TYPE_WIN32_PRINTING, CAIRO_SURFACE_TYPE_QUARTZ_IMAGE,
CAIRO_SURFACE_TYPE_SCRIPT, CAIRO_SURFACE_TYPE_QT, CAIRO_SURFACE_TYPE_RECORDING,
CAIRO_SURFACE_TYPE_VG, CAIRO_SURFACE_TYPE_GL, CAIRO_SURFACE_TYPE_DRM, CAIRO_SURFACE_TYPE_TEE,
CAIRO_SURFACE_TYPE_XML, CAIRO_SURFACE_TYPE_SKIA, CAIRO_SURFACE_TYPE_SUBSURFACE,
CAIRO_FORMAT_INVALID, CAIRO_FORMAT_ARGB32, CAIRO_FORMAT_RGB24, CAIRO_FORMAT_A8,
CAIRO_FORMAT_A1, CAIRO_FORMAT_RGB16_565, CAIRO_PATTERN_TYPE_SOLID, CAIRO_PATTERN_TYPE_SURFACE,
CAIRO_PATTERN_TYPE_LINEAR, CAIRO_PATTERN_TYPE_RADIAL, CAIRO_EXTEND_NONE,
CAIRO_EXTEND_REPEAT, CAIRO_EXTEND_REFLECT, CAIRO_EXTEND_PAD, CAIRO_FILTER_FAST,
CAIRO_FILTER_GOOD, CAIRO_FILTER_BEST, CAIRO_FILTER_NEAREST, CAIRO_FILTER_BILINEAR,
CAIRO_FILTER_GAUSSIAN, CAIRO_REGION_OVERLAP_IN, CAIRO_REGION_OVERLAP_OUT,
CAIRO_REGION_OVERLAP_PART, CAIRO_PDF_VERSION_1_4, CAIRO_PDF_VERSION_1_5,
CAIRO_SVG_VERSION_1_1, CAIRO_SVG_VERSION_1_2, CAIRO_PS_LEVEL_2, CAIRO_PS_LEVEL_3,


// Types

Display, Drawable, Pixmap, Screen, Visual, cairo_device_t, cairo_font_extents_t,
cairo_font_face_t, cairo_font_options_t, cairo_glyph_t, cairo_matrix_t, cairo_path_data_t,
cairo_path_t, cairo_pattern_t, cairo_rectangle_int_t, cairo_rectangle_list_t,
cairo_rectangle_t, cairo_region_t, cairo_scaled_font_t, cairo_surface_t,
cairo_t, cairo_text_cluster_t, cairo_text_extents_t, cairo_user_data_key_t,


// Function names
cairo_matrix_new,
cairo_rectangle_new,
cairo_rectangle_list_new,
cairo_text_extents_new,
cairo_font_extents_new,
cairo_create,
cairo_reference,
cairo_destroy,
cairo_get_reference_count,
cairo_save,
cairo_restore,

cairo_push_group,
cairo_pop_group,
cairo_pop_group_to_source,
cairo_set_operator,
cairo_set_source,
cairo_set_source_rgb,
cairo_set_source_rgba,
cairo_set_source_surface,
cairo_set_tolerance,
cairo_set_antialias,

cairo_set_fill_rule,
cairo_set_line_width,
cairo_set_line_cap,
cairo_set_line_join,
cairo_set_dash,
cairo_set_miter_limit,
cairo_translate,
cairo_scale,
cairo_rotate,
cairo_transform,

cairo_set_matrix,
cairo_identity_matrix,
cairo_user_to_device,
cairo_user_to_device_distance,
cairo_device_to_user,
cairo_device_to_user_distance,
cairo_new_path,
cairo_move_to,
cairo_new_sub_path,
cairo_line_to,

cairo_curve_to,
cairo_arc,
cairo_arc_negative,
cairo_rel_move_to,
cairo_rel_line_to,
cairo_rel_curve_to,
cairo_rectangle,
cairo_close_path,
cairo_path_extents,
cairo_paint,

cairo_paint_with_alpha,
cairo_mask,
cairo_mask_surface,
cairo_stroke,
cairo_stroke_preserve,
cairo_fill,
cairo_fill_preserve,
cairo_copy_page,
cairo_show_page,
cairo_in_stroke,

cairo_in_fill,
cairo_in_clip,
cairo_stroke_extents,
cairo_fill_extents,
cairo_reset_clip,
cairo_clip,
cairo_clip_preserve,
cairo_clip_extents,
cairo_copy_clip_rectangle_list,
cairo_rectangle_list_destroy,

cairo_glyph_allocate,
cairo_glyph_free,
cairo_text_cluster_allocate,
cairo_text_cluster_free,
cairo_font_options_create,
cairo_font_options_copy,
cairo_font_options_destroy,
cairo_font_options_status,
cairo_font_options_merge,
cairo_font_options_equal,

cairo_font_options_hash,
cairo_font_options_set_antialias,
cairo_font_options_get_antialias,
cairo_font_options_set_subpixel_order,
cairo_font_options_get_subpixel_order,
cairo_font_options_set_hint_style,
cairo_font_options_get_hint_style,
cairo_font_options_set_hint_metrics,
cairo_font_options_get_hint_metrics,
cairo_select_font_face,

cairo_set_font_size,
cairo_set_font_matrix,
cairo_get_font_matrix,
cairo_set_font_options,
cairo_get_font_options,
cairo_set_font_face,
cairo_get_font_face,
cairo_set_scaled_font,
cairo_get_scaled_font,
cairo_show_text,

cairo_show_glyphs,
cairo_show_text_glyphs,
cairo_text_path,
cairo_glyph_path,
cairo_text_extents,
cairo_glyph_extents,
cairo_font_extents,
cairo_font_face_reference,
cairo_font_face_destroy,
cairo_font_face_get_reference_count,

cairo_font_face_status,
cairo_font_face_get_type,
cairo_font_face_get_user_data,
cairo_scaled_font_create,
cairo_scaled_font_reference,
cairo_scaled_font_destroy,
cairo_scaled_font_get_reference_count,
cairo_scaled_font_status,
cairo_scaled_font_get_type,
cairo_scaled_font_get_user_data,

cairo_scaled_font_extents,
cairo_scaled_font_text_extents,
cairo_scaled_font_glyph_extents,
cairo_scaled_font_text_to_glyphs,
cairo_scaled_font_get_font_face,
cairo_scaled_font_get_font_matrix,
cairo_scaled_font_get_ctm,
cairo_scaled_font_get_scale_matrix,
cairo_scaled_font_get_font_options,
cairo_toy_font_face_create,

cairo_toy_font_face_get_family,
cairo_toy_font_face_get_slant,
cairo_toy_font_face_get_weight,
cairo_user_font_face_create,
cairo_get_operator,
cairo_get_source,
cairo_get_tolerance,
cairo_get_antialias,
cairo_has_current_point,
cairo_get_current_point,

cairo_get_fill_rule,
cairo_get_line_width,
cairo_get_line_cap,
cairo_get_line_join,
cairo_get_miter_limit,
cairo_get_dash_count,
cairo_get_dash,
cairo_get_matrix,
cairo_get_target,
cairo_get_group_target,

cairo_copy_path,
cairo_copy_path_flat,
cairo_append_path,
cairo_path_destroy,
cairo_status,
cairo_status_to_string,
cairo_device_reference,
cairo_device_get_type,
cairo_device_status,
cairo_device_acquire,

cairo_device_release,
cairo_device_flush,
cairo_device_finish,
cairo_device_destroy,
cairo_device_get_reference_count,
cairo_device_get_user_data,
cairo_surface_create_similar,
cairo_surface_create_for_rectangle,
cairo_surface_reference,
cairo_surface_finish,

cairo_surface_destroy,
cairo_surface_get_device,
cairo_surface_get_reference_count,
cairo_surface_status,
cairo_surface_get_type,
cairo_surface_get_content,
cairo_surface_write_to_png,
cairo_surface_write_to_png_stream,

cairo_surface_get_user_data,
cairo_surface_set_user_data,
cairo_surface_get_mime_data,
cairo_surface_set_mime_data,
cairo_surface_get_font_options,
cairo_surface_flush,
cairo_surface_mark_dirty,
cairo_surface_mark_dirty_rectangle,
cairo_surface_set_device_offset,
cairo_surface_get_device_offset,

cairo_surface_set_fallback_resolution,
cairo_surface_get_fallback_resolution,
cairo_surface_copy_page,
cairo_surface_show_page,
cairo_surface_has_show_text_glyphs,
cairo_image_surface_create,
cairo_format_stride_for_width,
cairo_image_surface_create_for_data,
cairo_image_surface_get_data,
cairo_image_surface_get_format,

cairo_image_surface_get_width,
cairo_image_surface_get_height,
cairo_image_surface_get_stride,
cairo_image_surface_create_from_png,
cairo_recording_surface_create,
cairo_recording_surface_ink_extents,
cairo_pattern_create_rgb,
cairo_pattern_create_rgba,

cairo_pattern_create_for_surface,
cairo_pattern_create_linear,
cairo_pattern_create_radial,
cairo_pattern_reference,
cairo_pattern_destroy,
cairo_pattern_get_reference_count,
cairo_pattern_status,
cairo_pattern_get_user_data,
cairo_pattern_set_user_data,
cairo_pattern_get_type,

cairo_pattern_add_color_stop_rgb,
cairo_pattern_add_color_stop_rgba,
cairo_pattern_set_matrix,
cairo_pattern_get_matrix,
cairo_pattern_set_extend,
cairo_pattern_get_extend,
cairo_pattern_set_filter,
cairo_pattern_get_filter,
cairo_pattern_get_rgba,
cairo_pattern_get_surface,

cairo_pattern_get_color_stop_rgba,
cairo_pattern_get_color_stop_count,
cairo_pattern_get_linear_points,
cairo_pattern_get_radial_circles,
cairo_matrix_init,
cairo_matrix_init_identity,
cairo_matrix_init_translate,
cairo_matrix_init_scale,
cairo_matrix_init_rotate,
cairo_matrix_translate,

cairo_matrix_scale,
cairo_matrix_rotate,
cairo_matrix_invert,
cairo_matrix_multiply,
cairo_matrix_transform_distance,
cairo_matrix_transform_point,
cairo_region_create,
cairo_region_create_rectangle,
cairo_region_create_rectangles,
cairo_region_copy,

cairo_region_reference,
cairo_region_destroy,
cairo_region_equal,
cairo_region_status,
cairo_region_get_extents,
cairo_region_num_rectangles,
cairo_region_get_rectangle,
cairo_region_is_empty,
cairo_region_contains_rectangle,
cairo_region_contains_point,

cairo_region_translate,
cairo_region_subtract,
cairo_region_subtract_rectangle,
cairo_region_intersect,
cairo_region_intersect_rectangle,
cairo_region_union,
cairo_region_union_rectangle,
cairo_region_xor,
cairo_region_xor_rectangle,
cairo_debug_reset_static_data,

cairo_pdf_surface_create,
cairo_pdf_surface_create_for_stream,
cairo_pdf_surface_restrict_to_version,
cairo_pdf_get_versions,
cairo_pdf_version_to_string,
cairo_pdf_surface_set_size,
cairo_svg_surface_create,
cairo_svg_surface_create_for_stream,
cairo_svg_surface_restrict_to_version,
cairo_svg_get_versions,

cairo_svg_version_to_string,
cairo_xlib_surface_create,
cairo_xlib_surface_create_for_bitmap,
cairo_xlib_surface_set_size,
cairo_xlib_surface_set_drawable,
cairo_xlib_surface_get_display,
cairo_xlib_surface_get_drawable,
cairo_xlib_surface_get_screen,
cairo_xlib_surface_get_visual,
cairo_xlib_surface_get_depth,

cairo_xlib_surface_get_width,
cairo_xlib_surface_get_height,
cairo_ps_surface_create,
cairo_ps_surface_create_for_stream,
cairo_ps_surface_restrict_to_level,
cairo_ps_get_levels,
cairo_ps_level_to_string,
cairo_ps_surface_set_eps,
cairo_ps_surface_get_eps,
cairo_ps_surface_set_size,

cairo_ps_surface_dsc_comment,
cairo_ps_surface_dsc_begin_setup,
cairo_ps_surface_dsc_begin_page_setup;

 // Constant class definitions
class CAIRO_CONSTANTS {

    uint HAS_FC_FONT = CAIRO_HAS_FC_FONT;
    uint HAS_FT_FONT = CAIRO_HAS_FT_FONT;
    uint HAS_GOBJECT_FUNCTIONS = CAIRO_HAS_GOBJECT_FUNCTIONS;
    uint HAS_IMAGE_SURFACE = CAIRO_HAS_IMAGE_SURFACE;
    uint HAS_PDF_SURFACE = CAIRO_HAS_PDF_SURFACE;
    uint HAS_PNG_FUNCTIONS = CAIRO_HAS_PNG_FUNCTIONS;
    uint HAS_PS_SURFACE = CAIRO_HAS_PS_SURFACE;
    uint HAS_RECORDING_SURFACE = CAIRO_HAS_RECORDING_SURFACE;
    uint HAS_SVG_SURFACE = CAIRO_HAS_SVG_SURFACE;
    uint HAS_USER_FONT = CAIRO_HAS_USER_FONT;

    uint HAS_XCB_SHM_FUNCTIONS = CAIRO_HAS_XCB_SHM_FUNCTIONS;
    uint HAS_XCB_SURFACE = CAIRO_HAS_XCB_SURFACE;
    uint HAS_XLIB_SURFACE = CAIRO_HAS_XLIB_SURFACE;
    uint HAS_XLIB_XRENDER_SURFACE = CAIRO_HAS_XLIB_XRENDER_SURFACE;
    uint STATUS_SUCCESS = CAIRO_STATUS_SUCCESS;
    uint STATUS_NO_MEMORY = CAIRO_STATUS_NO_MEMORY;
    uint STATUS_INVALID_RESTORE = CAIRO_STATUS_INVALID_RESTORE;
    uint STATUS_INVALID_POP_GROUP = CAIRO_STATUS_INVALID_POP_GROUP;
    uint STATUS_NO_CURRENT_POINT = CAIRO_STATUS_NO_CURRENT_POINT;
    uint STATUS_INVALID_MATRIX = CAIRO_STATUS_INVALID_MATRIX;

    uint STATUS_INVALID_STATUS = CAIRO_STATUS_INVALID_STATUS;
    uint STATUS_NULL_POINTER = CAIRO_STATUS_NULL_POINTER;
    uint STATUS_INVALID_STRING = CAIRO_STATUS_INVALID_STRING;
    uint STATUS_INVALID_PATH_DATA = CAIRO_STATUS_INVALID_PATH_DATA;
    uint STATUS_READ_ERROR = CAIRO_STATUS_READ_ERROR;
    uint STATUS_WRITE_ERROR = CAIRO_STATUS_WRITE_ERROR;
    uint STATUS_SURFACE_FINISHED = CAIRO_STATUS_SURFACE_FINISHED;
    uint STATUS_SURFACE_TYPE_MISMATCH = CAIRO_STATUS_SURFACE_TYPE_MISMATCH;
    uint STATUS_PATTERN_TYPE_MISMATCH = CAIRO_STATUS_PATTERN_TYPE_MISMATCH;
    uint STATUS_INVALID_CONTENT = CAIRO_STATUS_INVALID_CONTENT;

    uint STATUS_INVALID_FORMAT = CAIRO_STATUS_INVALID_FORMAT;
    uint STATUS_INVALID_VISUAL = CAIRO_STATUS_INVALID_VISUAL;
    uint STATUS_FILE_NOT_FOUND = CAIRO_STATUS_FILE_NOT_FOUND;
    uint STATUS_INVALID_DASH = CAIRO_STATUS_INVALID_DASH;
    uint STATUS_INVALID_DSC_COMMENT = CAIRO_STATUS_INVALID_DSC_COMMENT;
    uint STATUS_INVALID_INDEX = CAIRO_STATUS_INVALID_INDEX;
    uint STATUS_CLIP_NOT_REPRESENTABLE = CAIRO_STATUS_CLIP_NOT_REPRESENTABLE;
    uint STATUS_TEMP_FILE_ERROR = CAIRO_STATUS_TEMP_FILE_ERROR;
    uint STATUS_INVALID_STRIDE = CAIRO_STATUS_INVALID_STRIDE;
    uint STATUS_FONT_TYPE_MISMATCH = CAIRO_STATUS_FONT_TYPE_MISMATCH;

    uint STATUS_USER_FONT_IMMUTABLE = CAIRO_STATUS_USER_FONT_IMMUTABLE;
    uint STATUS_USER_FONT_ERROR = CAIRO_STATUS_USER_FONT_ERROR;
    uint STATUS_NEGATIVE_COUNT = CAIRO_STATUS_NEGATIVE_COUNT;
    uint STATUS_INVALID_CLUSTERS = CAIRO_STATUS_INVALID_CLUSTERS;
    uint STATUS_INVALID_SLANT = CAIRO_STATUS_INVALID_SLANT;
    uint STATUS_INVALID_WEIGHT = CAIRO_STATUS_INVALID_WEIGHT;
    uint STATUS_INVALID_SIZE = CAIRO_STATUS_INVALID_SIZE;
    uint STATUS_USER_FONT_NOT_IMPLEMENTED = CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED;
    uint STATUS_DEVICE_TYPE_MISMATCH = CAIRO_STATUS_DEVICE_TYPE_MISMATCH;
    uint STATUS_DEVICE_ERROR = CAIRO_STATUS_DEVICE_ERROR;

    uint STATUS_LAST_STATUS = CAIRO_STATUS_LAST_STATUS;
    uint CONTENT_COLOR = CAIRO_CONTENT_COLOR;
    uint CONTENT_ALPHA = CAIRO_CONTENT_ALPHA;
    uint CONTENT_COLOR_ALPHA = CAIRO_CONTENT_COLOR_ALPHA;
    uint OPERATOR_CLEAR = CAIRO_OPERATOR_CLEAR;
    uint OPERATOR_SOURCE = CAIRO_OPERATOR_SOURCE;
    uint OPERATOR_OVER = CAIRO_OPERATOR_OVER;
    uint OPERATOR_IN = CAIRO_OPERATOR_IN;
    uint OPERATOR_OUT = CAIRO_OPERATOR_OUT;
    uint OPERATOR_ATOP = CAIRO_OPERATOR_ATOP;

    uint OPERATOR_DEST = CAIRO_OPERATOR_DEST;
    uint OPERATOR_DEST_OVER = CAIRO_OPERATOR_DEST_OVER;
    uint OPERATOR_DEST_IN = CAIRO_OPERATOR_DEST_IN;
    uint OPERATOR_DEST_OUT = CAIRO_OPERATOR_DEST_OUT;
    uint OPERATOR_DEST_ATOP = CAIRO_OPERATOR_DEST_ATOP;
    uint OPERATOR_XOR = CAIRO_OPERATOR_XOR;
    uint OPERATOR_ADD = CAIRO_OPERATOR_ADD;
    uint OPERATOR_SATURATE = CAIRO_OPERATOR_SATURATE;
    uint OPERATOR_MULTIPLY = CAIRO_OPERATOR_MULTIPLY;
    uint OPERATOR_SCREEN = CAIRO_OPERATOR_SCREEN;

    uint OPERATOR_OVERLAY = CAIRO_OPERATOR_OVERLAY;
    uint OPERATOR_DARKEN = CAIRO_OPERATOR_DARKEN;
    uint OPERATOR_LIGHTEN = CAIRO_OPERATOR_LIGHTEN;
    uint OPERATOR_COLOR_DODGE = CAIRO_OPERATOR_COLOR_DODGE;
    uint OPERATOR_COLOR_BURN = CAIRO_OPERATOR_COLOR_BURN;
    uint OPERATOR_HARD_LIGHT = CAIRO_OPERATOR_HARD_LIGHT;
    uint OPERATOR_SOFT_LIGHT = CAIRO_OPERATOR_SOFT_LIGHT;
    uint OPERATOR_DIFFERENCE = CAIRO_OPERATOR_DIFFERENCE;
    uint OPERATOR_EXCLUSION = CAIRO_OPERATOR_EXCLUSION;
    uint OPERATOR_HSL_HUE = CAIRO_OPERATOR_HSL_HUE;

    uint OPERATOR_HSL_SATURATION = CAIRO_OPERATOR_HSL_SATURATION;
    uint OPERATOR_HSL_COLOR = CAIRO_OPERATOR_HSL_COLOR;
    uint OPERATOR_HSL_LUMINOSITY = CAIRO_OPERATOR_HSL_LUMINOSITY;
    uint ANTIALIAS_DEFAULT = CAIRO_ANTIALIAS_DEFAULT;
    uint ANTIALIAS_NONE = CAIRO_ANTIALIAS_NONE;
    uint ANTIALIAS_GRAY = CAIRO_ANTIALIAS_GRAY;
    uint ANTIALIAS_SUBPIXEL = CAIRO_ANTIALIAS_SUBPIXEL;
    uint FILL_RULE_WINDING = CAIRO_FILL_RULE_WINDING;
    uint FILL_RULE_EVEN_ODD = CAIRO_FILL_RULE_EVEN_ODD;
    uint LINE_CAP_BUTT = CAIRO_LINE_CAP_BUTT;

    uint LINE_CAP_ROUND = CAIRO_LINE_CAP_ROUND;
    uint LINE_CAP_SQUARE = CAIRO_LINE_CAP_SQUARE;
    uint LINE_JOIN_MITER = CAIRO_LINE_JOIN_MITER;
    uint LINE_JOIN_ROUND = CAIRO_LINE_JOIN_ROUND;
    uint LINE_JOIN_BEVEL = CAIRO_LINE_JOIN_BEVEL;
    uint TEXT_CLUSTER_FLAG_BACKWARD = CAIRO_TEXT_CLUSTER_FLAG_BACKWARD;
    uint FONT_SLANT_NORMAL = CAIRO_FONT_SLANT_NORMAL;
    uint FONT_SLANT_ITALIC = CAIRO_FONT_SLANT_ITALIC;
    uint FONT_SLANT_OBLIQUE = CAIRO_FONT_SLANT_OBLIQUE;
    uint FONT_WEIGHT_NORMAL = CAIRO_FONT_WEIGHT_NORMAL;

    uint FONT_WEIGHT_BOLD = CAIRO_FONT_WEIGHT_BOLD;
    uint SUBPIXEL_ORDER_DEFAULT = CAIRO_SUBPIXEL_ORDER_DEFAULT;
    uint SUBPIXEL_ORDER_RGB = CAIRO_SUBPIXEL_ORDER_RGB;
    uint SUBPIXEL_ORDER_BGR = CAIRO_SUBPIXEL_ORDER_BGR;
    uint SUBPIXEL_ORDER_VRGB = CAIRO_SUBPIXEL_ORDER_VRGB;
    uint SUBPIXEL_ORDER_VBGR = CAIRO_SUBPIXEL_ORDER_VBGR;
    uint HINT_STYLE_DEFAULT = CAIRO_HINT_STYLE_DEFAULT;
    uint HINT_STYLE_NONE = CAIRO_HINT_STYLE_NONE;
    uint HINT_STYLE_SLIGHT = CAIRO_HINT_STYLE_SLIGHT;
    uint HINT_STYLE_MEDIUM = CAIRO_HINT_STYLE_MEDIUM;

    uint HINT_STYLE_FULL = CAIRO_HINT_STYLE_FULL;
    uint HINT_METRICS_DEFAULT = CAIRO_HINT_METRICS_DEFAULT;
    uint HINT_METRICS_OFF = CAIRO_HINT_METRICS_OFF;
    uint HINT_METRICS_ON = CAIRO_HINT_METRICS_ON;
    uint FONT_TYPE_TOY = CAIRO_FONT_TYPE_TOY;
    uint FONT_TYPE_FT = CAIRO_FONT_TYPE_FT;
    uint FONT_TYPE_WIN32 = CAIRO_FONT_TYPE_WIN32;
    uint FONT_TYPE_QUARTZ = CAIRO_FONT_TYPE_QUARTZ;
    uint FONT_TYPE_USER = CAIRO_FONT_TYPE_USER;
    uint PATH_MOVE_TO = CAIRO_PATH_MOVE_TO;

    uint PATH_LINE_TO = CAIRO_PATH_LINE_TO;
    uint PATH_CURVE_TO = CAIRO_PATH_CURVE_TO;
    uint PATH_CLOSE_PATH = CAIRO_PATH_CLOSE_PATH;
    uint DEVICE_TYPE_DRM = CAIRO_DEVICE_TYPE_DRM;
    uint DEVICE_TYPE_GL = CAIRO_DEVICE_TYPE_GL;
    uint DEVICE_TYPE_SCRIPT = CAIRO_DEVICE_TYPE_SCRIPT;
    uint DEVICE_TYPE_XCB = CAIRO_DEVICE_TYPE_XCB;
    uint DEVICE_TYPE_XLIB = CAIRO_DEVICE_TYPE_XLIB;
    uint DEVICE_TYPE_XML = CAIRO_DEVICE_TYPE_XML;
    uint SURFACE_TYPE_IMAGE = CAIRO_SURFACE_TYPE_IMAGE;

    uint SURFACE_TYPE_PDF = CAIRO_SURFACE_TYPE_PDF;
    uint SURFACE_TYPE_PS = CAIRO_SURFACE_TYPE_PS;
    uint SURFACE_TYPE_XLIB = CAIRO_SURFACE_TYPE_XLIB;
    uint SURFACE_TYPE_XCB = CAIRO_SURFACE_TYPE_XCB;
    uint SURFACE_TYPE_GLITZ = CAIRO_SURFACE_TYPE_GLITZ;
    uint SURFACE_TYPE_QUARTZ = CAIRO_SURFACE_TYPE_QUARTZ;
    uint SURFACE_TYPE_WIN32 = CAIRO_SURFACE_TYPE_WIN32;
    uint SURFACE_TYPE_BEOS = CAIRO_SURFACE_TYPE_BEOS;
    uint SURFACE_TYPE_DIRECTFB = CAIRO_SURFACE_TYPE_DIRECTFB;
    uint SURFACE_TYPE_SVG = CAIRO_SURFACE_TYPE_SVG;

    uint SURFACE_TYPE_OS2 = CAIRO_SURFACE_TYPE_OS2;
    uint SURFACE_TYPE_WIN32_PRINTING = CAIRO_SURFACE_TYPE_WIN32_PRINTING;
    uint SURFACE_TYPE_QUARTZ_IMAGE = CAIRO_SURFACE_TYPE_QUARTZ_IMAGE;
    uint SURFACE_TYPE_SCRIPT = CAIRO_SURFACE_TYPE_SCRIPT;
    uint SURFACE_TYPE_QT = CAIRO_SURFACE_TYPE_QT;
    uint SURFACE_TYPE_RECORDING = CAIRO_SURFACE_TYPE_RECORDING;
    uint SURFACE_TYPE_VG = CAIRO_SURFACE_TYPE_VG;
    uint SURFACE_TYPE_GL = CAIRO_SURFACE_TYPE_GL;
    uint SURFACE_TYPE_DRM = CAIRO_SURFACE_TYPE_DRM;
    uint SURFACE_TYPE_TEE = CAIRO_SURFACE_TYPE_TEE;

    uint SURFACE_TYPE_XML = CAIRO_SURFACE_TYPE_XML;
    uint SURFACE_TYPE_SKIA = CAIRO_SURFACE_TYPE_SKIA;
    uint SURFACE_TYPE_SUBSURFACE = CAIRO_SURFACE_TYPE_SUBSURFACE;
    uint FORMAT_INVALID = CAIRO_FORMAT_INVALID;
    uint FORMAT_ARGB32 = CAIRO_FORMAT_ARGB32;
    uint FORMAT_RGB24 = CAIRO_FORMAT_RGB24;
    uint FORMAT_A8 = CAIRO_FORMAT_A8;
    uint FORMAT_A1 = CAIRO_FORMAT_A1;
    uint FORMAT_RGB16_565 = CAIRO_FORMAT_RGB16_565;
    uint PATTERN_TYPE_SOLID = CAIRO_PATTERN_TYPE_SOLID;

    uint PATTERN_TYPE_SURFACE = CAIRO_PATTERN_TYPE_SURFACE;
    uint PATTERN_TYPE_LINEAR = CAIRO_PATTERN_TYPE_LINEAR;
    uint PATTERN_TYPE_RADIAL = CAIRO_PATTERN_TYPE_RADIAL;
    uint EXTEND_NONE = CAIRO_EXTEND_NONE;
    uint EXTEND_REPEAT = CAIRO_EXTEND_REPEAT;
    uint EXTEND_REFLECT = CAIRO_EXTEND_REFLECT;
    uint EXTEND_PAD = CAIRO_EXTEND_PAD;
    uint FILTER_FAST = CAIRO_FILTER_FAST;
    uint FILTER_GOOD = CAIRO_FILTER_GOOD;
    uint FILTER_BEST = CAIRO_FILTER_BEST;

    uint FILTER_NEAREST = CAIRO_FILTER_NEAREST;
    uint FILTER_BILINEAR = CAIRO_FILTER_BILINEAR;
    uint FILTER_GAUSSIAN = CAIRO_FILTER_GAUSSIAN;
    uint REGION_OVERLAP_IN = CAIRO_REGION_OVERLAP_IN;
    uint REGION_OVERLAP_OUT = CAIRO_REGION_OVERLAP_OUT;
    uint REGION_OVERLAP_PART = CAIRO_REGION_OVERLAP_PART;
    uint PDF_VERSION_1_4 = CAIRO_PDF_VERSION_1_4;
    uint PDF_VERSION_1_5 = CAIRO_PDF_VERSION_1_5;
    uint SVG_VERSION_1_1 = CAIRO_SVG_VERSION_1_1;
    uint SVG_VERSION_1_2 = CAIRO_SVG_VERSION_1_2;

    uint PS_LEVEL_2 = CAIRO_PS_LEVEL_2;
    uint PS_LEVEL_3 = CAIRO_PS_LEVEL_3;
} // CAIRO

CAIRO := CAIRO_CONSTANTS();

// Bound class definitions
class Rectangle;
class RectangleList;
class Matrix;
class Device;
class Surface;
class Pattern;
class Cairo;
class TextExtents;
class FontExtents;
class Region;
class Path;
class FontOptions;
class FontFace;
class ScaledFont;
class Glyph;

class Rectangle {
    cairo_rectangle_t rectangle = null;
    oper init(): rectangle=cairo_rectangle_new(){ }
    oper init(cairo_rectangle_t rectangle0): rectangle = rectangle0 { }

    oper del(){
        if (rectangle !is null)
            free(rectangle);
        rectangle = null;
    }
} // Rectangle

class RectangleList {
    cairo_rectangle_list_t rectangle_list = null;
    oper init(): rectangle_list=cairo_rectangle_list_new(){ }
    oper init(cairo_rectangle_list_t rectangle_list0): rectangle_list = rectangle_list0 { }

    oper del(){
        if (rectangle_list !is null)
            cairo_rectangle_list_destroy (rectangle_list);
        rectangle_list = null;
    }
} // RectangleList

class Path {
    cairo_path_t path;
    oper init (cairo_path_t path0): path = path0 { }
    oper del(){
        if (path !is null)
            cairo_path_destroy (path);
        path = null;
    }
}
class Matrix {
    cairo_matrix_t matrix = null;
    oper init(cairo_matrix_t matrix0): matrix = matrix0 { }
    oper init(): matrix = cairo_matrix_new() { }

    void init(float64 xx, float64 yx, float64 xy, float64 yy, float64 x0, float64 y0)
    {
        cairo_matrix_init(matrix, xx, yx, xy, yy, x0, y0);
    }

    oper init(float64 xx, float64 yx, float64 xy, float64 yy, float64 x0, float64 y0):
        matrix = cairo_matrix_new()
    {
        cairo_matrix_init(matrix, xx, yx, xy, yy, x0, y0);
    }

    oper del(){
        if (matrix !is null)
            free(matrix);
        matrix = null;
    }

    void init_identity() { cairo_matrix_init_identity(matrix); }

    @static
    Matrix identity() {
        Matrix m = {};
        cairo_matrix_init_identity(m.matrix);
        return m;
    }


    void init_translate(float64 tx, float64 ty) { cairo_matrix_init_translate(matrix, tx, ty); }

    @static
    Matrix new_translate(float64 tx, float64 ty) {
        Matrix m = {};
        cairo_matrix_init_translate(m.matrix, tx, ty);
        return m;
    }

    void init_scale(float64 sx, float64 sy) { cairo_matrix_init_scale(matrix, sx, sy); }

    @static
    Matrix new_scale(float64 sx, float64 sy) {
        Matrix m = {};
        cairo_matrix_init_scale(m.matrix, sx, sy);
        return m;
    }

    void init_rotate(float64 radians) { cairo_matrix_init_rotate(matrix, radians); }

    @static
    Matrix new_rotate(float64 radians) {
        Matrix m = {};
        cairo_matrix_init_rotate(m.matrix, radians);
        return m;
    }

    void translate(float64 tx, float64 ty) {
        cairo_matrix_translate(matrix, tx, ty);
    }

    void scale(float64 sx, float64 sy) { cairo_matrix_scale(matrix, sx, sy); }
    void rotate(float64 radians) { cairo_matrix_rotate(matrix, radians); }
    uint invert() { return cairo_matrix_invert(matrix); }


    Matrix inverted(){
        m := Matrix(matrix.xx, matrix.yx, matrix.xy, matrix.yy, matrix.x0, matrix.y0);
        m.invert();
        return m;
    }

    @static
    Matrix inverted(float64 xx, float64 yx, float64 xy, float64 yy, float64 x0, float64 y0){
        m := Matrix(xx, yx, xy, yy, x0, y0);
        m.invert();
        return m;
    }

    Matrix multiplied(Matrix b) {
        result := Matrix();
        cairo_matrix_multiply(result.matrix, matrix, b.matrix);
        return result;
    }

    Matrix oper *(Matrix b){
        return multiplied(b);
    }

    array[float64] _transform_distance(float64 dx, float64 dy) {
        distance := array[float64] ![dx, dy];
        cairo_matrix_transform_distance(matrix, distance, distance+1);
        return distance;
    }

    Array[float64] transform_distance(float64 dx, float64 dy) {
        return Array[float64](_transform_distance(dx,dy), 2);
    }

    Array[float64] transformed_distance(Array[float64] d) {
        return Array[float64](_transform_distance(d[0],d[1]), 2);
    }

    array[float64] _transform_point(float64 x, float64 y) {
        point := array[float64]![x, y];
        cairo_matrix_transform_point(matrix, point, point+1);
        return point;
    }

    Array[float64] transform_point(float64 x, float64 y) {
        return Array[float64](_transform_point(x, y), 2);
    }

    Array[float64] transform_point(Array[float64] x) {
        return Array[float64](_transform_point(x[0],x[1]), 2);
    }

    Array[float64] oper *(Array[float64] x){
        return transform_point(x);
    }

    void format(Formatter fmt){
        fmt `$(fmt.ARRAYSTART)$(fmt.ARRAYSTART)$(matrix.xx)$(fmt.ELEMSEP)$(matrix.yx)$(fmt.ARRAYEND)$(fmt.ELEMSEP)`;
        fmt `$(fmt.ARRAYSTART)$(matrix.xy)$(fmt.ELEMSEP)$(matrix.yy)$(fmt.ARRAYEND)$(fmt.ARRAYEND)$(fmt.ELEMSEP)`;
        fmt `$(fmt.ARRAYSTART)$(matrix.x0)$(fmt.ELEMSEP)$(matrix.y0)$(fmt.ARRAYEND)\n`;
    }

} // Matrix

class Glyph {
    cairo_glyph_t glyph = null;
    oper init(cairo_glyph_t glyph0): glyph = glyph0 { }

    oper del() { if (glyph !is null) cairo_glyph_free(glyph); }
} // Glyph

class TextExtents {
    cairo_text_extents_t extents = null;
    oper init(): extents = cairo_text_extents_new() { }
    oper init(cairo_text_extents_t extents0): extents = extents0 { }

    oper del(){
        if (extents !is null)
            free(extents);
    }

} // TextExtents

class FontExtents {
    cairo_font_extents_t extents = null;
    oper init(): extents = cairo_font_extents_new() { }
    oper init(cairo_font_extents_t extents0): extents = extents0 { }
    oper del(){

    if (extents !is null)
            free(extents);
    }

} // FontExtents

class FontOptions {
    cairo_font_options_t font_options = null;
    oper init(cairo_font_options_t font_options0): font_options = font_options0 { }

    FontOptions copy() { return FontOptions(cairo_font_options_copy(this.font_options)); }
    void destroy() { cairo_font_options_destroy(font_options); }
    uint status() { return cairo_font_options_status(font_options); }

    void merge(cairo_font_options_t other) { cairo_font_options_merge(font_options, other); }
    void merge(FontOptions other) { cairo_font_options_merge(font_options, other.font_options); }

    bool oper ==(cairo_font_options_t other) { return cairo_font_options_equal(font_options, other); }
    bool oper ==(FontOptions other) { return cairo_font_options_equal(font_options, other.font_options); }

    uint64 hash() { return cairo_font_options_hash(font_options); }

    void set_antialias(uint antialias) { cairo_font_options_set_antialias(font_options, antialias); }
    uint get_antialias() { return cairo_font_options_get_antialias(font_options); }
    void set_subpixel_order(uint subpixel_order) { cairo_font_options_set_subpixel_order(font_options, subpixel_order); }
    uint get_subpixel_order() { return cairo_font_options_get_subpixel_order(font_options); }

    void set_hint_style(uint hint_style) { cairo_font_options_set_hint_style(font_options, hint_style); }
    uint get_hint_style() { return cairo_font_options_get_hint_style(font_options); }
    void set_hint_metrics(uint hint_metrics) { cairo_font_options_set_hint_metrics(font_options, hint_metrics); }
    uint get_hint_metrics() { return cairo_font_options_get_hint_metrics(font_options); }

    void del(){ if (font_options !is null) cairo_font_options_destroy(font_options);}

} // FontOptions

class FontFace {
    cairo_font_face_t font_face = null;
    oper init(cairo_font_face_t font_face0): font_face = font_face0 { }

    FontFace reference() { return FontFace(cairo_font_face_reference(font_face)); }

    uint get_reference_count() { return cairo_font_face_get_reference_count(font_face); }
    uint status() { return cairo_font_face_status(font_face); }
    uint get_type() { return cairo_font_face_get_type(font_face); }
    byteptr cairo_toy_font_face_get_family() { return cairo_toy_font_face_get_family(font_face); }
    uint cairo_toy_font_face_get_slant() { return cairo_toy_font_face_get_slant(font_face); }
    uint cairo_toy_font_face_get_weight() { return cairo_toy_font_face_get_weight(font_face); }

    oper del() { if (font_face !is null)  cairo_font_face_destroy(font_face); }
} // FontFace

class ScaledFont {
    cairo_scaled_font_t scaled_font = null;
    oper init(cairo_scaled_font_t scaled_font0): scaled_font = scaled_font0 { }

    @static
    ScaledFont create(FontFace font_face, Matrix font_matrix, Matrix ctm, FontOptions options) {
        return ScaledFont(cairo_scaled_font_create(font_face.font_face, font_matrix.matrix, ctm.matrix, options.font_options));
    }

    ScaledFont reference() { return ScaledFont(cairo_scaled_font_reference(scaled_font)); }

    uint get_reference_count() { return cairo_scaled_font_get_reference_count(scaled_font); }
    uint status() { return cairo_scaled_font_status(scaled_font); }
    uint get_type() { return cairo_scaled_font_get_type(scaled_font); }

    FontExtents font_extents() {
        new_extents := cairo_font_extents_new();
        cairo_scaled_font_extents(scaled_font, new_extents);
        return FontExtents(new_extents);
    }

    TextExtents text_extents(String utf8) {
        new_extents := cairo_text_extents_new();
        cairo_scaled_font_text_extents(scaled_font, utf8.buffer, new_extents);
        return TextExtents(new_extents);

    }

    TextExtents glyph_extents(array[cairo_glyph_t] glyphs, int num_glyphs) {
        extents := cairo_text_extents_new();
        cairo_scaled_font_glyph_extents(scaled_font, glyphs, num_glyphs, extents);
        return TextExtents(extents);
    }

    uint text_to_glyphs(float64 x, float64 y, byteptr utf8, int utf8_len, array[cairo_glyph_t] glyphs, int num_glyphs, array[cairo_text_cluster_t] clusters, int num_clusters, array[uint] cluster_flags) { return cairo_scaled_font_text_to_glyphs(scaled_font, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags); }

    FontFace get_font_face() { return FontFace(cairo_scaled_font_get_font_face(scaled_font)); }
    Matrix matrix() {
        font_matrix := cairo_matrix_new();
        cairo_scaled_font_get_font_matrix(scaled_font, font_matrix);
        return Matrix(font_matrix);
    }

    Matrix ctm() {
        ctm := cairo_matrix_new();
        cairo_scaled_font_get_ctm(scaled_font, ctm);
        return Matrix(ctm);
    }

    Matrix scale_matrix(array[cairo_matrix_t] scale_matrix) {
        scale_matrix_new := cairo_matrix_new();
        cairo_scaled_font_get_scale_matrix(scaled_font, scale_matrix_new);
        return Matrix(scale_matrix_new);
    }

    FontOptions options() {
        options_new := cairo_font_options_create();
        cairo_scaled_font_get_font_options(scaled_font, options_new);
        return FontOptions(options_new);
    }

    oper del() { if (scaled_font !is null)  cairo_scaled_font_destroy(scaled_font); }

} // ScaledFont



class Device {
    cairo_device_t device = null;
    oper init(cairo_device_t device0): device = device0 { }

    oper del(){
        if (device !is null){
            cairo_device_destroy(device);
            device = null;
        }
    }

    uint get_type() { return cairo_device_get_type(device); }
    uint status() { return cairo_device_status(device); }
    uint acquire() { return cairo_device_acquire(device); }
    void flush() { cairo_device_flush(device); }
    void finish() { cairo_device_finish(device); }

    uint get_reference_count() { return cairo_device_get_reference_count(device); }
    voidptr get_user_data(cairo_user_data_key_t key) { return cairo_device_get_user_data(device, key); }

} // Device

class Pattern {
    cairo_pattern_t pattern = null;
    oper init(cairo_pattern_t pattern0): pattern = pattern0 {
    }

    oper del(){
        if (pattern !is null)
            cairo_pattern_destroy(pattern);
    }

    uint get_reference_count() { return cairo_pattern_get_reference_count(pattern); }
    uint status() { return cairo_pattern_status(pattern); }
    voidptr get_user_data(cairo_user_data_key_t key) { return cairo_pattern_get_user_data(pattern, key); }
    uint set_user_data(cairo_user_data_key_t key, voidptr user_data, function[void, voidptr] destroy) { return cairo_pattern_set_user_data(pattern, key, user_data, destroy); }
    uint get_type() { return cairo_pattern_get_type(pattern); }
    void add_color_stop_rgb(float64 offset, float64 red, float64 green, float64 blue) { cairo_pattern_add_color_stop_rgb(pattern, offset, red, green, blue); }
    void add_color_stop_rgba(float64 offset, float64 red, float64 green, float64 blue, float64 alpha) { cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, alpha); }

    void set_matrix(Matrix matrix) { cairo_pattern_set_matrix(pattern, matrix.matrix); }

    Matrix get_matrix() {
        matrix := cairo_matrix_new();
        cairo_pattern_get_matrix(pattern, matrix);
        return Matrix(matrix);
    }

    void set_extend(uint extend) { cairo_pattern_set_extend(pattern, extend); }
    uint get_extend() { return cairo_pattern_get_extend(pattern); }
    void set_filter(uint filter) { cairo_pattern_set_filter(pattern, filter); }
    uint get_filter() { return cairo_pattern_get_filter(pattern); }
    uint get_rgba(array[float64] red, array[float64] green, array[float64] blue, array[float64] alpha) { return cairo_pattern_get_rgba(pattern, red, green, blue, alpha); }

#~     uint get_surface(Surface surface) { return cairo_pattern_get_surface(pattern, surface.surface); }
    uint get_color_stop_rgba(int index, array[float64] offset, array[float64] red, array[float64] green, array[float64] blue, array[float64] alpha) { return cairo_pattern_get_color_stop_rgba(pattern, index, offset, red, green, blue, alpha); }
    uint get_color_stop_count(array[int] count) { return cairo_pattern_get_color_stop_count(pattern, count); }
    uint get_linear_points(array[float64] x0, array[float64] y0, array[float64] x1, array[float64] y1) { return cairo_pattern_get_linear_points(pattern, x0, y0, x1, y1); }

    uint get_radial_circles(array[float64] x0, array[float64] y0, array[float64] r0, array[float64] x1, array[float64] y1, array[float64] r1) { return cairo_pattern_get_radial_circles(pattern, x0, y0, r0, x1, y1, r1); }
} // Pattern

class Surface {
    cairo_surface_t surface = null;
    oper init(cairo_surface_t surface0): surface = surface0 { }

    oper del(){
        if (surface !is null){
           cairo_surface_destroy(surface);
        }
    }

    @static
    Surface createImage(uint format, int width, int height){
        return Surface(cairo_image_surface_create(format, width, height));
    }

    @static
    Surface createSVG(String filename, float64 width_in_points, float64 height_in_points){
        return Surface(cairo_svg_surface_create(CString(filename).buffer, width_in_points, height_in_points));
    }

    Surface create_similar(uint content, int width, int height) { return Surface(cairo_surface_create_similar(surface, content, width, height)); }
    Surface create_for_rectangle(float64 x, float64 y, float64 width, float64 height) { return Surface(cairo_surface_create_for_rectangle(surface, x, y, width, height)); }

    void finish() { cairo_surface_finish(surface); }
    Device get_device() { return Device(cairo_surface_get_device(surface)); }

    uint get_reference_count() { return cairo_surface_get_reference_count(surface); }
    uint status() { return cairo_surface_status(surface); }
    uint get_type() { return cairo_surface_get_type(surface); }
    uint get_content() { return cairo_surface_get_content(surface); }

    uint write_to_png(byteptr filename) { return cairo_surface_write_to_png(surface, filename); }
    uint write_to_png(String filename) { return cairo_surface_write_to_png(surface, CString(filename).buffer); }

    uint write_to_png_stream(function[uint, voidptr, byteptr, uint] write_func, voidptr closure) { return cairo_surface_write_to_png_stream(surface, write_func, closure); }
    voidptr get_user_data(cairo_user_data_key_t key) { return cairo_surface_get_user_data(surface, key); }
    uint set_user_data(cairo_user_data_key_t key, voidptr user_data, function[void, voidptr] destroy) { return cairo_surface_set_user_data(surface, key, user_data, destroy); }
    void get_mime_data(byteptr mime_type, array[byteptr] data, array[uint64] length) { cairo_surface_get_mime_data(surface, mime_type, data, length); }
    uint set_mime_data(byteptr mime_type, byteptr data, uint64 length, function[void, voidptr] destroy, voidptr closure) { return cairo_surface_set_mime_data(surface, mime_type, data, length, destroy, closure); }
    void get_font_options(cairo_font_options_t options) { cairo_surface_get_font_options(surface, options); }
    void flush() { cairo_surface_flush(surface); }
    void mark_dirty() { cairo_surface_mark_dirty(surface); }
    void mark_dirty_rectangle(int x, int y, int width, int height) { cairo_surface_mark_dirty_rectangle(surface, x, y, width, height); }

    void set_device_offset(float64 x_offset, float64 y_offset) { cairo_surface_set_device_offset(surface, x_offset, y_offset); }
    void get_device_offset(array[float64] x_offset, array[float64] y_offset) { cairo_surface_get_device_offset(surface, x_offset, y_offset); }
    void set_fallback_resolution(float64 x_pixels_per_inch, float64 y_pixels_per_inch) { cairo_surface_set_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch); }
    void get_fallback_resolution(array[float64] x_pixels_per_inch, array[float64] y_pixels_per_inch) { cairo_surface_get_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch); }
    void copy_page() { cairo_surface_copy_page(surface); }
    void show_page() { cairo_surface_show_page(surface); }
    bool has_show_text_glyphs() { return cairo_surface_has_show_text_glyphs(surface); }
    byteptr image_surface_get_data() { return cairo_image_surface_get_data(surface); }
    uint image_surface_get_format() { return cairo_image_surface_get_format(surface); }
    int image_surface_get_width() { return cairo_image_surface_get_width(surface); }

    int image_surface_get_height() { return cairo_image_surface_get_height(surface); }
    int image_surface_get_stride() { return cairo_image_surface_get_stride(surface); }
    void recording_surface_ink_extents(array[float64] x0, array[float64] y0, array[float64] width, array[float64] height) { cairo_recording_surface_ink_extents(surface, x0, y0, width, height); }
    Pattern create_for_surface() { return Pattern(cairo_pattern_create_for_surface(surface)); }
    void pdf_surface_restrict_to_version(uint version) { cairo_pdf_surface_restrict_to_version(surface, version); }
    void pdf_surface_set_size(float64 width_in_points, float64 height_in_points) { cairo_pdf_surface_set_size(surface, width_in_points, height_in_points); }
    void svg_surface_restrict_to_version(uint version) { cairo_svg_surface_restrict_to_version(surface, version); }

#~     Array[uint] cairo_svg_get_versions(){
#~         (array[uint] versions, array[int] num_versions);
    String svg_version_to_string(uint version){
        return String(cairo_svg_version_to_string(version));
    }

    void xlib_surface_set_size(int width, int height) { cairo_xlib_surface_set_size(surface, width, height); }
    void xlib_surface_set_drawable(Drawable drawable, int width, int height) { cairo_xlib_surface_set_drawable(surface, drawable, width, height); }
    Display xlib_surface_get_display() { return cairo_xlib_surface_get_display(surface); }

    Drawable xlib_surface_get_drawable() { return cairo_xlib_surface_get_drawable(surface); }
    Screen xlib_surface_get_screen() { return cairo_xlib_surface_get_screen(surface); }
    Visual xlib_surface_get_visual() { return cairo_xlib_surface_get_visual(surface); }
    int xlib_surface_get_depth() { return cairo_xlib_surface_get_depth(surface); }
    int xlib_surface_get_width() { return cairo_xlib_surface_get_width(surface); }
    int xlib_surface_get_height() { return cairo_xlib_surface_get_height(surface); }
    void ps_surface_restrict_to_level(uint level) { cairo_ps_surface_restrict_to_level(surface, level); }
    void ps_surface_set_eps(bool eps) { cairo_ps_surface_set_eps(surface, eps); }
    bool ps_surface_get_eps() { return cairo_ps_surface_get_eps(surface); }
    void ps_surface_set_size(float64 width_in_points, float64 height_in_points) { cairo_ps_surface_set_size(surface, width_in_points, height_in_points); }

    void ps_surface_dsc_comment(byteptr comment) { cairo_ps_surface_dsc_comment(surface, comment); }
    void ps_surface_dsc_begin_setup() { cairo_ps_surface_dsc_begin_setup(surface); }
    void ps_surface_dsc_begin_page_setup() { cairo_ps_surface_dsc_begin_page_setup(surface); }
} // Surface

class Region {
    cairo_region_t region = null;
    oper init(cairo_region_t region0): region = region0 { }

    oper del(){
        if (region !is null)
            cairo_region_destroy(region);
        region = null;
    }

    Region copy() { return Region(cairo_region_copy(region)); }
    bool equal(cairo_region_t b) { return cairo_region_equal(region, b); }
    bool equal(Region b) { return cairo_region_equal(region, b.region); }
    uint status() { return cairo_region_status(region); }
    void get_extents(cairo_rectangle_int_t extents) { cairo_region_get_extents(region, extents); }
    int num_rectangles() { return cairo_region_num_rectangles(region); }
    void get_rectangle(int nth, cairo_rectangle_int_t rectangle) { cairo_region_get_rectangle(region, nth, rectangle); }
    bool is_empty() { return cairo_region_is_empty(region); }
    uint contains_rectangle(cairo_rectangle_int_t rectangle) { return cairo_region_contains_rectangle(region, rectangle); }

    bool contains_point(int x, int y) { return cairo_region_contains_point(region, x, y); }
    void translate(int dx, int dy) { cairo_region_translate(region, dx, dy); }
    uint subtract(cairo_region_t other) { return cairo_region_subtract(region, other); }
    uint subtract(Region other) { return cairo_region_subtract(region, other.region); }
    uint subtract_rectangle(cairo_rectangle_int_t rectangle) { return cairo_region_subtract_rectangle(region, rectangle); }
    uint intersect(cairo_region_t other) { return cairo_region_intersect(region, other); }
    uint intersect(Region other) { return cairo_region_intersect(region, other.region); }
    uint intersect_rectangle(cairo_rectangle_int_t rectangle) { return cairo_region_intersect_rectangle(region, rectangle); }
    uint union(cairo_region_t other) { return cairo_region_union(region, other); }
    uint union(Region other) { return cairo_region_union(region, other.region); }
    uint union_rectangle(cairo_rectangle_int_t rectangle) { return cairo_region_union_rectangle(region, rectangle); }
    uint xor(cairo_region_t other) { return cairo_region_xor(region, other); }
    uint xor(Region other) { return cairo_region_xor(region, other.region); }
    uint xor_rectangle(cairo_rectangle_int_t rectangle) { return cairo_region_xor_rectangle(region, rectangle); }
#~     uint xor_rectangle(Rectangle rectangle) { return cairo_region_xor_rectangle(region, rectangle.rectangle); }
} // Region

class Cairo {
    cairo_t cr = null;
    Surface surface = null;
    oper init(cairo_t cr0): cr = cr0 { }

    oper init(Surface surface0): surface = surface0{
        cr = cairo_create(surface.surface);
    }

    oper del(){
        if (cr !is null)
            cairo_destroy(cr);
    }

    uint get_reference_count() { return cairo_get_reference_count(cr); }
    void save() { cairo_save(cr); }
    void restore() { cairo_restore(cr); }
    void push_group() { cairo_push_group(cr); }
    Pattern pop_group() { return Pattern(cairo_pop_group(cr)); }
    void pop_group_to_source() { cairo_pop_group_to_source(cr); }
    void set_operator(uint op) { cairo_set_operator(cr, op); }
    void set_source(cairo_pattern_t source) { cairo_set_source(cr, source); }
    void set_source(Pattern source) { cairo_set_source(cr, source.pattern); }

    void set_source_rgb(float64 red, float64 green, float64 blue) { cairo_set_source_rgb(cr, red, green, blue); }
    void set_source_rgba(float64 red, float64 green, float64 blue, float64 alpha) { cairo_set_source_rgba(cr, red, green, blue, alpha); }
    void set_source_surface(cairo_surface_t surface, float64 x, float64 y) { cairo_set_source_surface(cr, surface, x, y); }
    void set_source_surface(Surface surface, float64 x, float64 y) { cairo_set_source_surface(cr, surface.surface, x, y); }
    void set_tolerance(float64 tolerance) { cairo_set_tolerance(cr, tolerance); }
    void set_antialias(uint antialias) { cairo_set_antialias(cr, antialias); }
    void set_fill_rule(uint fill_rule) { cairo_set_fill_rule(cr, fill_rule); }
    void set_line_width(float64 width) { cairo_set_line_width(cr, width); }
    void set_line_cap(uint line_cap) { cairo_set_line_cap(cr, line_cap); }
    void set_line_join(uint line_join) { cairo_set_line_join(cr, line_join); }
    void set_dash(array[float64] dashes, int num_dashes, float64 offset) { cairo_set_dash(cr, dashes, num_dashes, offset); }

    void set_dash(Array[float64] dashes, float64 offset) {
        cairo_set_dash(cr, dashes.data.rep, dashes.count(), offset);
    }

    void set_miter_limit(float64 limit) { cairo_set_miter_limit(cr, limit); }
    void translate(float64 tx, float64 ty) { cairo_translate(cr, tx, ty); }
    void scale(float64 sx, float64 sy) { cairo_scale(cr, sx, sy); }
    void rotate(float64 angle) { cairo_rotate(cr, angle); }
    void transform(cairo_matrix_t matrix) { cairo_transform(cr, matrix); }
    void transform(Matrix matrix) { cairo_transform(cr, matrix.matrix); }
    void set_matrix(cairo_matrix_t matrix) { cairo_set_matrix(cr, matrix); }
    void set_matrix(Matrix matrix) { cairo_set_matrix(cr, matrix.matrix); }
    void identity_matrix() { cairo_identity_matrix(cr); }

    // Some user <--> device coord transforms
    void user_to_device(array[float64] x, array[float64] y) { cairo_user_to_device(cr, x, y); }

    Array[float64] user_to_device(float64 x, float64 y) {
        xA := array[float64]![x];
        yA := array[float64]![y];
        cairo_user_to_device(cr, xA, yA);
        return Array[float64]![xA[0], yA[0]];
    }

    void user_to_device_distance(array[float64] dx, array[float64] dy) { cairo_user_to_device_distance(cr, dx, dy); }

    Array[float64] user_to_device_distance(float64 dx, float64 dy) {
        dxA := array[float64]![dx];
        dyA := array[float64]![dy];
        cairo_user_to_device_distance(cr, dxA, dyA);
        return Array[float64]![dxA[0], dyA[0]];
    }

    void device_to_user(array[float64] x, array[float64] y) { cairo_device_to_user(cr, x, y); }

    Array[float64] device_to_user(float64 x, float64 y) {
        xA := array[float64]![x];
        yA := array[float64]![y];
        cairo_device_to_user(cr, xA, yA);
        return Array[float64]![xA[0], yA[0]];
    }


    void device_to_user_distance(array[float64] dx, array[float64] dy) { cairo_device_to_user_distance(cr, dx, dy); }
    Array[float64] device_to_user_distance(float64 dx, float64 dy) {
        dxA := array[float64]![dx];
        dyA := array[float64]![dy];
        cairo_device_to_user_distance(cr, dxA, dyA);
        return Array[float64]![dxA[0], dyA[0]];
    }

    void new_path() { cairo_new_path(cr); }
    void move_to(float64 x, float64 y) { cairo_move_to(cr, x, y); }
    void new_sub_path() { cairo_new_sub_path(cr); }
    void line_to(float64 x, float64 y) { cairo_line_to(cr, x, y); }
    void curve_to(float64 x1, float64 y1, float64 x2, float64 y2, float64 x3, float64 y3) { cairo_curve_to(cr, x1, y1, x2, y2, x3, y3); }
    void arc(float64 xc, float64 yc, float64 radius, float64 angle1, float64 angle2) { cairo_arc(cr, xc, yc, radius, angle1, angle2); }
    void arc_negative(float64 xc, float64 yc, float64 radius, float64 angle1, float64 angle2) { cairo_arc_negative(cr, xc, yc, radius, angle1, angle2); }
    void rel_move_to(float64 dx, float64 dy) { cairo_rel_move_to(cr, dx, dy); }
    void rel_line_to(float64 dx, float64 dy) { cairo_rel_line_to(cr, dx, dy); }

    void rel_curve_to(float64 dx1, float64 dy1, float64 dx2, float64 dy2, float64 dx3, float64 dy3) { cairo_rel_curve_to(cr, dx1, dy1, dx2, dy2, dx3, dy3); }
    void rectangle(float64 x, float64 y, float64 width, float64 height) { cairo_rectangle(cr, x, y, width, height); }
    void close_path() { cairo_close_path(cr); }
    void path_extents(array[float64] x1, array[float64] y1, array[float64] x2, array[float64] y2) { cairo_path_extents(cr, x1, y1, x2, y2); }
    void paint() { cairo_paint(cr); }
    void paint_with_alpha(float64 alpha) { cairo_paint_with_alpha(cr, alpha); }
    void mask(cairo_pattern_t pattern) { cairo_mask(cr, pattern); }
    void mask(Pattern pattern) { cairo_mask(cr, pattern.pattern); }
    void mask_surface(cairo_surface_t surface, float64 surface_x, float64 surface_y) { cairo_mask_surface(cr, surface, surface_x, surface_y); }
    void mask_surface(Surface surface, float64 surface_x, float64 surface_y) { cairo_mask_surface(cr, surface.surface, surface_x, surface_y); }
    void stroke() { cairo_stroke(cr); }
    void stroke_preserve() { cairo_stroke_preserve(cr); }

    void fill() { cairo_fill(cr); }
    void fill_preserve() { cairo_fill_preserve(cr); }
    void copy_page() { cairo_copy_page(cr); }
    void show_page() { cairo_show_page(cr); }
    bool in_stroke(float64 x, float64 y) { return cairo_in_stroke(cr, x, y); }
    bool in_fill(float64 x, float64 y) { return cairo_in_fill(cr, x, y); }
    bool in_clip(float64 x, float64 y) { return cairo_in_clip(cr, x, y); }
    void stroke_extents(array[float64] x1, array[float64] y1, array[float64] x2, array[float64] y2) { cairo_stroke_extents(cr, x1, y1, x2, y2); }
    void fill_extents(array[float64] x1, array[float64] y1, array[float64] x2, array[float64] y2) { cairo_fill_extents(cr, x1, y1, x2, y2); }
    void reset_clip() { cairo_reset_clip(cr); }

    void clip() { cairo_clip(cr); }
    void clip_preserve() { cairo_clip_preserve(cr); }
    void clip_extents(array[float64] x1, array[float64] y1, array[float64] x2, array[float64] y2) { cairo_clip_extents(cr, x1, y1, x2, y2); }
    RectangleList copy_clip_rectangle_list() { return RectangleList(cairo_copy_clip_rectangle_list(cr)); }
    void select_font_face(String family, uint slant, uint weight) { cairo_select_font_face(cr, family.buffer, slant, weight); }
    void set_font_size(float64 size) { cairo_set_font_size(cr, size); }
    void set_font_matrix(cairo_matrix_t matrix) { cairo_set_font_matrix(cr, matrix); }
    void set_font_matrix(Matrix matrix) { cairo_set_font_matrix(cr, matrix.matrix); }
    void get_font_matrix(cairo_matrix_t matrix) { cairo_get_font_matrix(cr, matrix); }
    void get_font_matrix(Matrix matrix) { cairo_get_font_matrix(cr, matrix.matrix); }

    void set_font_options(FontOptions options) { cairo_set_font_options(cr, options.font_options); }

    void get_font_options(cairo_font_options_t options) { cairo_get_font_options(cr, options); }

    void set_font_face(FontFace font_face) { cairo_set_font_face(cr, font_face.font_face); }

    FontFace get_font_face() { return FontFace(cairo_get_font_face(cr)); }
    void set_scaled_font(cairo_scaled_font_t scaled_font) { cairo_set_scaled_font(cr, scaled_font); }
    ScaledFont get_scaled_font() { return ScaledFont(cairo_get_scaled_font(cr)); }
    void show_text(byteptr utf8) { cairo_show_text(cr, utf8); }
    void show_glyphs(cairo_glyph_t glyphs, int num_glyphs) { cairo_show_glyphs(cr, glyphs, num_glyphs); }
    void show_text_glyphs(byteptr utf8, int utf8_len, cairo_glyph_t glyphs, int num_glyphs, cairo_text_cluster_t clusters, int num_clusters, array[uint] cluster_flags) { cairo_show_text_glyphs(cr, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags); }
    void text_path(byteptr utf8) { cairo_text_path(cr, utf8); }
    void glyph_path(cairo_glyph_t glyphs, int num_glyphs) { cairo_glyph_path(cr, glyphs, num_glyphs); }

    void text_extents(byteptr utf8, cairo_text_extents_t extents) { cairo_text_extents(cr, utf8, extents); }

    TextExtents text_extents(byteptr utf8) {
        extents := TextExtents();
        cairo_text_extents(cr, utf8, extents.extents);
        return extents;
    }

    TextExtents glyph_extents(array[cairo_glyph_t] glyphs, int num_glyphs) {
        extents := TextExtents();
        cairo_glyph_extents(cr, glyphs, num_glyphs, extents.extents);
        return extents;
    }

    FontExtents font_extents() {
        extents := FontExtents();
        cairo_font_extents(cr, extents.extents);
        return extents;
    }

    uint get_operator() { return cairo_get_operator(cr); }
    Pattern get_source() { return Pattern(cairo_get_source(cr)); }
    float64 get_tolerance() { return cairo_get_tolerance(cr); }
    uint get_antialias() { return cairo_get_antialias(cr); }
    bool has_current_point() { return cairo_has_current_point(cr); }
    void get_current_point(array[float64] x, array[float64] y) { cairo_get_current_point(cr, x, y); }
    uint get_fill_rule() { return cairo_get_fill_rule(cr); }
    float64 get_line_width() { return cairo_get_line_width(cr); }

    uint get_line_cap() { return cairo_get_line_cap(cr); }
    uint get_line_join() { return cairo_get_line_join(cr); }
    float64 get_miter_limit() { return cairo_get_miter_limit(cr); }
    int get_dash_count() { return cairo_get_dash_count(cr); }
    void get_dash(array[float64] dashes, array[float64] offset) { cairo_get_dash(cr, dashes, offset); }

    Matrix get_matrix() {
        m := Matrix();
        cairo_get_matrix(cr, m.matrix);
        return m;
    }

    Surface get_target() { return Surface(cairo_get_target(cr)); }
    Surface get_group_target() { return Surface(cairo_get_group_target(cr)); }
    cairo_path_t copy_path() { return cairo_copy_path(cr); }
    cairo_path_t copy_path_flat() { return cairo_copy_path_flat(cr); }

    void append_path(cairo_path_t path) { cairo_append_path(cr, path); }
    uint status() { return cairo_status(cr); }
} // Cairo
