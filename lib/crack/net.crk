# Copyright 2010-2012 Google Inc.
# Copyright 2012 Shannon Weyrick <weyrick@mozek.us>
# Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.functor Functor2;
import crack.io cerr, FDReader, FDWriter, FileHandle, FStr, Reader, Writer;
import crack.lang Buffer, CString, Exception, Formatter, FreeBase,
    InvalidArgumentError, InvalidStateError, ManagedBuffer, SystemError,
    WriteBuffer;
import crack.runtime accept, bind, close, connect, errno, free, getSockName,
    listen, makeIPV4, recv, send, setNonBlocking, setsockopt, shutdown, socket,
    strlen, AddrInfo, AF_AX25, AF_INET6, AF_X25, PipeAddr, PollEvt, PollSet,
    SigSet, SockAddr, SockAddrIn, SockAddrUn, TimeVal, AF_APPLETALK, AF_ATMPVC,
    AF_INET, AF_IPX, AF_LOCAL, AF_NETLINK, AF_PACKET, AF_UNIX, EAGAIN,
    EWOULDBLOCK, INADDR_ANY, POLLERR, POLLHUP, POLLIN, POLLNVAL, POLLOUT,
    POLLPRI, SHUT_RD, SHUT_RDWR, SHUT_WR, SOCK_DGRAM, SOCK_PACKET, SOCK_RAW,
    SOCK_RDM, SOCK_SEQPACKET, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR;
import crack.sys strerror;
import crack.time TimeDelta;

@import crack.ann implements;

@export_symbols AF_UNIX, AF_LOCAL, AF_INET, AF_INET6, AF_IPX, AF_NETLINK,
    AF_X25, AF_AX25, AF_ATMPVC, AF_APPLETALK, AF_PACKET, SHUT_RD, SHUT_RDWR,
    SHUT_WR, SOCK_STREAM, SOCK_DGRAM, SOCK_SEQPACKET, SOCK_RAW, SOCK_RDM,
    SOCK_PACKET, SOL_SOCKET, SO_REUSEADDR, POLLIN, POLLOUT, POLLPRI, POLLERR,
    POLLHUP, POLLNVAL, INADDR_ANY, PollEventCallback;

## An event received by a poller.
## Attributes are:
##  pollable: the pollable object.
##  events: the original events that we were waiting for
##  revents: the events that were triggered
class PollEvent : Object, PollEvt {
    FileHandle pollable;
    oper init() {}
    oper init(FileHandle pollable) : pollable = pollable {}
}

## base class for all kinds of socket addresses.
@abstract class Address {
    SockAddr _addr;

    oper init(SockAddr addr) : _addr = addr {}
    oper del() { free(_addr); }

    @abstract Address create();
}

## IPv4 address.
class InetAddress : Address {

    ## Construct an address from the dotted values of the IP address and a
    ## port number represented as a host-style integer (for example
    ## InetAddr(127, 0, 0, 1, 80) would talk to the local HTTP server)
    oper init(byte a, byte b, byte c, byte d, int port) :
        Address(SockAddrIn(a, b, c, d, port)) {
    }

    ## Constructs an address from an IP address and port, both represented as
    ## host-style integers.
    oper init(uint32 addr, uint port) :
        Address(SockAddrIn(addr, port)) {
    }

    ## Returns the IPv4 address as a host-style integer.
    uint32 getAddr() {
        return SockAddrIn.unsafeCast(_addr).addr;
    }

    ## Returns the port number as a host-style integer.
    uint16 getPort() {
        return SockAddrIn.unsafeCast(_addr).port;
    }

    ## Construct a new address from the specified IP address and the given
    ## port.
    oper init(InetAddress other, uint port) :
        Address(SockAddrIn(other.getAddr(), port)) {
    }

    Address create() {
        i := SockAddrIn.unsafeCast(_addr);
        return InetAddress(i.addr, i.port);
    }

    void formatTo(Formatter fmt) {
        i := SockAddrIn.unsafeCast(_addr);
        addr := i.addr;
        fmt `$(addr >> 24).$((addr >> 8) & 0xff).$((addr >> 16) & 0xff)\
.$(addr & 0xff):$(i.port)`;
    }

    int cmp(Object other) {
        if (!other.isa(InetAddress))
            return Object.cmp(other);
        a := SockAddrIn.unsafeCast(_addr);
        b := SockAddrIn.unsafeCast(InetAddress.unsafeCast(other)._addr);
        int rc = a.addr - b.addr; if (rc) return rc;
        rc = a.port - b.port;
        return rc;
    }
}

class _PrivateConstructor {}
_PrivateConstructor _PRIV_CONS;

## Address of a UNIX domain socket.
class UnixAddress : Address {
    oper init(Buffer name) : Address(SockAddrUn(name.buffer, name.size)) {
    }

    oper init(_PrivateConstructor arg) : Address(SockAddrUn(null, 0)) {}

    Address create() {
        i := SockAddrUn.unsafeCast(_addr);
        return UnixAddress(StaticString(i.getPath()));
    }
}

## Get all of the addresses for the specified hostname.
Array[Address] resolve(CString hostname) {
    Array[Address] result = {};
    info := AddrInfo(hostname.buffer, null, null);
    while (info !is null) {
        if (info.ai_family == AF_INET) {

            # create an address instance
            inAddr := info.getInAddr();
            addr := InetAddress(SockAddrIn.htonl(inAddr.addr),
                                SockAddrIn.htons(inAddr.port)
                                );

            # make sure it's not in the existing list
            bool exists;
            for (existing :in result) {
                if (addr == existing) {
                    exists = true;
                    break;
                }
            }

            if (!exists)
                result.append(addr);
        }
        info = info.ai_next;
    }

    return result;
}

Array[Address] resolve(String hostname) {
    return resolve(CString(hostname));
}

## Wrapper around a socket.
class Socket : FileHandle @implements Reader, Writer {

    # the address the socket is bound to.
    Address __bound;

    oper init(int domain, int type, int protocol) :
        FileHandle(socket(domain, type, protocol)) {
    }

    oper init(int fd) : FileHandle(fd) {}

    void close() {
        if (fd != -1) {
          close(fd);
          fd = -1;
        }
    }

    oper del() {
        if (fd != -1)
            close();
    }

    ## Connect to the address.  Returns true on success, false on failure.
    bool connect(Address addr) {
        return connect(fd, addr._addr) == 0;
    }

    ## Bind to the address.  Returns true on success, false on failure.
    bool bind(Address addr) {
        if (bind(fd, addr._addr) == 0) {
            __bound = addr;
            return true;
        } else {
            return false;
        }
    }

    bool listen(int backlog) {
        return listen(fd, backlog) == 0;
    }

    bool setReuseAddr(bool val) {
        return setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, val ? 1 : 0) == 0;
    }

    int setNonBlocking(bool val) {
        return setNonBlocking(fd, val);
    }

    int send(Buffer data, int flags) {
        return send(fd, data.buffer, data.size, flags);
    }

    int recv(WriteBuffer buf, int flags) {
        rc := recv(fd, buf.buffer, buf.cap, flags);
        buf.size = (rc == -1) ? 0 : rc;
        return rc;
    }

    ## Shutdown the socket.  See 'man 2 shutdown'.  'how' is SHUT_WR, SHUT_RD,
    ## or SHUT_RDWR.  Returns true on success, false on failure.
    bool shutdown(int how) {
        return shutdown(fd, how) == 0;
    }

    class Accepted {
        Socket sock;
        Address addr;

        oper init(Socket sock, Address addr) :
            sock = sock,
            addr = addr {
        }

        void formatTo(Formatter fmt){
            fmt.write("Accepted(");
            if (sock is null)
                fmt.write("<nosock>");
            else
                fmt.format(sock);
            fmt.write(", ");

            if (addr is null)
                fmt.write("<noaddr>");
            else
                fmt.format(addr);
            fmt.write(")");
        }
    }

    ## Returns null if there was an error, errno should contain the error.
    Accepted accept() {
        if (!__bound)
            throw InvalidStateError("Attempting accept on socket that hasn't "
                                     'been \"bind()ed"'
                                    );
        Address addr = __bound.create();
        rc := accept(fd, addr._addr);
        if (rc == -1)
            return null;
        return Accepted(Socket(rc), addr);
    }

    void formatTo(Formatter fmt) {
        fmt `Socket (fd: $fd)`;
    }

    # Reader interface
    uint read(WriteBuffer buffer) {
        rc := recv(buffer, 0);
        if (rc < 0) {
            // don't error on non blocking
            if (errno() == EAGAIN || errno() == EWOULDBLOCK)
                return 0;
            throw SystemError(FStr() `Error reading from socket`);
        }
        return uint(rc);
    }

    # Writer interface

    void _write(byteptr cstr, uint len){
        rc := send(fd, cstr, len, 0);
        if (rc < 0)
            throw SystemError(FStr() `Error writing to socket`);
        if (rc != len)
            throw Exception('Incomplete write to socket');
    }

    void write(byteptr cstr){
        _write(cstr, strlen(cstr));
    }

    void write(Buffer data) {
        _write(data.buffer, data.size);
    }
}

## Wrapper around a Pipe.
##
## The file descriptor of the pipe is the file descriptor of the read end, so
## you can use a pipe for communication to a poller thread.
class Pipe : FileHandle @implements Reader, Writer {
    PipeAddr __addr;
    FDReader __reader = null;
    FDWriter __writer = null;

    @final void __init() {
        if (__addr is null) throw Exception('Unable to create PipeAddr');
        fd = __addr.readfd;
    }

    oper init() : FileHandle(-1), __addr(0) {
        __init();
    }

    oper init(int32 flags) : FileHandle(-1), __addr(flags) {
        __init();
    }

    oper init(int32 flags, int32 readfd, int32 writefd) :
        FileHandle(-1),
        __addr(flags, readfd, writefd) {

        __init();
    }

    PipeAddr getAddr(){
        return __addr;
    }

    bool isOpen(){
        return __addr.readfd !=-1 || __addr.writefd !=0;
    }

    int getFD() {
        if (isOpen() && __addr.readfd !=-1)
            return __addr.readfd;
        return __addr.writefd;
    }

    void close() {
        if (__addr.readfd != -1){
            close(__addr.readfd);
            __reader = null;
            __addr.readfd = -1;
        }

        if (__addr.writefd != -1){
            close(__addr.writefd);
            __writer = null;
            __addr.writefd = -1;
        }
    }

    oper del() {
        close();
    }

    int setNonBlocking(bool val) {
        if (__addr.readfd != -1)
            return setNonBlocking(__addr.readfd, val);
        if (__addr.writefd != -1)
            return setNonBlocking(__addr.readfd, val);
        return 0;
    }

    void formatTo(Formatter fmt) {
        if (__addr is null)
            fmt.write("Pipe(-1, -1, -1)");
        else
            fmt `Pipe($(__addr.flags), $(__addr.readfd), $(__addr.writefd))`;
    }

    # Reader interface
    uint read(WriteBuffer buffer) {
        if (!__reader)
            __reader = FDReader(__addr.readfd);
        return __reader.read(buffer);
    }

    # Writer interface
    void write(Buffer data) {
        if (!__writer)
            __writer = FDWriter(__addr.writefd);
        __writer.write(data);
    }

    void write(byteptr data) {
        if (!__writer)
            __writer = FDWriter(__addr.writefd);
        __writer.write(data);
    }
}

class Poller;
alias PollEventCallback = Functor2[int, Poller, PollEvent];

## A poller is a collection of FileHandle's that you can use to wait for an
## event on any of the pollables and then iterate over the set of events that
## occurred.
class Poller {

    # The array of pollables and the file-descriptor set, which is also an
    # array that corresponds 1:1 with the set of pollables.
    # The order of these arrays are significant.  The only legal mutations are
    # append and delete.  A callback can indirectly delete any number of
    # pollables, but it can only insert at the end.  This is a fundamental
    # assumption in the callback processing code.
    Array[FileHandle] __pollables;
    PollSet __fds;

    class CallbackWrapper {
        PollEventCallback callback;
        oper init(PollEventCallback callback) : callback = callback {}
    }
    HashMap[FileHandle, CallbackWrapper] __callbacks;
    TimeVal __pollTimeout;
    uint __nextIndex;
    uint __capacity;
    int __iter;

    oper init() :
        __pollables(256),
        __fds = PollSet(256),
        __pollTimeout(0,0),
        __capacity = 256 {
    }

    oper del() {
        __fds.destroy();
        // XXX no mem mangement for TimeVal
        free(__pollTimeout);
    }

    void grow(uint newCapacity) {
        if (newCapacity < __capacity)
            throw Exception('cannot shrink');

        __pollables.grow(newCapacity);

        # create a new pollset and copy the existing one.
        newFDs := PollSet(newCapacity);
        newFDs.copy(__fds, __capacity);

        __capacity = newCapacity;
    }

    ## Add the pollable to be managed by the poller.  'events' is the set of
    ## events that we listen for, or'ed together.
    ## The known events are:
    ##  POLLIN - p is ready to read.
    ##  POLLOUT - p is ready to accept data
    ##  POLLERR - p has an error
    ## Less commonly used events are:
    ##  POLLPRI - p has high priority data to read.
    ##  POLLHUP - p's connection has hung up on it while trying to output.
    ##  POLLNVAL - p has received an invalid request.
    ##
    ## Throws InvalidArgumentError if the pollable's file descriptor. is
    ## already managed by this poller.
    void add(FileHandle p, int events) {

        # make sure it's not already present
        for (cur :in __pollables)
            if (p.fd == cur.fd)
                throw InvalidArgumentError(FStr() I`File descriptor $(p.fd) \
                                                    is already managed by \
                                                    this poller.`
                                           );

        # grow if there's not enough space
        if (__nextIndex == __capacity) grow(__capacity * 2);

        # add it to the pollables and to the fds.
        __pollables.append(p);
        __fds.set(__nextIndex, p.fd, events, 0);

        ++__nextIndex;
    }

    ## Adds the pollable to be managed by the poller, but also specifies a
    ## callback for event processing.  It is the handler that will be
    ## responsible for defining the set of events for the pollable (it will
    ## be requested to do so initially upon being added and then after
    ## handling every request).
    void add(FileHandle p, PollEventCallback callback) {
        add(p, callback(this, PollEvent(p)));
        if (__callbacks is null)
            __callbacks = HashMap[FileHandle, CallbackWrapper]();
        __callbacks[p] = CallbackWrapper(callback);
    }

    void remove(FileHandle p) {
        int i;
        for (i = 0; i < __pollables.count() && __pollables[i] != p; ++i) ;
        if (i == __pollables.count())
            throw InvalidArgumentError(FStr() `File handle is not in the set`);
        __pollables.delete(i);
        __fds.delete(__nextIndex, i);
        if (__callbacks && __callbacks.get(p))
            __callbacks.delete(p);
        --__nextIndex;

        # Adjust the iterator so if anything in the callstack is iterating
        # over the set it will remain inteact.
        if (__iter >= i)
            --__iter;
    }

    ## Sets the events that we will wait on from the pollable.  Note that you
    ## probably don't want to use this if you've added 'pollable' with a
    ## handler - in that case the event mask will be set by the handler.
    void setEvents(FileHandle pollable, int events) {
        # find the index of the pollable
        int i;
        for (p :in __pollables)
            if (p is pollable)
                break;
            else
                ++i;

        if (i == __pollables.count())
            throw InvalidArgumentError(FStr() `File handle not in Poller`);

        __fds.set(i, pollable.fd, events, 0);
    }

    ## Call all of the handler callbacks and get the events that we want to
    ## wait on in the next iteration.
    void checkHandlers() {
        if (__callbacks) {
            PollEvent evt = {};
            int i;
            for (p :in __pollables) {
                cb := __callbacks.get(p);
                if (cb) {
                    evt.pollable = p;
                    events := cb.callback(this, evt);
                    __fds.set(i, p.fd, events, 0);
                }
                ++i;
            }
        }
    }

    ## Wait for up to timeout or until the next event.  'timeout' may be null,
    ## in which case we wait indefinitely.
    ## Calling wait() resets the internal iterator - the next call to nx()
    ## will return the first available event.
    ## Returns the number of sockets selected, -1 if there was an error.  0 if
    ## there was a timeout.
    int wait(TimeDelta timeout) {
        __iter = 0;
        if (timeout) {
            __pollTimeout.secs = timeout.secs;
            __pollTimeout.nsecs = timeout.nsecs;
        }
        return __fds.poll(__nextIndex,
                          timeout ? __pollTimeout : null,
                          null
                          );
    }

    @final void __callCallback(int descriptorIndex, PollEvent pollEvent) {

        # Save the iterator and restore it when the context completes.
        # "finally" or "defer" would be nice here.
        class RestoreIter {
            Poller p;
            int oldVal;
            oper init(Poller p) : p = p, oldVal = p.__iter {}
            oper del() { p.__iter = oldVal }
        }
        restore := RestoreIter(this);
        __iter = descriptorIndex;

        if (__callbacks && (cbw := __callbacks.get(pollEvent.pollable))) {
            events := cbw.callback(this, pollEvent);

            # Change the event mask, taking care to ensure that the pollable
            # wasn't removed by the callback.
            if (events != pollEvent.events && __iter >= 0 &&
                pollEvent.pollable is __pollables[__iter]
                )
                __fds.set(descriptorIndex, pollEvent.pollable.fd, events, 0);
        }
    }

    PollEvent nx() {
        if (__iter == -1)
            return null;

        PollEvent result = {};
        __iter = __fds.next(__nextIndex, __iter, result);

        if (__iter == -1)
            return null;

        # store the pollable in the result
        result.pollable = __pollables[__iter];

        # if there is a handler, call it and reset the event mask.
        __callCallback(__iter, result);

        # increment the iterator
        ++__iter;
        return result;
    }

    ## wait for the next event and then process all events (this is equivalent
    ## to "poller.wait(timeout); while (poller.nx()) ;").  This should only be
    ## used when all pollables have event handlers.
    ## 'timeout' may be null, in which case we wait indefinitely.
    void waitAndProcess(TimeDelta timeout) {
        ## Invoke callbacks with no event just so we can get their next events.
        PollEvent temp = {};
        for (__iter = 0; __iter < __nextIndex; ++__iter) {
            __fds.get(__iter, temp);
            temp.pollable = __pollables[__iter];
            temp.revents = 0;
            lastSize := __nextIndex;
            __callCallback(__iter, temp);
        }

        wait(timeout);
        while (nx()) ;
    }

    ## A poller is true if it contains pollables.
    bool isTrue() { return __pollables; }

    ## Return the number of pollables
    uint count() { return __pollables.count(); }

    void formatTo(Formatter fmt) {
        fmt.write("Poller:");
        fmt.format(__pollables);
    }
}

## Socket appendage.  Growth class for Socket, use makeSocket() to make one of
## these directly.
@final class SocketApd = Socket {
    ## Get the address of the socket.  Throw a SystemError if there is an error.
    ## Note that the address must be of the same type as the socket.
    void getSocketAddress(Address addr) {
        if (getSockName(fd, addr._addr) == -1)
            throw SystemError('Failed getting socket address.');
    }

    ## Get the address of the socket.  Throw a SystemError if there is an error.
    ## This generates an address of the correct type for all known address types,
    ## but is slightly less efficient than the two argument version.
    Address getSocketAddress() {
        Address addr = InetAddress(0, 0);
        if (getSockName(fd, addr._addr) != -1)
            return addr;

        addr = UnixAddress(_PRIV_CONS);
        if (getSockName(fd, addr._addr) == -1)
            throw SystemError('Failed getting socket address.');
        return addr;
    }
}

## Utility function to create a SocketApd from the standard arguments.
SocketApd makeSocket(int domain, int type, int protocol) {
    return SocketApd(Socket(domain, type, protocol));
}

## Utility function to create a SocketApd from a file descriptor.
SocketApd makeSocket(int fd) {
    return SocketApd(Socket(fd));
}
