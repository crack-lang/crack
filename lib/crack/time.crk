# Copyright 2010-2012 Google Inc.
# Copyright 2011-2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Code for dealing with time.

import crack.ascii fract10;
import crack.cont.array Array;
import crack.io FStr, cout;
import crack.io Writer;
import crack.lang AssertionError, CString, Formatter, InvalidArgumentError,
    ManagedBuffer;
import crack.runtime asctime, InternalDate, strftime, strlen, strptime;
import crack.runtime TimeVal;

const int32 BILLION = 1000000000;

void _minus(TimeVal a, TimeVal b, TimeVal result) {
    nsdiff := a.nsecs - b.nsecs;
    if (nsdiff < 0) {
        nsdiff = BILLION + a.nsecs - b.nsecs;
        result.secs = a.secs - b.secs - 1;
    } else {
        result.secs = a.secs - b.secs
    }
    result.nsecs = nsdiff;
}


## A difference in time.
class TimeDelta : Object, TimeVal {

    oper init() : TimeVal(0, 0) {}

    oper init(int32 secs, int32 nsecs) :
        TimeVal(secs, nsecs) {
    }

    void formatTo(Formatter out) {
        out `$secs.$(fract10(nsecs, 9))`;
    }

    int cmp(Object other) {
        if (o := TimeDelta.cast(other)) {
            TimeDelta td = {};
            _minus(this, o, td);
            return td.secs ? td.secs : td.nsecs;
        } else {
            return Object.cmp(other);
        }
    }
}

## An absolute point in time (seconds since the epoch).
##
## Public variables (from TimeVal):
##   int32 secs;   // Seconds since the epoch.
##   int32 nsecs;  // nanoseconds since the last whole second.
class Time : Object, TimeVal {

    oper init() : TimeVal(0, 0) {}
    oper init(int32 secs, int32 nsecs) :
        TimeVal(secs, nsecs) {
    }

    @static Time now() {
        t := Time();
        t.setToNow(null);
        return t;
    }


    TimeDelta oper -(Time other) {
        result := TimeDelta();
        _minus(this, other, result);
        return result;
    }

    void formatTo(Formatter out) {
        out `$secs.$(fract10(nsecs, 9))`;
    }

    int cmp(Object other) {
        if (o := Time.cast(other)) {
            TimeDelta td = {};
            _minus(this, o, td);
            return td.secs ? td.secs : td.nsecs;
        } else {
            return Object.cmp(other);
        }
    }
}

TimeDelta seconds(int secs) {
    if (secs > 0xFFFFFFFF || secs < -0xFFFFFFFF)
        throw AssertionError(FStr() `Integer value $secs out of range`);
    return TimeDelta(int32(secs), 0);
}

// From http://en.wikipedia.org/wiki/Leap_year retrieved on 7/12/2012
bool isLeap(int year) {
   if (year % 400 == 0) return true;
   if (year % 100 == 0) return false;
   if (year % 4 == 0) return true;
   else return false;
}

Array[int] maxDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

class Date : Object, InternalDate {
    oper init(){
        setEpoch();
    }

    oper init(int64 secs) {
        setLocalSeconds(secs);
    }

    oper init(InternalDate d) {
        if (!(d is null)){
            tm_sec = d.tm_sec;
            tm_min = d.tm_min;
            tm_hour = d.tm_hour;
            tm_mday = d.tm_mday;
            tm_mon = d.tm_mon;
            tm_year = d.tm_year;
            tm_wday = d.tm_wday;
            tm_yday = d.tm_yday;
            tm_isdst = d.tm_isdst;
            tm_gmtoff = d.tm_gmtoff;
            getSeconds();
        }
    }

    @static Date now() {
        d := Date();
        d.setLocalNow();
        return d;
    }

    @static
    Date parseTime(CString s, CString format) {
        d := Date();
        result := strptime(s.buffer, format.buffer, d); // TODO handle errors
        if (result is null)
            throw InvalidArgumentError(I"Could not parse time string using \
                                         supplied format");
        return d;
   }

   alias strptime = parseTime;


    String getDefaultString() {
        ManagedBuffer result = {100};
        asctime(this, result.buffer);
        result.size = strlen(result.buffer);
        return String(result, true);
    }

   String formatTime(String format, uint buflen) {
        String result = {buflen, 0};    // TODO handle errors
        strftime(result.buffer, buflen, format.buffer, this);
        len:=strlen(result.buffer);
        return result.substr(0,len);
   }

   String formatTime(String format) {   // Comments in the Linux man page
        return formatTime(format, 100); // recommends 100 byte buffer
   }

   alias strftime = formatTime;

   void formatTo(Formatter out) {
        out.write(formatTime("%F %T"));
        if (tm_isdst) out.write(" DST");
   }
}

## Creates a calendar as an array of weeks of ints of the form
##
##     June 2011
## Su Mo Tu We Th Fr Sa
## -1 -1 -1  1  2  3  4
##  5  6  7  8  9 10 11
## 12 13 14 15 16 17 18
## 19 20 21 22 23 24 25
## 26 27 28 29 30 -1 -1

## The daystart argument determines the start of the week:
## 0 = Sunday, 1 = Monday, etc.

Array[Array[int]] cal(Date d, int dayStart){
   d.getSeconds(); // This sets the weekday and year day of the d object
   max := maxDays[d.tm_mon];
   if (d.tm_mon == 1 && isLeap(d.tm_year))
      max = 29;

   week := Array[int](7);
   Array[Array[int]] weeks = {};
   int wday = 0;

   for (cday:= 1 + dayStart - d.tm_wday; cday < max || wday%7 > 0; cday++){
      if (cday <= 0)
         week.append(-1);
      else if (cday > 0 && cday <= max)
         week.append(cday);
      else
         week.append(-2);
      wday++;
      if (wday%7 == 0){
         weeks.append(week);
         wday = 0;
         week = Array[int](7);
      }
   }
   return weeks;
}

Array[Array[int]] cal(Date d){
   return cal(d, 0);
}
