# Copyright 2010-2012 Google Inc.
# Copyright 2010,2012 Shannon Weyrick <weyrick@mozek.us>
# Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Basic input/output classes.

import crack.lang die, AppendBuffer, Buffer, CString, FieldSet, WriteBuffer,
    ManagedBuffer, Writer, Exception, Formatter;
import crack.runtime close, float_str, lseek, strlen, write, malloc, memcpy,
    free, read, c_strerror, setNonBlocking, errno, EAGAIN, EWOULDBLOCK,
    SEEK_SET, SEEK_CUR, SEEK_END;

# we need Writer and Formatter to be in crack.lang, but they belongs here.
@export_symbols Writer, Formatter, SEEK_SET, SEEK_CUR, SEEK_END;

## Wraps a file handle and provides methods common to all file handles.
class FileHandle : Object {
    int fd;

    oper init(int fd) : fd = fd {}

    ## Close the file descriptor.
    void close() {
        if (fd != -1) {
          close(fd);
          fd = -1;
        }
    }

    ## Set the file handle's non blocking status
    int setNonBlocking(bool val) {
        return setNonBlocking(fd, val);
    }

    void formatTo(Formatter fmt){
        fmt `FileHandle($fd)`;
    }

}

## "Random access writer."  Adds "seek()" and "tell()".
##
## The semantics of seek()/tell() may vary depending on the backend.  In some
## cases, these interfaces may produce signals or even exceptions.
##
## The generally expected behavior is:
## -   seek() and tell() should deal in offsets represented in bytes.
## -   seek() should allow you to seek within the range defined by the size of
##     the backing store.  For example, in a 100 byte file, you should be able
##     to seek to positions 0 to 99.  Likewise with buffer reader/writer where
##     the buffer size is 100.
##     Outside of the range of the backing store, the behavior of seek is
##     implementation defined.  For buffer-backed reader/writers, it normally
##     sets the read/write position to either the beginning or ending of the
##     buffer, depending on the direction that the seek was out of range.
@abstract class Seekable : VTableBase {

    ## Seek the given offset from 'whence' (where 'whence' is SEEK_SET,
    ## SEEK_CUR, or SEEK END.  Note that the specific behavior of this
    ## method is implementation-specific.
    @abstract int64 seek(int64 offset, int whence);

    ## Returns the file read/write position in bytes from the beginning of
    ## the file.
    ## The return value should never be negative (except, perhaps, in the case
    ## of an error). We return int64 rather than uint64 for purposes of
    ## convenient use with seek().
    @abstract int64 tell();

    # Since we can't load crack.ann yet, add the interface plumbing manually
    @abstract Object oper from Seekable();
    oper bind() { if (this !is null) this.oper from Seekable().oper bind(); }
    oper release() {
        if (this !is null) this.oper from Seekable().oper release();
    }
}

@abstract class SeekableWriter : Writer, Seekable {
    @abstract Object oper from SeekableWriter();
    Object oper from Writer() { return this.oper from SeekableWriter(); }
    Object oper from Seekable() { return this.oper from SeekableWriter(); }
}

## Writer for a file descriptor.
## Unless you are managing the file descriptor elsewhere, you probably want
## to use OwningFDWriter instead.
class FDWriter : FileHandle, SeekableWriter {

    ## Constructs an FDWriter from a plain file descriptor.
    oper init(int fd) : FileHandle(fd) {}

    void write(Buffer buf) {
        write(fd, buf.buffer, buf.size);
    }

    void write(byteptr cstr){
        write(fd, cstr, strlen(cstr));
    }

    int64 seek(int64 offset, int whence) {
        return lseek(fd, offset, whence);
    }

    int64 tell() {
        # There's no "ltell", so we issue a no-op seek to get the current file
        # pos out of lseek.
        return lseek(fd, 0, SEEK_CUR);
    }

    Object oper from SeekableWriter() { return this; }
};

## Writer for a file descriptor that closes the file descriptor upon
## destruction.
class OwningFDWriter : FDWriter {

    oper init(int fd) : FDWriter(fd) {}
    oper del() { if (fd != -1) close(); }
}

## Interface for all readers.  Readers support two flavors of read()
## methods that allow you to read bytes from a stream.
@abstract class Reader : VTableBase {

    ## Reads enough bytes to fill the buffer, or as many bytes as are
    ## available from the source.  Returns the number of bytes read and sets
    ## the buffer size to the number of bytes read.
    @abstract uint read(WriteBuffer buffer);

    @final String read(uint size) {
        b := ManagedBuffer(size);
        s := read(b);

        # if the amount read is most of the buffer, just take ownership of the
        # buffer.
        if (s >= size * 3 / 4)
            return String(b, true);
        else
            # otherwise copy.
            return String(b);
    }

    # Since we can't load crack.ann yet, add the interface plumbing manually
    @abstract Object oper from Reader();
    oper bind() { if (this !is null) this.oper from Reader().oper bind(); }
    oper release() {
        if (this !is null) this.oper from Reader().oper release();
    }
};

@abstract class SeekableReader : Reader, Seekable {
    @abstract Object oper from SeekableReader();
    Object oper from Reader() { return this.oper from SeekableReader() }
    Object oper from Seekable() { return this.oper from SeekableReader() }
}

## Reader to read from a file descriptor.
## Unless you are managing the file descriptor elsewhere, you probably want to
## use OwningFDReader instead.
class FDReader : FileHandle, SeekableReader {

    oper init(int fd) : FileHandle(fd) {}

    ## Read up to 'size' bytes from the file descriptor into the buffer.
    uint read(WriteBuffer buf) {
        int rc = read(fd, buf.buffer, buf.cap);
        if (rc == -1) {
            int en = errno();
            // don't throw if this is a blocking issue (fd may be nonblocking)
            if (en != EAGAIN && en != EWOULDBLOCK)
                throw Exception(String(c_strerror()));
            rc = 0;
        }
        buf.size = rc;
        return rc;
    }

    int64 seek(int64 offset, int whence) {
        return lseek(fd, offset, whence);
    }

    int64 tell() {
        return lseek(fd, 0, SEEK_CUR);
    }

    Object oper from SeekableReader() { return this; }
};

## Reader for a file descriptor that closes the file descriptor upon
## destruction.
class OwningFDReader : FDReader {

    oper init(int fd) : FDReader(fd) {}
    oper del() { if (fd != -1) close(); }
}

## Format val into buf.  The number will be formatted into the _end_ of the
## buffer.
## Returns the start index of the number.
uint _format(uint64 val,  ## value to format
             byteptr buf, ## buffer to format into.  This must be large enough
                          ## to hold the string representation of the number.
             uint size    ## size of the buffer
             ) {
    uint i = size;

    # zero is special
    if (!val) {
        i = i - 1;
        buf[i] = 48;
        return i;
    }

    uint64 v = val;
    while (v) {
        i = i - 1;
        digit := byte(v % 10);
        v = v / 10;
        buf[i] = b'0' + digit;
    }
    return i;
}

## Format an integer into the buffer.  "buf" must be at least 21 characters.
## Returns the index to the beginning of the number.
uint _format(int64 val, byteptr buf, uint size) {
    uint i;
    if (val < 0) {
        # negate the value, format the absolute value then add the sign to the
        # beginning
        raw := uint64(-val);
        i = _format(raw, buf, size) - 1;
        buf[i] = b'-';
    } else {
        raw := uint64(val);
        i = _format(raw, buf, size);
    }
    return i;
}

## Format a pointer into the buffer. "buf" must be at least 18 characters.
## Returns the index to the beginnung of the hex number.
uint _format(voidptr ptr, byteptr buf, uint size) {
    val := uintz(ptr);
    uint i = size;

    if (!val) {
        i = i - 1;
        buf[i] = b'0';
    } else {
        while (val) {
            i = i - 1;
            b := byte(val % 16);
            if (b < 10)
                b += b'0';
            else
                b += b'a' - byte(10);
            buf[i] = b;
            val = val / 16;
        }
    }

    i = i - 1;
    buf[i] = b'x';
    i = i - 1;
    buf[i] = b'0';

    return i;
}

## A node in a _SimpleFieldSet linked-list.
class _FieldSetNode : Object {
    uintz key;
    Object val;
    _FieldSetNode next;

    oper init(uintz key, Object val, _FieldSetNode next) :
        key = key,
        val = val,
        next = next {
    }

    oper init() {}
}

## A simple field set implementation.
class _SimpleFieldSet : _FieldSetNode, FieldSet {

    ## Finds the node that "owns" the node of the specified key
    ## (result.next.key == key) or returns null if it doesn't exist.
    @final _FieldSetNode findOwner(uintz key) {
        _FieldSetNode owner = this;
        while (owner.next) {
            if (owner.next.key == key)
                return owner;
            owner = owner.next;
        }
        return null;
    }

    void setFieldVal(uintz key, Object val) {
        owner := findOwner(key);
        if (!owner) {
            # We don't currently have the key, create a new one.
            if (val !is null)
                next = _FieldSetNode(key, val, next);
            return;
        }

        if (val is null)
            # Remove the node.
            owner.next = owner.next.next;
        else
            owner.next.val = val;
    }

    Object getFieldVal(uintz key) {
        owner := findOwner(key);
        if (owner)
            return owner.next.val;
        else
            return null;
    }

    Object oper from FieldSet() { return this; }
}

## StandardFormatter class - got a format() method for anything.
class StandardFormatter : Object, Formatter {

    Writer rep;

    # Underlying field set representation.
    FieldSet __fieldSet;

    oper init(Writer rep) : rep = rep {}

    void write(byteptr data) {
        rep.write(Buffer(data, strlen(data)));
    }

    void write(Buffer data) {
        rep.write(data);
    }

    void format(StaticString data) {
        write(data);
    }

    void format(int16 val) {
        buffer := ManagedBuffer(6);

        # have to convert so it will match the later _format method.
        int64 v = val;
        start := _format(v, buffer.buffer, buffer.cap);
        write(Buffer(buffer.buffer + start, buffer.cap - start));
    }

    void format(uint16 val) {
        buffer := ManagedBuffer(5);

        # _format(uint32) comes first so we don't have to type convert
        start := _format(val, buffer.buffer, buffer.cap);
        write(Buffer(buffer.buffer + start, buffer.cap - start));
    }

    void format(int32 val) {
        buffer := ManagedBuffer(11);

        # have to convert so it will match the later _format method.
        int64 v = val;
        start := _format(v, buffer.buffer, buffer.cap);
        write(Buffer(buffer.buffer + start, buffer.cap - start));
    }

    void format(uint32 val) {
        buffer := ManagedBuffer(10);

        # _format(uint32) comes first so we don't have to type convert
        start := _format(val, buffer.buffer, buffer.cap);
        write(Buffer(buffer.buffer + start, buffer.cap - start));
    }

    void format(int64 val) {
        buffer := ManagedBuffer(21);
        start := _format(val, buffer.buffer, buffer.cap);
        write(Buffer(buffer.buffer + start, buffer.cap - start));
    }

    void format(uint64 val) {
        buffer := ManagedBuffer(20);
        start := _format(val, buffer.buffer, buffer.cap);
        write(Buffer(buffer.buffer + start, buffer.cap - start));
    }

    # this temporarily uses a runtime call, until we implement a float
    # printer in crack
    void format(float32 val) {
        buffer := ManagedBuffer(80);
        buffer.size = float_str(val, buffer.buffer, buffer.cap);
        write(buffer);
    }

    # this temporarily uses a runtime call, until we implement a float
    # printer in crack
    void format(float64 val) {
        buffer := ManagedBuffer(80);
        buffer.size = float_str(val, buffer.buffer, buffer.cap);
        write(buffer);
    }

    void format(bool val) {
        if (val)
            write('true');
        else
            write('false');
    }

    ## For general objects, format() just calls the object's formatTo()
    ## method.
    void format(Object obj) {
        if (obj is null) {
            write('null');
        } else {
            obj.formatTo(this);
        }
    }

    ## So we can deal with plain null-terminated strings.
    void format(byteptr cstr) {
        write(Buffer(cstr, strlen(cstr)));
    }

    void format(voidptr ptr) {
        buffer := ManagedBuffer(18);
        start := _format(ptr, buffer.buffer, buffer.cap);
        write(Buffer(buffer.buffer + start, buffer.cap - start));
    }

    Object getFieldVal(uintz key) {
        if (__fieldSet is null)
            return null;
        else
            return __fieldSet.getFieldVal(key);
    }

    void setFieldVal(uintz key, Object val) {
        if (!__fieldSet) {
            if (val is null)
                return;
            else
                __fieldSet = _SimpleFieldSet();
        }
        __fieldSet.setFieldVal(key, val);
    }

    Object oper from Writer() { return this; }
    Object oper from Formatter() { return this; }
    Object oper from FieldSet() { return this; }
}

cout := StandardFormatter(FDWriter(1));
cerr := StandardFormatter(FDWriter(2));
cin := FDReader(0);

int64 _seek(int64 offset, int whence, int64 pos, uintz size) {
    int64 newPos;
    if (whence == SEEK_SET) {
        newPos = offset;
    } else if (whence == SEEK_END) {
        newPos = int64(size + offset);
    } else if (whence == SEEK_CUR) {
        newPos = int64(pos + offset);
    }

    if (newPos > int64(size))
        newPos = int64(size);
    else if (newPos < 0)
        return 0;

    return newPos;
}

## Allows you to construct a string by writing to it.
class StringWriter : AppendBuffer, SeekableWriter {

    uintz __pos;

    oper init(uint initBufSize) : AppendBuffer(initBufSize) {}
    oper init() : AppendBuffer(1024) {}

    void __write(byteptr buffer, uintz bufSize) {

        # Change the size to the write pos so we extend from the write
        # position.
        orgSize := size;
        size = __pos;

        extend(buffer, bufSize);

        # if we didn't end up growing, restore the original size.
        if (size < orgSize)
            size = orgSize;

        __pos += bufSize;
    }

    void write(Buffer data) {
        __write(data.buffer, data.size);
    }

    void write(byteptr cstr){
        __write(cstr, strlen(cstr));
    }

    int64 seek(int64 pos, int whence) {
        return int64(__pos = _seek(pos, whence, int64(__pos), size));
    }

    int64 tell() {
        return int64(__pos);
    }

    ## Return a string containing everything that has been written so far.
    @final String makeString() {
        return String(buffer, size, false);
    }

    ## Return a string containing everything that has been written so far.
    @final String string() {
        return String(buffer, size, false);
    }

    ## Return a null terminated string containing everything that has been
    ## written so far.
    @final CString makeCString() {
        append(0);
        return CString(buffer, size - 1, false);
    }

    ## Return a null terminated string containing everything that has been
    ## written so far.
    @final CString cString() {
        append(0);
        return CString(buffer, size - 1, false);
    }

    Object oper from SeekableWriter() { return this; }
};

## Lets you wrap an AppendBuffer with a Writer interface.
class AppendBufferWriter : Object, Writer {

    AppendBuffer buffer;

    oper init(AppendBuffer buffer) : buffer = buffer {}

    void write(Buffer data) {
        buffer.extend(data);
    }

    Object oper from Writer() { return this; }
}

## Allows you to read from a buffer.
class BufferReader : Object, SeekableReader {

    uintz __pos;
    Buffer __src;

    oper init(Buffer src) : __src = src {}

    uint read(WriteBuffer buf) {
        if (__pos >= __src.size) {
            buf.size = 0;
            return 0;
        }

        count :=
            (__pos + buf.cap > __src.size) ? __src.size - __pos : buf.cap;
        buf.move(0, __src.buffer + __pos, count);
        __pos += count;
        buf.size = count;
        return count;
    }

    int64 seek(int64 offset, int whence) {
        return int64(__pos = _seek(offset, whence, int64(__pos), __src.size));
    }

    int64 tell() {
        return int64(__pos);
    }

    Object oper from SeekableReader() { return this; }
}

# Given that we have a StringWriter, it's reasonable for users to expect a
# StringReader, so we alias BufferReader.  It is safe to use either
# StringReader or BufferReader.
alias StringReader = BufferReader;

## Convenience wrapper, equivalent to StandardFormatter(StringWriter())
class StringFormatter : StandardFormatter {

    StringWriter _writer = {};

    oper init(uint initBufSize) : StandardFormatter(null), _writer(initBufSize) {
        rep = _writer;
    }

    oper init() : StandardFormatter(null) { rep = _writer; }

    ## see: StringWriter.makeString()
    @final String makeString() { return _writer.makeString(); }

    ## see: StringWriter.string()
    @final String string() { return _writer.string(); }

    ## see: StringWriter.makeCString()
    @final String makeCString() { return _writer.makeCString(); }

    ## see: StringWriter.cString()
    @final String cString() { return _writer.cString(); }
};

## Instances of this class let you create a string from IString syntax.
## Sample usage:
##   String v = FStr() `variable x = $x`;
class FStr : StringFormatter {
    oper init() {}

    @final void enter() {
        if (!_writer)
            rep = _writer = StringWriter();
    }

    @final String leave() {
        result := _writer.string();
        _writer = null;
        rep = null;
        return result;
    }
}

const DEFAULT_BLOCK_SIZE := 4096;

## Move all contents from 'src' to 'dst' in blocks of the specified size.
void move(Writer dst, Reader src, uintz blockSize) {
    buf := ManagedBuffer(blockSize);
    while (data := src.read(buf))
        dst.write(buf);
}

## Move all contents from 'src' to 'dst' in blocks of DEFAULT_BLOCK_SIZE.
void move(Writer dst, Reader src) { move(dst, src, DEFAULT_BLOCK_SIZE) }

## Move all contents from 'src' to 'dst' in blocks of the specified size.
void move(AppendBuffer dst, Reader src, uintz blockSize) {
    buf := ManagedBuffer(blockSize);
    while (data := src.read(buf))
        dst.extend(buf);
}

## Move all contents from 'src' to 'dst' in blocks of DEFAULT_BLOCK_SIZE.
void move(AppendBuffer dst, Reader src) { move(dst, src, DEFAULT_BLOCK_SIZE) }

## Return everything read from 'src' as a string, reading in blocks of the
## specified size.
String readAll(Reader src, uint blockSize) {
    buf := AppendBuffer(blockSize);
    move(buf, src, blockSize);
    return String(buf, true);
}

## Return everything read from 'src' as a string, reading in blocks of the
## size DEFAULT_BLOCK_SIZE.
String readAll(Reader src) { return readAll(src, DEFAULT_BLOCK_SIZE) }
