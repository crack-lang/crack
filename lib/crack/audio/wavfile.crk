## Wave files.

import crack.io FStr, Reader;
import crack.io cerr, SeekableWriter, Writer, SEEK_SET;
import crack.lang AppendBuffer, Buffer, Exception, ManagedBuffer, WriteBuffer;
import crack.runtime free, malloc;

@import crack.ann assert;

## Like a standard Buffer, but holds 16 bit samples instead of bytes.
## Likewise, 'size' and 'cap' are in terms of samples.
##
## WaveBuffer doesn't own it's buffer, use ManagedWaveBuffer to create the
## backing buffer, use WaveBuffer to reference a slice of an existing buffer.
class WaveBuffer {
    uintz size, cap;
    array[int16] buffer;

    oper init(uintz cap, array[int16] buffer) : cap = cap, buffer = buffer {}

    @final int16 oper [](uint index) { return buffer[index] }
    @final int16 oper []=(uint index, int16 val) {
        return buffer[index] = val;
    }
}

class ManagedWaveBuffer : WaveBuffer {

    ## Creates a new wave buffer large enough to hold 'cap' samples.  If you
    ## have n channels, you'll need to specify n * number_of_samples to hold
    ## them.
    oper init(uintz cap) :
        WaveBuffer(cap, array[int16](malloc(cap * 2))) {
    }

    void append(int16 sample) {
        @assert(size < cap);
        buffer[size] = sample;
        ++size;
    }

    oper del() { free(buffer); }
}

## This defines the parameters of a wave file.
class WaveDef {

    int
        ## Number of audio channels.
        channels,

        ## Sample in samples per sec.
        rate,

        ## Number of bits per sample.
        bitsPerSample;

    ## The number of frames in the wave.
    uint frameCount;

    oper init(int channels, int rate, int bitsPerSample) :
        channels = channels,
        rate = rate,
        bitsPerSample = bitsPerSample {
    }

    ## Reads a buffer full of samples.
    uintz read(Reader src, WaveBuffer buf) {
        if (bitsPerSample != 16)
            throw Exception("crack.wavfile can't deal with samples size "
                             "other than 16 bits."
                            );
        return buf.size =
            src.read(WriteBuffer(byteptr(buf.buffer), buf.cap * 2)) / 2;
    }

    @static void __add32BE(AppendBuffer buf, uint32 data) {
        buf.append(byte(data >> 24));
        buf.append(byte(data >> 16));
        buf.append(byte(data >> 8));
        buf.append(byte(data));
    }

    @static void __add32LE(AppendBuffer buf, uint32 data) {
        buf.append(byte(data));
        buf.append(byte(data >> 8));
        buf.append(byte(data >> 16));
        buf.append(byte(data >> 24));
    }

    @static void __add16LE(AppendBuffer buf, uint16 data) {
        buf.append(byte(data));
        buf.append(byte(data >> 8));
    }

    ## Write the file header for the wave.
    void writeHeader(Writer out) {
        AppendBuffer buf = {44};
        __add32BE(buf, i'RIFF');
        __add32LE(buf, 0);  # Chunk size, fill in later.
        __add32BE(buf, i'WAVE');
        __add32BE(buf, i'fmt ');
        __add32LE(buf, 16);  # Size of format chunk.
        __add16LE(buf, 1);   # PCM Format.
        __add16LE(buf, uint16(channels));
        __add32LE(buf, uint32(rate));
        __add32LE(buf, uint32(rate * channels * bitsPerSample / 8));  # Byte rate.
        __add16LE(buf, uint16(channels * bitsPerSample / 8));  # Block align.
        __add16LE(buf, uint16(bitsPerSample));

        __add32BE(buf, i'data');
        __add32LE(buf, 0);         # chunk size, fill in later.
        out.write(buf);
    }

    ## Write a wave buffer to the file.
    void writeData(Writer out, WaveBuffer buf) {
        frameCount += buf.size / channels;
        out.write(Buffer(byteptr(buf.buffer), buf.size * 2));
    }

    ## Finish the wave (writes the sizes to the RIFF and data chunks).
    void finish(SeekableWriter out) {
        AppendBuffer buf = {4};
        out.seek(40, SEEK_SET);
        buf = AppendBuffer(4);
        __add32LE(buf, uint32(frameCount * channels * bitsPerSample / 8));
        out.write(buf);
        buf.size = 0;
        __add32LE(buf, uint32(frameCount * channels * bitsPerSample / 8 + 36));
        out.seek(4, SEEK_SET);
        out.write(buf);
    }
}

class FormatError : Exception {
    oper init(String message) : Exception(message) {}
}

## Read a little-endian 32-bit value.
uint32 _read32LE(byteptr p) {
    return (uint32(p[3]) << 24) | (uint32(p[2]) << 16) |
           (uint32(p[1]) << 8) | uint32(p[0]);
}

uint16 _read16LE(byteptr p) {
    return (uint16(p[1]) << 8) | uint16(p[0]);
}

uint32 _read32BE(byteptr p) {
    return (uint32(p[0]) << 24) | (uint32(p[1]) << 16) | (uint32(p[2]) << 8) |
            uint32(p[3]);
}

uint16 _read16BE(byteptr p) {
    return (uint16(p[0]) << 8) | uint16(p[1]);
}

## Reads the wave up to the beginning of the wave data.
WaveDef readWave(Reader src) {
    ManagedBuffer header = {44};
    src.read(header);
    if (header.size != 44)
        throw FormatError('File is not even big enough to be a wave file.');

    if ((x := _read32BE(header.buffer)) != i'RIFF') {
        throw FormatError('Not a RIFF file');
    }

    # header + 4 is the entire chunk size which we ignore.

    if (_read32BE(header.buffer + 8) != i'WAVE')
        throw FormatError('Not a WAVE chunk');

    if (_read32BE(header.buffer + 12) != i'fmt ')
        throw FormatError('Not a "fmt" block');

    size := _read32LE(header.buffer + 16);
    if (size != 16)
        throw FormatError(FStr() `Expected 16 byte format chunk, got $size`);

    fmt := _read16LE(header.buffer + 20);
    if (fmt != 1)
        throw FormatError(FStr() `Chunk is not PCM format.`);

    channels := _read16LE(header.buffer + 22);
    rate := _read32LE(header.buffer + 24);
    byteRate := _read32LE(header.buffer + 28);
    blockAlign := _read16LE(header.buffer + 32);
    bitsPerSample := _read16LE(header.buffer + 34);

    if (byteRate != rate * channels * bitsPerSample / 8)
        throw FormatError(FStr() I`Expected a byte rate of \
                                   $(rate * channels * bitsPerSample / 8), \
                                   got $byteRate`
                          );
    if (blockAlign != channels * bitsPerSample / 8)
        throw FormatError(FStr() I`Expected a block alignment of \
                                   $(channels * bitsPerSample / 8), \
                                   got $blockAlign`
                          );

    return WaveDef(channels, rate, bitsPerSample);
}


/*
import crack.fs makePath;
import crack.io cout;
import crack.sys argv;

def := readWave(makePath(argv[1]).reader());
cout I`channels = $(def.channels), rate = $(def.rate), bits/sample = \
       $(def.bitsPerSample)\n`;
*/
