# Copyright 2011-2012 Google Inc.
# Copyright 2011-2012 Conrad Steenberg <conrad.steenberg@gmail.com>
#
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Generic tree map implementation

import crack.lang cmp, AssertionError, KeyError, Formatter;
import crack.io cout, Writer, StandardFormatter;

class TreeMap[KeyT, ValT] {

    ## Red-black tree node.
    class Node {

        # if true, this is a red node
        bool red;
        Node left, right, parent;
        KeyT key;
        ValT val;

        oper init(KeyT key, ValT val, bool red) :
            red = red,
            key = key,
            val = val {
        }

        void doIndent(uint indent) {
            i := indent;
            while (i) { i = i - 1; cout `  `; }
        }

        void dump(uint indent) {
            doIndent(indent);
            String color;
            if (red)
                color = 'red';
            else
                color = 'black';
            cout `$color, key = $key, val = $val\n`;
            doIndent(indent);
            cout `left:\n`;
            if (left) {
                left.dump(indent + 1);
            } else {
                doIndent(indent);
                cout `  null\n`;
            }
            doIndent(indent);
            cout `right:\n`;
            if (right) {
                right.dump(indent + 1);
            } else {
                doIndent(indent);
                cout `  null\n`;
            }
        }

        ## Find and return the node matching the target, returns null if the value
        ## is not found.
        Node find(KeyT target) {
            diff := -cmp(key, target);
            if (!diff)
                return this;
            else if (diff > 0 && right)
                return right.find(target);
            else if (diff < 0 && left)
                return left.find(target);
            else
                return null;
        }

        Node __grandparent() {
            if (parent)
                return parent.parent;
            else
                return null;
        }

        Node __uncle() {
            g := __grandparent();
            if (!g)
                return null;
            if (parent == g.left)
                return g.right;
            else
                return g.left;
        }

        void __setLeft(Node node) {
            left = node;
            if (node)
                node.parent = this;
        }

        void __setRight(Node node) {
            right = node;
            if (node)
                node.parent = this;
        }

        void __setParent(Node newParent, bool isRightChild) {
            if (newParent)
                if (isRightChild)
                    newParent.__setRight(this);
                else
                    newParent.__setLeft(this);
            else
                parent = null;
        }

        ## Returns the root of the nodes tree.
        Node getRoot() {
            p := this;
            while (p.parent)
                p = p.parent;
            return p;
        }

        ## Rotate the node to the left so its new parent is its old right child.
        void rotateLeft() {
            newParent := right;
            orgParent := parent;
            isRight := parent && this is parent.right;
            newRight := newParent.left;
            newParent.__setLeft(this);
            __setRight(newRight);
            newParent.__setParent(orgParent, isRight);
        }

        ## rotate the node to the right so its new parent is its old left node.
        void rotateRight() {
            newParent := left;
            orgParent := parent;
            isRight := parent && this is parent.right;
            newLeft := newParent.right;
            newParent.__setRight(this);
            __setLeft(newLeft);
            newParent.__setParent(orgParent, isRight);
        }

        void __rebalance() {
            if (!parent) {
                # this is the root node.  Mark it as black, root node is always
                # black. (we could actually omit this case, since we're dealing
                # with it externally).
                red = false;
            } else if (!parent.red) {
                # parent is black, no rules are invalidated.
                return;
            } else {
                # parent is red.
                Node uncle = __uncle(), gramps;

                if (uncle && uncle.red) {
                    # both the parent and the uncle are red.  Paint them black,
                    # paint gramps red and rebalance him.
                    parent.red = false;
                    uncle.red = false;
                    gramps = __grandparent();
                    gramps.red = true;
                    gramps.__rebalance();
                    } else {
                        # parent is red, uncle is black.
                        Node node;
                        gramps = __grandparent();
                        if (this is parent.right && parent is gramps.left) {
                            # this is the right child of a left child.  Rotate left
                            # and perform subsequent operations on what was my parent
                            # (and is now my left child).
                        parent.rotateLeft();
                        root := parent;
                        node = left;
                        gramps = parent;
                    } else if (this is parent.left && parent is gramps.right) {
                        # this is the left child of a right child.  Do the
                        # opposite of the last case.
                        parent.rotateRight();
                        node = right;
                        gramps = parent;
                    } else {
                        node = this;
                    }

                    # the parent is red, the uncle is black, the node is a left
                    # child of a left child or the right child of a right child.
                    node.parent.red = false;
                    gramps.red = true;
                    if (node is node.parent.left && node.parent is gramps.left)
                        gramps.rotateRight();
                    else /* (n == n->parent->right) and (n->parent == g->right) */
                        gramps.rotateLeft();
                }
            }
        }

        void insert(Node newNode) {
            int diff = -cmp(key, newNode.key);
            if (diff == 0) {
                # we match - replace our value
                val = newNode.val;

            # normal b-tree insert.  If the new node is greater than the current
            # node, look to the right.
            } else if (diff > 0) {
                if (!right) {
                    right = newNode;
                    newNode.parent = this;
                    newNode.__rebalance();
                } else {
                    right.insert(newNode);
                }
            } else {
                if (!left) {
                    left = newNode;
                    newNode.parent = this;
                    newNode.__rebalance();
                } else {
                    left.insert(newNode);
                }
            }
        }

        ## Find the maximum node in the subtree.
        Node findMax() {
            if (right)
                return right.findMax();
            else
                return this;
        }

        ## Returns the minimum node in the subtree.
        Node findMin() {
            if (left)
                return left.findMin();
            else
                return this;
        }

        ## Replace the node in its parent with the new child.
        void __replaceMe(Node child) {
            if (this is parent.left)
                parent.__setLeft(child);
            else
                parent.__setRight(child);
        }

        Node __sibling() {
            if (this is parent.left)
                return parent.right;
            else
                return parent.left;
        }

        void __rebalanceAfterDelete() {
            # case 1: if this is the root node, we're done.
            if (parent is null)
                return;

            sibling := __sibling();

            # case 2: sibling is red.
            if (sibling.red) {
                # reverse the colors of the parent and sibling
                parent.red = true;
                sibling.red = false;

                # rotate so that the sibling is the new parent
                if (this is parent.left)
                    parent.rotateLeft();
                else
                    parent.rotateRight();

                # find the new sibling
                sibling = __sibling();
            }

            # we now know the sibling is black.
            # record whether the sibling and its children are black. (we already
            # know that sibling is black)
            siblingAndChildrenBlack :=
                (!sibling.left || !sibling.left.red) &&
                (!sibling.right || !sibling.right.red)
                ;

            # case 3: parent, sibling and all of the sibling's children are
            # black.
            if (!parent.red && siblingAndChildrenBlack) {
                sibling.red = true;
                parent.__rebalanceAfterDelete();
                return;
            }

            # case 4: parent is red, sibling and all of its children are black.
            # We can just swap colors on parent and sibling.
            if (siblingAndChildrenBlack) {
                sibling.red = true;
                parent.red = false;
                return;
            }

            # case 5: sibling is black (asserted by failure of case 2),
            # sibling's left child is red and this node is the left child of its
            # parent.
            # We deal with case 5 by turning it into something that satisfies case
            # 6 and then falling through to case 6 processing.
            if ((sibling.left && sibling.left.red) &&
                (!sibling.right || !sibling.right.red) &&
                this is parent.left
                ) {
                # change the colors of the sibling and its child and fall through
                # to case 6.
                sibling.red = true;
                sibling.left.red = false;
                sibling.rotateRight();
                sibling = sibling.parent;

            # case 5, on the right side
            } else if ((sibling.right && sibling.right.red) &&
                    (!sibling.left || !sibling.left.red) &&
                    this is parent.right
                    ) {
                sibling.red = true;
                sibling.right.red = false;
                sibling.rotateLeft();
                sibling = sibling.parent;
            }

            # case 6: sibling is black, sibling's right child is red and this node
            # is the left child node of its parent.
            sibling.red = parent.red;
            parent.red = false;
            if (this is parent.left) {
                sibling.right.red = false;
                parent.rotateLeft();

            # case 6 on the right
            } else {
                sibling.left.red = false;
                parent.rotateRight();
            }
        }

        ## an "elbow node" is a node with at most one non-leaf child (keep in mind
        ## that leaves are nulls in an rbtree, so a node with at most one non-null
        ## child).
        void __deleteElbowNode() {
            child := left;
            if (!child)
                child = right;

            # if the node is red we can just replace it with the child
            if (red) {
                __replaceMe(child);

            # if the node is black but its child is red, we can replace it with
            # the child and paint the child black.
            } else if (!red && child && child.red) {
                __replaceMe(child);
                child.red = false;

            # both the node and child are black.
            } else {
                if (child)
                    throw AssertionError('child is supposed to be null!');
                # replace the node with its child, then rebalance the child

                # XXX what we would do if we were not using null to represent a
                # leaf node.
                #__replaceMe(child);
                #child.__rebalanceAfterDelete();
                __rebalanceAfterDelete();
                __replaceMe(child);
            }
        }

        ## delete the node.  Returns true if the node is the root node.
        bool delete() {
            # find either the minimum in the left or the maximum in the right
            Node node;
            if (left) {
                node = left.findMax();
            } else if (right) {
                node = right.findMin();
            } else {
                # we just have to delete this node.
                if (parent)
                    node = this;
                else
                    # no parent, this is the root node.
                    return true;
            }

            # move the contents of the new node to this node
            if (node !is this) {
                key = node.key;
                val = node.val;
            }

            # really delete the new node
            node.__deleteElbowNode();
            return false;
        }

        ## Clear all parent pointers to remove cyclic references.
        void _unhookParents() {
            parent = null;
            if (left)
                left._unhookParents();
            if (right)
                right._unhookParents();
        }

        # constraint validation

        ## check that both children of a red node are black
        bool checkRedChildrenBlack(Formatter report) {
            if (red && (left && left.red || right && right.red)) {
                report `RBTree.checkConstraints: red node $val has red child.\n`;
                return false;
            }
            bool result = true;
            if (left) {
                if (left.val >= val) {
                    report `left value $(left.val) >= $val\n`;
                    result = false;
                }
                left.checkRedChildrenBlack(report);
            }
            if (right) {
                if (right.val <= val) {
                    report `right value $(right.val) <= $val\n`;
                    result = false;
                }
                right.checkRedChildrenBlack(report);
            }
            return result;
        }

        int checkBlackCounts(Formatter report) {
            int leftCount, rightCount;
            if (left)
                leftCount = left.checkBlackCounts(report);
            if (right)
                rightCount = right.checkBlackCounts(report);

            # if we failed on either of the children, fail for the parent
            if (leftCount == -1 || rightCount == -1)
                return -1;

            if (leftCount != rightCount) {
                report `RBTree.checkConstraints: imbalanced black count at node \
    $val\n`;
                return -1;
            }

            if (red)
                return leftCount;
            else
                return leftCount + 1;
        }
    }

    class Iter {
        bool __first = true;
        Node __node;

        # we preserve a reference to the tree to keep it from getting GC'ed
        # out from under us.
        TreeMap __tree;

        void __findMin() {
            __node = __node.findMin();
        }

        void __next() {
            # if there's a right node, find its minimum.
            if (__node.right) {
                __node = __node.right.findMin();
            } else {
                # back up until we're either at the root or at the first parent
                # that we are the left child of.
                while (__node.parent && __node is __node.parent.right)
                    __node = __node.parent;

                # at this point, either the parent is null (in which case we're
                # done) or we're at a left child.
                __node = __node.parent;
            }
        }

        oper init(TreeMap tree, Node root) : __tree = tree {
            if (root)
                __node = root.findMin();
        }

        bool next() {
            __next();
            return __node;
        }

        bool nx() {
            if (__first) {
                __first = false;
                return __node;
            } else {
                return next();
            }
        }

        Node elem() { return __node; }

        bool isTrue() { return __node; }
    }

    Node __root;
    uint __count;

    oper init() {}

    void oper []=(KeyT key, ValT val) {
        if (__root) {
            __root.insert(Node(key, val, true));

            # the root node may have changed due to rebalancing - find the new
            # root.
            __root = __root.getRoot();
        } else {
            __root = Node(key, val, false);
        }

        ++__count;
    }

    ## Returns the object with the specified key, returns null if the key
    ## is not in the tree.
    ValT get(KeyT key, ValT defaultVal) {
        if (__root) {
            node := __root.find(key);
            if (node)
                return node.val;
        }

        return defaultVal;
    }

    ## Returns true if the container contains the key.
    bool hasKey(KeyT key) {
        return __root && __root.find(key);
    }

    @final ValT get(KeyT key) {
        return get(key, null);
    }

    ValT oper [](KeyT key) {
        if (__root) {
            node := __root.find(key);
            if (node)
                return node.val;
        }

        throw KeyError('Node not found in oper []');
    }

    void dump() {
        if (__root)
            __root.dump(0);
        else
            cout `root is null\n`;
    }

    oper del() {
        if (__root) __root._unhookParents();
    }

    ## Delete the object with the specified key.
    void delete(KeyT key) {
        Node node;
        if (__root)
            node = __root.find(key);
        if (!node)
            throw KeyError('node not found in RBTree.delete()');

        # delete the node
        if (node.delete())
        # set the root to null if it was the root node with no children
            __root = null;
        else
            # find the new root node.
            __root = __root.getRoot();
        --__count;
    }

    ## Delete all elements of the tree.
    void clear() {
        if (__root) {
            __root._unhookParents();
            __root = null;
            __count = 0;
        }
    }

    bool checkConstraints(Formatter report) {
        # empty trees always pass.
        if (!__root)
            return true;

        result := true;

        # 1: a node is either red or black (duh)
        # 2: the root node is black
        if (__root.red) {
            report `RBTree.checkConstraints: The root is not black\n`;
            result = false;
        }

        # 3: all leaves are black is true because we define null as black
        # 4: both children of every red node are black.
        if (!__root.checkRedChildrenBlack(report))
            result = false;

        # 5: every simple path to a leaf traverses the same number of black
        # nodes.
        if (__root.checkBlackCounts(report) == -1)
            result = false;

        return result;
    }

    uint count() { return __count; }

    ## a TreeMap is true if it has elements
    bool isTrue() { return __count; }

    Iter iter() { return Iter(this, __root); }

    void formatTo(Formatter fmt) {
        fmt `[`;
        bool first = true;
        for (item :in this){
            if (!first) fmt `, `;
            else first = false;
            fmt `$(item.key): $(item.val)`;
        }
        fmt `]`;
    }
}
