
Crack ToDo File & Project Plan
==============================

Copyright 2009 Google Inc.

-   audit locations where token definitions are replicated, make sure that
    all tokens are represented in all locations.  Things I've found are:
    -   compiler.Token doesn't have "is" methods for the following:
        do, enum, assignXXX (it does have "isAugAssign"), bitXXX (it has
        isBinOp), filename, for, is, lineNumber, PopErrCtx.
        I can't add these because Token is non-final and has a visible
        constructor.
    -   A bunch of these were missing in the TOK_* definitions, I've fixed
        these.

-   Expansions (non-heap storage types)
-   Remove generic line information from the meta-digest

Unassigned
----------

-   allow explicit operators to be called without the "var." prefix.
-   implement inheritence from low-level types.

Roadmap
-------

recategorize:
-   cleanup:
    -   combine FuncDef and OverloadDef into a base class with a virtual
        matches() for arg list defs, or just make FuncDef a smaller thing and
        always use OverloadDef
    -   allowing turning off code generation by replacing the builder with a
        "NullBuilder"  NullResultExpr follows:
            class NullResultExpr : public ResultExpr {
                public:
                    // won't work, need a non-null ResultExpr value
                    NullResultExpr() : ResultExpr(0) {}

                    ResultExprPtr emit(Context &context) {
                        return this;
                    }
            };


-   first class functions (including overload selection: func[Type1, Type2])
-   keyword arguments
-   sequence construction
-   type inference
-   minor features
-   string interpolation expressions: s := `some string $val`;
-   warn the user when an overload hides an earlier overload (foo(String)
    following foo(Object), for example).


