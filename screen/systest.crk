
import crack.ascii wsplit;
import crack.cmdline CmdOptions, Option, CMD_STR;
import crack.compiler CrackContext, Token;
import crack.cont.array Array;
import crack.cont.treemap TreeMap;
import crack.fs cwd, Path, makePath;
import crack.io cout, cerr, FStr, StringFormatter;
import crack.lang Buffer, FreeBase, Exception;
import crack.net Poller;
import crack.regex Regex;
import crack.strutil StringArray;
import crack.sys argv;
import crack.process Process, ProcessHandler, ProcessHandlerImpl,
    CRK_PIPE_STDOUT, CRK_PIPE_STDERR, CRK_PROC_EXITED;

CmdOptions opts = [
    Option('crack_bin', '', 'The full path to the crack binary.', '', CMD_STR),
    Option('root', '', 'Root directory of the crack source tree.', '',
           CMD_STR
           ),
    Option('testtmp', '',
           'A writable temporary directory, used to store generated scripts.',
           '',
           CMD_STR
           ),
    Option('run_flags', '',
           'Flags to be added to the script.  Multiple flags may be '
           'identified, separated by spaces.',
           '',
           CMD_STR
           ),
];
opts.parse(argv);

class MyProcHandler : ProcessHandlerImpl {
    StringFormatter out = {}, err = {};
    void onOutLine(Buffer buf) {
        out `out: $buf`;
    }

    void onErrLine(Buffer buf) {
        err `err: $buf`;
    }

    void onTerminate(int resultCode) {
        cout.write(err.string());
        cout.write(out.string());
        if (resultCode == CRK_PROC_EXITED)
            cout `terminated: success\n`;
        else
            cout `terminated, rc = $resultCode\n`;
    }
}

class Test {
    Path
        ## Root of source tree.
        root,

        ## Path to crack binary
        crackBin,

        ## Temporary directory that the test can use for output.  Must not
        ## exist prior to launching the test.
        testtmp,

        ## The cache directory.
        cacheDir;

    ## Flags to be passed to the crack executor when running.
    StringArray runFlags;

    # True if temp dir was created.
    bool __testtmpCreated;

    # Modules to trace (adds them to the "-t" flag).
    StringArray __trace = {};

    ## If true, run the script in pre-bootstrap (-n) mode.
    bool preBootstrap;

    ## If true, add the default library path.
    bool addDefaultLibs = true;

    # Fully qualified extra library path.
    String __libPath;

    oper init(Path root, Path crackBin, Path testtmp, StringArray runFlags) :
        root = root,
        crackBin = crackBin,
        testtmp = testtmp,
        runFlags = runFlags {
    }

    oper del() {
        if (__testtmpCreated)
            testtmp.deleteTree();
    }

    ## Does all non-trivial initialization.  Must be called before a test
    ## instance is constructed.
    void initialize() {
        if (testtmp.exists())
            throw Exception(FStr() I`\
                Temporary directory $testtmp already exists!
                Delete it before retrying.`
            );
        testtmp.makeDirs();
        __testtmpCreated = true;

        # create the cache directory
        cacheDir = testtmp/'cache';
        cacheDir.makeDirs();
    }

    ## Adds a module to the set of those to trace.
    void addTrace(String mod) {
        __trace.append(mod);
    }

    ## Creates a directory to that you can install libraries in and sets the
    ## library path for any subsequent scripts that are run to it.
    ## This allows you to create multiple versions of the same library to be
    ## loaded concurrently by multiple instances of the test launched with
    ## start().
    Path makeLibPath(String baseName) {
        path := testtmp/baseName;
        path.makeDirs();
        __libPath = path.getFullName();
        return path;
    }

    StringArray __makeCmd(String script) {
        StringArray cmd = [
            crackBin.getFullName(),
            '-b', 'cachePath=' + cacheDir.getFullName(), '-q'
        ];

        if (addDefaultLibs) {
            cmd.append('-l');
            cmd.append((root/'lib').getFullName());
        }

        # Add the appropriate flags.
        if (preBootstrap)
            cmd.append('-n');
        if (__trace) {
            cmd.append('-t');
            cmd.append(__trace.join(','));
        }

        # Add the extension library path(s) (if any)
        if (__libPath) {
            cmd.append('-l');
            cmd.append(__libPath);
        }

        cmd.extend(runFlags);
        cmd.append(script);
        return cmd;
    }

    ## Run the specified script
    void runScript(String script) {
        StringArray cmd = __makeCmd(script);
        Process(cmd, CRK_PIPE_STDOUT | CRK_PIPE_STDERR).run(MyProcHandler());
    }

    ## Writes the main script to main.crk.
    void main(String scriptContents) {
        (testtmp/'main.crk').writeAll(String.cast(scriptContents));
    }

    ## Writes a module file.
    ## The module name should be specified without an extension (and currently,
    ## must not be hierarchical)
    void mod(String name, String contents) {
        (testtmp/(name + '.crk')).writeAll(contents);
    }

    ## Run the main program.
    void run() {
        cwd.set(testtmp);
        runScript((testtmp/'main.crk').getFullName());
    }

    ## Start the script managed by the 'poller'.
    void start(String scriptName, Poller poller, ProcessHandler handler) {
        cmd := __makeCmd((testtmp/scriptName).getFullName());
        Process(cmd, CRK_PIPE_STDOUT | CRK_PIPE_STDERR).addTo(poller, handler);
    }

    ## Remove all cache files matching the specified pattern.  A "match" is
    ## defined according to the semantics of Regex.match(), so if you want to
    ## match a whole filename you need to end it with a '$'.
    void rmCacheFiles(String pattern) {
        pat := Regex(pattern);
        for (child :in cacheDir.children()) {
            if (pat.match(child.getName()))
                child.delete();
        }
    }
}

_runFlagsStr := opts.getString('run_flags');

## The global test object.
test := Test(
    makePath(opts.getString('root')),
    makePath(opts.getString('crack_bin')),
    makePath(opts.getString('testtmp')),
    _runFlagsStr ? wsplit(_runFlagsStr) : StringArray![]
);
test.initialize();
