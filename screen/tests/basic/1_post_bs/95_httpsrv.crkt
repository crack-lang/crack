%%TEST%%
HTTP Server
%%ARGS%%

%%FILE%%
import crack.fieldset FieldSet;
import crack.http.core HandlerFunc, Request;
import crack.http.server Server;
import crack.http.util Chain, PathDispatcher, PostRequestHandler,
    RequestHandler, NOT_FOUND;
import crack.strutil StringArray;
import crack.io cout, FStr, StringWriter;
import crack.lang AppendBuffer;
@import crack.ann assert;
@import crack.fieldset_ann fieldset_accessors;

# Test chains.
if (true) {
    output := StringWriter();
    req := Request(output, null);

    class Marker {
        @fieldset_accessors(Marker);
    }

    bool first(Request req) {
        Marker().putIn(req);
        return false;
    }

    bool second(Request req) {
        req.sendReply(200, 'text/plain', 'second data');
        return true;
    }

    bool third(Request req) {
        req.sendReply(400, 'text/plain', 'bad data');
        return true;
    }

    # Empty chain gives back false.
    chain := Chain();
    @assert(!chain(req));

    # So does a chain consisting only of a handler that abdicates.
    chain.append(HandlerFunc(first));
    @assert(!chain(req));

    chain.append(HandlerFunc(second));
    chain.append(HandlerFunc(third));
    @assert(chain(req))
    @assert(Marker.get(req));  # Make sure 'first' got called.
    @assert(output.string() ==
             'HTTP/1.1 200 Stat\n'
             'Content-type: text/plain\n'
             'Content-length: 11\n\n'
             'second data'
            );
}

# Test dispatchers.
if (true) {
    output := StringWriter();
    req := Request(output, null);
    req.path = '/a/x';

    class Marker {
        String result;

        oper init() {}

        @fieldset_accessors(Marker);

        @static Marker getOrMake(FieldSet set) {
            marker := Marker.get(set);
            if (!marker) {
                marker = Marker();
                marker.putIn(set);
            }
            return marker;
        }
    }

    bool a(Request req) {
        Marker.getOrMake(req).result = FStr() `a: $(req.parsedPath)`;
        return true;
    }

    bool b(Request req) {
        Marker.getOrMake(req).result = FStr() `b: $(req.parsedPath)`;
        return false;
    }

    disp := PathDispatcher();
    disp['a'] = HandlerFunc(a);
    disp['b'] = HandlerFunc(b);

    @assert(disp(req));
    @assert(Marker.get(req).result == "a: ['x']");

    req.path = '/b';
    req.parsedPath = null;
    @assert(!disp(req));
    @assert(Marker.get(req).result == 'b: []');

    req.path = '/c';
    req.parsedPath = null;
    Marker.deleteField(req);
    @assert(!disp(req));
    @assert(Marker.get(req) is null);
}

# Test NOT_FOUND
if (true) {
    output := StringWriter();
    req := Request(output, null);
    @assert(NOT_FOUND(req));
    @assert(output.string() ==
             'HTTP/1.1 404 Stat\n'
             'Content-type: text/html\n'
             'Content-length: 126\n\n'
             '<http>\n  <head>\n    <title>404 - Page not found</title>\n'
             '  </head>\n  <body>\n    <h1>404 - Page not found</h1>\n'
             '  </body>\n</http>'
            );
}

# Test PostDataCollector.
if (true) {
    String contents;
    bool handler(Request req) {
        contents = String(req.contents);
        return true;
    }

    postHandler := PostRequestHandler(handler);
    Request req = {StringWriter(), null};
    req.method = 'POST';
    postHandler(req);
    @assert(!(req.postDataHandler is null));
    req.remainingPostData = 6;
    req.postDataHandler(req, 'foo');
    req.remainingPostData = 3;
    req.postDataHandler(req, 'bar');
    @assert(contents == 'foobar');
}

# Test cookies.
if (true) {
    req := Request(null, null);
    req.headers['cookie'] = StringArray![
        '  foo="testvalue"',
        ' bar=othervalue',
        'cookie=value; more info'
    ];

    @assert(req.getCookie('foo').value == 'testvalue');
    @assert(req.getCookie('bar').value == 'othervalue');
    @assert(req.getCookie('cookie').value == 'value');
}

if (true) {
    AppendBuffer contents = {1024};
    bool handler(Request req) {
        contents.extend(req.contents);
        return true;
    }

    # Force the post data handler to be called with partial data.
    postHandler := PostRequestHandler(handler);
    client := Server.Client(null, null, Chain![postHandler]);
    client.inbuf = inbuf := AppendBuffer(1024);
    inbuf.extend(I'\
        POST / HTTP/1.1
        Content-length: 23

        here is some data'
    );

    client.parseNext(0);
    inbuf.extend(', dude');
    client.parseNext(0);
    @assert(contents == 'here is some data, dude');
}

cout `ok`;
%%EXPECT%%
ok
%%STDIN%%

