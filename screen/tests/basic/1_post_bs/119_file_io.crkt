%%TEST%%
file IO
%%ARGS%%
%%FILE%%
import crack.io cerr, SeekableReader, SeekableWriter, SEEK_CUR, SEEK_SET,
    SEEK_END;
import crack.fs makePath;
import crack.lang Buffer, WriteBuffer;

@import crack.ann assert, impl;

path := makePath('/tmp/foo');
out := path.writer();
out.write('test of seekability');
dst := path.reader();
@assert(dst.seek(4, SEEK_SET) == 4);
@assert(dst.read(4) == ' of ');
@assert(dst.seek(4, SEEK_CUR) == 12);
@assert(dst.read(4) == 'abil');
@assert(dst.seek(-11, SEEK_END) == 8);
@assert(dst.read(4) == 'seek');

# Verify that it works for write.
@assert(out.seek(4, SEEK_SET) == 4);
out.write('ing');
@assert(dst.seek(0, SEEK_SET) == 0);
@assert(dst.read(7) == 'testing');


# Just defining these to verify that we can implement SeekableReader and
# SeekableWriter using @impl (they're unusual because of the dual-interface
# inheritence)

class MyReader @impl SeekableReader {
    int64 seek(int64 pos, int whence) { return 0 }
    int64 tell() { return 0 }

    uint read(WriteBuffer data) {
        return 0;
    }
}

class MyWriter @impl SeekableWriter {
    int64 seek(int64 pos, int whence) { return 0 }
    int64 tell() { return 0 }

    void write(Buffer data) {}
}


cerr `ok\n`;
%%EXPECT%%
ok
%%STDIN%%
