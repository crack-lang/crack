#%%TEST%%
#command line parsing (crack.cmd)
#%%ARGS%%
#%%FILE%%

import crack.cont.array Array;
import crack.cont.hashmap HashMap;
import crack.exp.cmd ActionFunc, ArgError, ArgInfoBase, ArgInfo, ArgParser,
    ArgVal, ArgValBase, CommandArgParser, CommandInterface, Converter,
    ConverterBase, SubcommandArgInfo, ValueMap;
import crack.exp.cmd.doc addHelpCommand;
import crack.io cerr, cout, StringFormatter;
import crack.lang AssertionError;
import crack.strutil StringArray;
import crack.cont.treemap TreeMap;

@import crack.ann assert, impl;
@import crack.exp.cmd.ann command;

ci := CommandInterface![
    ArgInfo[String]('foo', null, false, null, 'docs'),
    ArgInfo[bool]('boolpos', null, false, true, 'docs'),
    ArgInfo[bool]('flag1', StringArray!['-f'], true, false, 'docs'),
    ArgInfo[String]('flag2', StringArray!['-g'], true, null, 'docs'),
    ArgInfo[bool]('standalone', StringArray!['-h'], false, null, 'docs'),
    ArgInfo[String]('longarg', StringArray!['--longarg'], true, null, 'docs'),
    ArgInfo[String]('longarg2', StringArray!['--larg2'], true, null, 'docs'),
    ArgInfo[int]('defaultedPos', null, true, 123, 'docs'),
    ArgInfo[int]('defaulted', StringArray!['-d'], true, 100, 'docs'),
    ArgInfo[bool]('negated', StringArray!['--negated'], true, true, 'docs'),
];
result := ci.parseArgs(StringArray!['--longarg=long arg val', 'value', 'true',
                                    '-fg', 'gval', '--larg2', 'larg2 val',
                                    '-h', '--no-negated']);
@assert(ArgVal[String].cast(result['foo']).val == 'value');
@assert(ArgVal[int].cast(result['defaultedPos']).val == 123);
@assert(ArgVal[bool].cast(result['flag1']).val);
@assert(ArgVal[String].cast(result['flag2']).val == 'gval');
@assert(ArgVal[bool].cast(result['standalone']).val);
@assert(ArgVal[int].cast(result['defaulted']).val == 100);
@assert(ArgVal[bool].cast(result['boolpos']).val);
@assert(ArgVal[String].cast(result['longarg']).val == 'long arg val');
@assert(ArgVal[String].cast(result['longarg2']).val == 'larg2 val');
@assert(!ArgVal[bool].cast(result['negated']).val);

# Subcommands.
if (true) {
    ci = CommandInterface![
        ArgInfo[bool]('parentFlag', StringArray!['-p'], true, false, 'docs'),
    ];
    subcmd := CommandInterface![
        ArgInfo[bool]('subflag', StringArray!['--sf'], true, false, 'docs'),
        ArgInfo[String]('subpos', null, false, null, true, 'docs'),
    ];
    subCmdArgInfo := SubcommandArgInfo();
    subCmdArgInfo.add('subcmd', subcmd);
    class Action @impl ActionFunc {
        bool subflag;
        String subpos;
        void oper call(HashMap[String, ArgValBase] values) {
            subflag = ArgVal[bool].cast(values['subflag']).val;
            subpos = ArgVal[String].cast(values['subpos']).val;
        }
    }
    subcmd.action = action := Action();
    ci.append(subCmdArgInfo);
    ci.parseArgs(StringArray!['-p', 'subcmd', '--sf', 'subval']);
    @assert(action.subpos == 'subval');
    @assert(action.subflag);
}

# Required argument not provided.
ci = CommandInterface![
    ArgInfo[String]('foo', null, false, null, 'docs'),
];
result = ci.parseArgs(StringArray!['val']);
@assert(ArgVal[String].cast(result['foo']).val == 'val');
try {
    ci.parseArgs(StringArray![]);
    @assert(false);
} catch (ArgError ex) {
}

# Required flag not provided.
ci = CommandInterface![
    ArgInfo[bool]('foo', StringArray!['-f'], false, null, 'docs'),
];
result = ci.parseArgs(StringArray!['-f']);
@assert(ArgVal[bool].cast(result['foo']).val);
try {
    ci.parseArgs(StringArray![]);
    @assert(false);
} catch (ArgError ex) {
}

# Missing parameter at the end of the args.
ci = CommandInterface![
    ArgInfo[String]('foo', StringArray!['-f'], false, null, 'docs'),
];
result = ci.parseArgs(StringArray!['-f', 'val']);
@assert(ArgVal[String].cast(result['foo']).val == 'val');
try {
    ci.parseArgs(StringArray!['-f']);
    @assert(false);
} catch (ArgError ex) {
}

# Invalid argument for a bool.
ci = CommandInterface![
    ArgInfo[bool]('foo', StringArray!['--flag'], false, null, 'docs'),
];
result = ci.parseArgs(StringArray!['--flag=true']);
@assert(ArgVal[bool].cast(result['foo']).val);
try {
    ci.parseArgs(StringArray!['--flag=totally not a bool']);
    @assert(false);
} catch (ArgError ex) {
    @assert(ex.text == 'Invalid value for boolean type: totally not a bool');
}

# Unknown flag in a singla dash flag cluster.
try {
    ci = CommandInterface![
        ArgInfo[bool]('foo', StringArray!['-f'], false, null, 'docs'),
    ];
    ci.parseArgs(StringArray!['-fl']);
    @assert(false);
} catch (ArgError ex) {
    @assert(ex.text == 'Unknown flag -l');
}

# Unknown long flag.
try {
    ci = CommandInterface();
    ci.parseArgs(StringArray!['--unknown']);
    @assert(false);
} catch (ArgError ex) {
    @assert(ex.text == 'Unknown flag --unknown');
}

# Unknown long flag with a value.
try {
    ci = CommandInterface();
    ci.parseArgs(StringArray!['--unknown=value']);
    @assert(false);
} catch (ArgError ex) {
    @assert(ex.text == 'Unknown flag --unknown');
}

# Unknown negated long bool flags
try {
    ci = CommandInterface();
    ci.parseArgs(StringArray!['--no-unknown']);
    @assert(false);
} catch (ArgError ex) {
    @assert(ex.text == 'Unknown flag --no-unknown');
}

# Non-integer value given to integer argument.
try {
    ci = CommandInterface![
        ArgInfo[int]('arg', null, false, 0, 'docs')
    ];
    ci.parseArgs(StringArray!['not an integer']);
    @assert(false && 'illegal integer value does not throw an exception');
} catch (ArgError ex) {
    @assert(ex.text == 'Invalid value for integer argument: not an integer');
}

# Adding an argument after a multi gives an error.
try {
    ci = CommandInterface![
        ArgInfo[int]('arg', null, false, 0, true, 'docs'),
        ArgInfo[int]('extra', null, false, 0, 'docs'),
    ];
    @assert(false && 'No exception adding an arg after a multi-arg');
} catch (AssertionError ex) {
    @assert(ex.text.endsWith('Assertion failed: ( ! positional || ! '
                             'positional [ - 1 ] . multi )\n'));
}

@command int foo(String arg1, @flag('-f') int flag = 0) {
    return flag;
}
fooInst := foo(StringArray!['first', '-f100']);

@assert(fooInst() == 100);
@assert(fooInst.arg1 == 'first');

fooInst = foo(StringArray!['first']);
@assert(fooInst() == 0);

# Multi-value argument
@command Array[int] multiInt(@multi Array[int] args) {
    return args;
}
@assert(multiInt(StringArray!['1', '2', '3'])() == Array[int]![1, 2, 3]);

# Multi-argument flags.
@command Array[bool] multiFlag(@multi @flag('-f', '--f') Array[bool] vals) {
    return vals;
}
@assert(multiFlag(StringArray!['-f', '--no-f', '-f', '--no-f'])() ==
        Array[bool]![true, false, true, false]);

# Subcommand.
if (true) {
    String fooArg;
    bool mainFlag;
    @command void main(@flag('-f') bool mainFlag, @subcmd) {}

    @command(parent = main) void foo(String arg) {
        mainFlag = parent.mainFlag;
        fooArg = arg;
    }

    main(StringArray!['-f', 'foo', 'fooval'])();;
    @assert(fooArg == 'fooval');
    @assert(mainFlag);
}

# Converters
if (true) {
    class Foo {
        String val;
        oper init(String val) : val = val {}
        @static Foo create(String val) { return Foo(val) }
    }
    converters := Array[ConverterBase]![Converter[Foo].Wrap(Foo.create)];
    @command(converters = converters) void main(Foo arg) {}
    inst := main(StringArray!['someval']);
    @assert(inst.arg && inst.arg.val == 'someval');
}

if (true) {
    ## This is a command comment.
    @command void foo(
        ## First argument.
        String arg1,

        ## Set this flag to do something awesome.
        @flag('-f') bool flag = false,
        @subcmd
    ) {
    }

    addHelpCommand(foo_subcmds, foo());
    oldCout := cout;
    cout = tmp := StringFormatter();
    foo(StringArray!['toot', 'help']);
    cout = oldCout;
    @assert(
        tmp.string() ==
         I'foo <arg1> <command>
            This is a command comment.

           arg1
              First argument.

           Flags:
           -f
              Set this flag to do something awesome.

           Subcommands:
             help -- Show this help message.
           ');
}

cerr `ok\n`;

#%%EXPECT%%
#ok
#%%STDIN%%
