%%TEST%%
appendages
%%ARGS%%
%%FILE%%
class A {
    int i;
    oper init(int i) : i = i {}
    void put() {
        printint(i);
        puts('');
    }
}

class B = A {
    void foo() {
        puts('B.foo()');
        put();
    }
}

# This constructor should be a no-op.
b := B(A(100));
b.foo();

class C = A {
    void bar() {
        puts('C.bar()'); put();
    }
}

class D = B, C {}

d := D(A(200));
d.foo();
d.bar();

# Verify that derived appendage constructors work as we expect.
if (D(C(A(200))).i != 200)
    puts('FAILED creating appendage from a non-anchor intermediate');

class G[T] = T {
    void putter() { put() }
}

G[A](A(300)).putter();

# Check that virtual functions work.

if (1) {
    class A : VTableBase {
        void f() { puts('A.f()') }
    }

    class B : A {
        void f() { puts('B.f()') }
    }

    class C = A {}

    C c = C(B());
    c.f();
}

# Check for a very specific bug that showed up when we were generating vtables
# for appendages, something we don't need to do.
if (1) {
    class GenApp[T] = T {}
    class B2 {}
    class B : VTableBase, B2 {}
    class X : B {}
    GenApp[X] x;
}

%%EXPECT%%
B.foo()
100
B.foo()
200
C.bar()
200
300
B.f()
%%STDIN%%
