%%TEST%%
crack.net.ssl
%%ARGS%%
%%FILE%%
import crack.logger setLogLevel, FATAL;
import crack.logger.ctx Log;
import crack.ext._ssl SSL;
import crack.fs makePath;
import crack.net InetAddress;
import crack.net.comm2 Comm, Connection, ConnectionFactory, NewConnection,
    UserHandler, WaiterFor;
import crack.io cerr;
import crack.io.readers LineReader;
import crack.lang AppendBuffer, Buffer, Exception;
import crack.random MersenneTwister;
import crack.runtime sleep;
import crack.net.ssl SSLConnection, SSLContext, SSLError;

@import crack.ann assert, impl;

setLogLevel(FATAL);

const ADDR := InetAddress(127, 0, 0, 1, 4433);

# The last client to connect.
Connection lastClient;

bool checkSSLUserData = false;

class Length {
    int pos;
    int length;
    oper init(Buffer buf) {
        if (!buf) {
            length = 256;
            return;
        }

        int cur = buf[pos++];
        while (cur & 0x80) {
            if (pos >= buf.size) {
                # We don't know how long it is, but we know there's not
                # enough data in the buffer so we just have to return a size
                # large enough to cause the calling code to wait for more data.
                length = 256;
                return;
            }
            length = (length << 7) | (cur & 0x7f);
            cur = buf[pos++];
        }
        length = (length << 7) | cur;
    }
}

## Stores the length in the append buffer.
void encodeLength(AppendBuffer buf, int32 length) {
    if (!length) {
        buf.append(0);
        return;
    }

    # Find the highest nonzero 7-bit field.
    start := 28;
    while (!(length & (0x7f << start)))
        start -= 7;

    while (start) {
        buf.append(byte(length >> start) & 0x7f | 0x80);
        start -= 7;
    }
    buf.append(byte(length & 0x7f));
}

# First we test that our encode/decode works.
if (true) {
    AppendBuffer temp = {100};
    encodeLength(temp, 0x7f);
    @assert(temp.size == 1);
    len := Length(temp);
    @assert(len.length == 0x7f);
    @assert(len.pos == 1);

    temp.size = 0;
    encodeLength(temp, 0x80);
    @assert(temp.size == 2);
    len = Length(temp);
    @assert(len.length == 0x80);
    @assert(len.pos == 2);

    temp.size = 0;
    encodeLength(temp, 0x3fff);
    @assert(temp.size == 2);
    len = Length(temp);
    @assert(len.length == 0x3fff);
    @assert(len.pos == 2);

    temp.size = 0;
    encodeLength(temp, 0x4000);
    @assert(temp.size == 3);
    len = Length(temp);
    @assert(len.length == 0x4000);
    @assert(len.pos == 3);

    temp.size = 0;
    encodeLength(temp, 0x10000);
    @assert(temp.size == 3);
    len = Length(temp);
    @assert(len.length == 0x10000);
    @assert(len.pos == 3);
}

class ServerHandler @impl UserHandler {
    void process(Connection conn) {
        ssl := SSLConnection.get(conn);
        if (!ssl)
            cerr `SSL object not attached to connection.`;

        # Verify that user data got passed through correctly.
        if (checkSSLUserData && !(ssl.getUserData(0) is ADDR))
            cerr `User data not associated with SSL connection.`;

        len := Length(conn.inBuf);
        totalSize := len.length + len.pos;
        if (conn.inBuf && conn.inBuf.size >= totalSize) {
            conn.write(Buffer(conn.inBuf.buffer, totalSize));
            conn.inBuf.compact(totalSize);
        }
    }

    void addResponder(Object responder) {}
    void terminate(Connection conn) {
        if (lastClient is conn)
            lastClient = null;
    }
}

class TestHandlerFactory @impl ConnectionFactory {
    Connection makeConnection(NewConnection conn) {
        lastClient = Connection(conn.log, ServerHandler());
        lastClient.processAllEvents = true;
        return lastClient;
    }
}

class ShutOut : Exception {
    oper init() : Exception() {}
}

class ClientHandler @impl UserHandler {
    WaiterFor[String, int] __waiter;
    int terminated;

    void process(Connection conn) {
        @assert(SSLConnection.get(conn));
        len := Length(conn.inBuf);
        totalSize := len.pos + len.length;
        if (conn.inBuf && conn.inBuf.size >= totalSize) {
            if (__waiter)
                __waiter.setResult(
                    String(conn.inBuf, totalSize, false)
                );
            else
                cerr `Unsolicited response!\n`;
            conn.inBuf.compact(totalSize);
        }
    }

    void addResponder(Object responder) {
        __waiter = WaiterFor[String, int].cast(responder);
    }

    void terminate(Connection handler) {
        if (__waiter)
            __waiter.setError(ShutOut());
        terminated += 1;
    }
}

comm := Comm(Log(null, null, null, cerr, cerr, 'ssltest'));
comm.start();
conn := SSLContext.make(makePath('test/test1.key'), makePath('test/test1.crt'),
                        comm
                        );

# Start the server.
comm.startServer(ADDR, conn.makeConnectionFactory(TestHandlerFactory()), true);

# Connect a client.
clientHandler := ClientHandler();
orgRc := clientHandler.refCount;
client := conn.connect(InetAddress(127, 0, 0, 1, 4433), clientHandler);
waiter := WaiterFor[String, int](0);
client.sendSync('\014hello world!', waiter);
@assert(waiter.getResult() == '\014hello world!');

if (true) {
    # Generate enough data to exceed the intermediate buffers.  This has been
    # found to exercise two problem spots: 1) renegotiation (which only
    # required 8100 four byte samples to stimulate) 2) the need for
    # multiple reads to clean out the mem-io object (a single read leaves us
    # stuck at 64K)
    rand := MersenneTwister(12345678);
    const SAMPLES := 65636 / 4;
    data := AppendBuffer(SAMPLES * 4);
    encodeLength(data, SAMPLES * 4);
    for (int i; i < SAMPLES; ++i) {
        b := rand.get();
        data.append(byte(b >> 24));
        data.append(byte(b >> 16));
        data.append(byte(b >> 8));
        data.append(byte(b));
    }
    msg := String(data, true);

    waiter = WaiterFor[String, int](0);
    client.sendSync(msg, waiter);
    @assert(waiter.getResult() == msg);

    # Make sure we can get a message through after that.
    waiter = WaiterFor[String, int](0);
    msg = '\014hello world!';
    client.sendSync(msg, waiter);
    @assert(waiter.getResult() == msg);
}

client.closeSync();
client = null;
@assert(clientHandler.refCount == orgRc);
@assert(clientHandler.terminated == 1);

# Going to use this server address for the next two tests.
const ADDR2 := InetAddress(127, 0, 0, 1, 4434);

# Test PSK auth.
if (true) {

    import crack.runtime memcpy, strcpy;

    clientPSK := serverPSK := array[byte]![1, 2, 3, 4];

    uint clientCB(SSL ssl, byteptr hint, byteptr identity,
                  uint max_identity_length,
                  byteptr psk,
                  uint max_psk_length
                  ) {
        ident := 'identity';
        @assert(ident.size < max_psk_length);
        strcpy(identity, ident.buffer);

        @assert(max_psk_length >= 4);
        memcpy(psk, byteptr(clientPSK), 4);
        return 4;
    }

    uint serverCB(SSL ssl, byteptr identity, byteptr psk, uint max_psk_length) {
        @assert(String(identity) == 'identity');

        @assert(max_psk_length >= 4);
        memcpy(psk, byteptr(serverPSK), 4);
        ssl.setExData(0, ADDR);
        return 4;
    }

    checkSSLUserData = true;
    ctx := SSLContext.make(clientCB, serverCB, comm);
    comm.startServer(ADDR2,
                     ctx.makeConnectionFactory(TestHandlerFactory()),
                     true
                     );

    client := ctx.connect(ADDR2, ClientHandler());
    waiter = WaiterFor[String, int](0);
    client.sendSync('\016secret message', waiter);
    @assert(waiter.getResult() == '\016secret message');
    client.closeSync();

    clientPSK = array[byte]![4, 3, 2, 1];
    try {
        client = ctx.connect(ADDR2, ClientHandler());
        @assert(false && "connection succeeded with invalid password.");
    } catch (SSLError ex) {
        # ok.
    }
}

# Test that an unencrypted client fails fast.  (This assumes the existence of
# the server started in the last test.
if (false) {
    conn := comm.connect(ADDR2, ClientHandler());
    waiter := WaiterFor[String, int](0);
    conn.sendSync('\006lol hi!', waiter);
    try {
        waiter.getResult();
        @assert(false && "connection timeout test failed");
    } catch (ShutOut ex) {
        # ok
    }
}

comm.stop();

cerr `ok\n`;
%%EXPECT%%
ok
%%STDIN%%
