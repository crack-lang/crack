%%TEST%%
crack.net.ssl
%%ARGS%%
%%FILE%%
import crack.logger.ctx Log;
import crack.fs makePath;
import crack.net InetAddress;
import crack.net.comm2 Comm, Connection, ConnectionFactory, NewConnection,
    UserHandler, WaiterFor;
import crack.io cerr;
import crack.io.readers LineReader;
import crack.random MersenneTwister;
import crack.runtime sleep;
import crack.net.ssl SSLContext;

@import crack.ann assert, impl;

# XXX need to set this to zero.
const ADDR := InetAddress(127, 0, 0, 1, 4433);

# The last client to connect.
Connection lastClient;

class ServerHandler @impl UserHandler {
    void process(Connection conn) {
        if (conn.inBuf && conn.inBuf.size > conn.inBuf[0]) {
            conn.write(conn.inBuf);
            conn.inBuf.compact(conn.inBuf[0]);
        }
    }

    void addResponder(Object responder) {}
    void terminate(Connection conn) {
        if (lastClient is conn)
            lastClient = null;
    }
}

class TestHandlerFactory @impl ConnectionFactory {
    Connection makeConnection(NewConnection conn) {
        lastClient = Connection(conn.log, ServerHandler());
        lastClient.processAllEvents = true;
        return lastClient;
    }
}

class ClientHandler @impl UserHandler {
    WaiterFor[String, int] __waiter;
    int terminated;

    void process(Connection conn) {
        if (conn.inBuf && conn.inBuf.size > conn.inBuf[0]) {
            if (__waiter)
                __waiter.setResult(
                    String(conn.inBuf, conn.inBuf[0] + 1, false)
                );
            else
                cerr `Unsolicited response!\n`;
            conn.inBuf.compact(conn.inBuf[0]);
        }
    }

    void addResponder(Object responder) {
        __waiter = WaiterFor[String, int].cast(responder);
    }

    void terminate(Connection handler) {
        terminated += 1;
    }
}

comm := Comm(Log(null, null, cerr, cerr, cerr, 'ssltest'));
comm.start();
conn := SSLContext.make(makePath('test/test1.key'), makePath('test/test1.crt'),
                        comm
                        );

# Start the server.
comm.startServer(ADDR, conn.makeConnectionFactory(TestHandlerFactory()), true);

# Connect a client.
clientHandler := ClientHandler();
orgRc := clientHandler.refCount;
client := conn.connect(InetAddress(127, 0, 0, 1, 4433), clientHandler);
waiter := WaiterFor[String, int](0);
client.sendSync('\014hello world!', waiter);
@assert(waiter.getResult() == '\014hello world!');

client.closeSync();
client = null;
@assert(clientHandler.refCount == orgRc);
@assert(clientHandler.terminated == 1);

@assert(lastClient is null);

comm.stop();

cerr `ok\n`;
%%EXPECT%%
ok
%%STDIN%%
