%%TEST%%
threads
%%ARGS%%
%%FILE%%
# Tests the threads module.
import crack.io cout, StandardFormatter, Writer;
import crack.lang Buffer, ManagedBuffer;
import crack.threads Event, MutexLock, Thread, Queue, Queue2;

@import crack.ann assert;

Queue[Object] mainQueue = {};

class MyThread : Thread {
    Queue[Object] queue = {};

    oper init() {}

    void getMsg() {
        m := queue.get();
        cout `thread got $m\n`;
    }

    void run() {
        cout `thread started\n`;
        getMsg();
        mainQueue.add('t1');
        getMsg();
        mainQueue.add('t2');
        getMsg();
        mainQueue.add('t3');
    }
}

void getMsg() {
    m := mainQueue.get();
    cout `main got $m\n`;
}

cout `main started\n`;
thread := MyThread();
thread.start();
thread.queue.add('m1');
getMsg();
thread.queue.add('m2');
getMsg();
thread.queue.add('m3');
getMsg();
thread.join();

cout `joined\n`;

event := Event();
@assert(!event.signalled());
event.lockAndSignal();
if (true) {
    MutexLock lock = {event.getMutex()};
    event.wait();
}
@assert(event.signalled());

event.reset();
@assert(!event.signalled());

Queue[int] queue = {};
class EventThread : Thread {
    void run() {
        queue.get();
        event.lockAndSignal();
    }
}
et := EventThread();
et.start();
queue.add(1);
if (true) {
    MutexLock lock = {event.getMutex()};
    event.wait();
}
@assert(event.signalled());
et.join();

# Verify queue ordering is FIFO.
if (true) {
    q := Queue[int]();
    q.add(1);
    q.add(2);
    q.add(3);
    @assert(q.get() == 1);
    @assert(q.get() == 2);
    @assert(q.get() == 3);
}

# Verify Queue2 behavior.
if (true) {
    q := Queue2[String]();
    @assert(q.getNonBlocking() is null);
    q.add('foo');
    q.add('bar');
    q.add('baz');
    @assert(q.getNonBlocking() == 'foo');
    @assert(q.getNonBlocking() == 'bar');
    # This isn't optimal in that it doesn't verify the blocking behavior.
    @assert(q.get() == 'baz');
}

%%EXPECT%%
main started
thread started
thread got m1
main got t1
thread got m2
main got t2
thread got m3
main got t3
joined
%%STDIN%%
